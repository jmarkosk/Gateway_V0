
c:/Users/jasonma.Vecima/Documents/particle/boron/GATEWAY_V0/Gateway_V0/target/Gateway_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002758  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016808  2**0
                  CONTENTS
  3 .data         0000006c  2003e2f0  000d6770  0000e2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000494  2003e35c  2003e35c  0001e35c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d67dc  000d67dc  000167dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6804  000d6804  00016804  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0008a7b3  00000000  00000000  00016808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d6de  00000000  00000000  000a0fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010281  00000000  00000000  000ae699  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d60  00000000  00000000  000be91a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002ce0  00000000  00000000  000c067a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00030b57  00000000  00000000  000c335a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000209a4  00000000  00000000  000f3eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000cf83d  00000000  00000000  00114855  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b254  00000000  00000000  001e4094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	c8 62 0d 00                                         .b..

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f8d4 	bl	d61da <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f8d9 	bl	d61f0 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2f0 	.word	0x2003e2f0
   d4048:	000d6770 	.word	0x000d6770
   d404c:	2003e35c 	.word	0x2003e35c
   d4050:	2003e35c 	.word	0x2003e35c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	f001 f8e3 	bl	d5224 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6764 	.word	0x000d6764
   d4080:	000d672c 	.word	0x000d672c

000d4084 <module_user_setup>:
   d4084:	f000 b864 	b.w	d4150 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 f8b7 	bl	d41fc <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f001 b895 	b.w	d51c0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbcd 	b.w	d4834 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bbcb 	b.w	d4834 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bbd1 	b.w	d4844 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f000 bbcf 	b.w	d4844 <free>

000d40a6 <__cxa_guard_acquire>:
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z13ProcessNodeIDPKcS0_>:
}


//Gets ENDNODE count and NODE ID
void ProcessNodeID(const char *event, const char *data)
{
   d40b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d40bc:	460e      	mov	r6, r1
   d40be:	4604      	mov	r4, r0
  int8_t i;
  Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
   d40c0:	f001 f9a0 	bl	d5404 <_Z16_fetch_usbserialv>
   d40c4:	4a13      	ldr	r2, [pc, #76]	; (d4114 <_Z13ProcessNodeIDPKcS0_+0x5c>)

  for(i = 0; i<= gNodeCount; i++)
   d40c6:	f8df 8054 	ldr.w	r8, [pc, #84]	; d411c <_Z13ProcessNodeIDPKcS0_+0x64>
  {
     if(strcmp(data, gNodeID[i]) == 0)  //if the nodeid is alread recorded, exit
   d40ca:	f8df 9054 	ldr.w	r9, [pc, #84]	; d4120 <_Z13ProcessNodeIDPKcS0_+0x68>

//Gets ENDNODE count and NODE ID
void ProcessNodeID(const char *event, const char *data)
{
  int8_t i;
  Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
   d40ce:	2e00      	cmp	r6, #0
   d40d0:	bf18      	it	ne
   d40d2:	4632      	movne	r2, r6
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40d4:	9200      	str	r2, [sp, #0]
   d40d6:	4623      	mov	r3, r4
   d40d8:	4a0f      	ldr	r2, [pc, #60]	; (d4118 <_Z13ProcessNodeIDPKcS0_+0x60>)
   d40da:	2101      	movs	r1, #1
   d40dc:	f000 ffe7 	bl	d50ae <_ZN5Print11printf_implEbPKcz>
   d40e0:	2700      	movs	r7, #0

  for(i = 0; i<= gNodeCount; i++)
   d40e2:	f898 5000 	ldrb.w	r5, [r8]
   d40e6:	b27c      	sxtb	r4, r7
   d40e8:	42ac      	cmp	r4, r5
   d40ea:	dc0f      	bgt.n	d410c <_Z13ProcessNodeIDPKcS0_+0x54>
  {
     if(strcmp(data, gNodeID[i]) == 0)  //if the nodeid is alread recorded, exit
   d40ec:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   d40f0:	4621      	mov	r1, r4
   d40f2:	4630      	mov	r0, r6
   d40f4:	f002 f8ac 	bl	d6250 <strcmp>
   d40f8:	3701      	adds	r7, #1
   d40fa:	b138      	cbz	r0, d410c <_Z13ProcessNodeIDPKcS0_+0x54>
        return;
     }
     else
     {
       /* code */
       strcpy(gNodeID[i], data);
   d40fc:	4631      	mov	r1, r6
   d40fe:	4620      	mov	r0, r4
       gNodeCount++;
   d4100:	3501      	adds	r5, #1
        return;
     }
     else
     {
       /* code */
       strcpy(gNodeID[i], data);
   d4102:	f002 f8af 	bl	d6264 <strcpy>
       gNodeCount++;
   d4106:	f888 5000 	strb.w	r5, [r8]
void ProcessNodeID(const char *event, const char *data)
{
  int8_t i;
  Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");

  for(i = 0; i<= gNodeCount; i++)
   d410a:	e7ea      	b.n	d40e2 <_Z13ProcessNodeIDPKcS0_+0x2a>
     }   
     

  }

   d410c:	b003      	add	sp, #12
   d410e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4112:	bf00      	nop
   d4114:	000d62dc 	.word	0x000d62dc
   d4118:	000d62e1 	.word	0x000d62e1
   d411c:	2003e370 	.word	0x2003e370
   d4120:	2003e372 	.word	0x2003e372

000d4124 <_Z12ProcessNodesPKcS0_>:

}


void ProcessNodes(const char *event, const char *data)
{
   d4124:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4126:	4605      	mov	r5, r0
   d4128:	460c      	mov	r4, r1
  Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
   d412a:	f001 f96b 	bl	d5404 <_Z16_fetch_usbserialv>
   d412e:	4906      	ldr	r1, [pc, #24]	; (d4148 <_Z12ProcessNodesPKcS0_+0x24>)
   d4130:	4a06      	ldr	r2, [pc, #24]	; (d414c <_Z12ProcessNodesPKcS0_+0x28>)
   d4132:	2c00      	cmp	r4, #0
   d4134:	bf08      	it	eq
   d4136:	460c      	moveq	r4, r1
   d4138:	9400      	str	r4, [sp, #0]
   d413a:	462b      	mov	r3, r5
   d413c:	2101      	movs	r1, #1
   d413e:	f000 ffb6 	bl	d50ae <_ZN5Print11printf_implEbPKcz>

}
   d4142:	b003      	add	sp, #12
   d4144:	bd30      	pop	{r4, r5, pc}
   d4146:	bf00      	nop
   d4148:	000d62dc 	.word	0x000d62dc
   d414c:	000d62e1 	.word	0x000d62e1

000d4150 <setup>:





void setup() {
   d4150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Put initialization like pinMode and begin functions here.
    Serial.begin(9600);
   d4152:	f001 f957 	bl	d5404 <_Z16_fetch_usbserialv>
   d4156:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d415a:	f001 f943 	bl	d53e4 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d415e:	2000      	movs	r0, #0
   d4160:	f000 f972 	bl	d4448 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4164:	2500      	movs	r5, #0
   d4166:	4604      	mov	r4, r0
   d4168:	f247 562f 	movw	r6, #29999	; 0x752f
   d416c:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d416e:	2000      	movs	r0, #0
   d4170:	f000 f96a 	bl	d4448 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4174:	1b00      	subs	r0, r0, r4
   d4176:	eb61 0105 	sbc.w	r1, r1, r5
   d417a:	428f      	cmp	r7, r1
   d417c:	bf08      	it	eq
   d417e:	4286      	cmpeq	r6, r0
   d4180:	d307      	bcc.n	d4192 <setup+0x42>
    waitFor(Serial.isConnected, 30000);
   d4182:	f001 f93f 	bl	d5404 <_Z16_fetch_usbserialv>
   d4186:	f001 f931 	bl	d53ec <_ZN9USBSerial11isConnectedEv>
   d418a:	b910      	cbnz	r0, d4192 <setup+0x42>
            spark_process();
   d418c:	f000 fb42 	bl	d4814 <spark_process>
   d4190:	e7ed      	b.n	d416e <setup+0x1e>
   d4192:	f001 f937 	bl	d5404 <_Z16_fetch_usbserialv>
   d4196:	f001 f929 	bl	d53ec <_ZN9USBSerial11isConnectedEv>
    Serial.printlnf("Version: %s", version);
   d419a:	f001 f933 	bl	d5404 <_Z16_fetch_usbserialv>
   d419e:	4b0f      	ldr	r3, [pc, #60]	; (d41dc <setup+0x8c>)
   d41a0:	4a0f      	ldr	r2, [pc, #60]	; (d41e0 <setup+0x90>)
   d41a2:	2101      	movs	r1, #1
   d41a4:	f000 ff83 	bl	d50ae <_ZN5Print11printf_implEbPKcz>
    Serial.println("Yard Monitor initialized....");
   d41a8:	f001 f92c 	bl	d5404 <_Z16_fetch_usbserialv>
   d41ac:	490d      	ldr	r1, [pc, #52]	; (d41e4 <setup+0x94>)
   d41ae:	f000 ff45 	bl	d503c <_ZN5Print7printlnEPKc>
    pinMode(HB_LED, OUTPUT);
   d41b2:	2101      	movs	r1, #1
   d41b4:	2007      	movs	r0, #7
   d41b6:	f001 fe1d 	bl	d5df4 <pinMode>
    pinMode(MESH_STATS_LED, OUTPUT);
   d41ba:	2101      	movs	r1, #1
   d41bc:	2006      	movs	r0, #6
   d41be:	f001 fe19 	bl	d5df4 <pinMode>
    
    Mesh.subscribe("Recieved_Nodes", ProcessNodes);
   d41c2:	4a09      	ldr	r2, [pc, #36]	; (d41e8 <setup+0x98>)
   d41c4:	4909      	ldr	r1, [pc, #36]	; (d41ec <setup+0x9c>)
   d41c6:	480a      	ldr	r0, [pc, #40]	; (d41f0 <setup+0xa0>)
   d41c8:	f001 fc72 	bl	d5ab0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
    Mesh.subscribe("NodeID", ProcessNodeID);
   d41cc:	4a09      	ldr	r2, [pc, #36]	; (d41f4 <setup+0xa4>)
   d41ce:	490a      	ldr	r1, [pc, #40]	; (d41f8 <setup+0xa8>)
   d41d0:	4807      	ldr	r0, [pc, #28]	; (d41f0 <setup+0xa0>)
    //Mesh.publish("GET_Nodes");
    



}
   d41d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println("Yard Monitor initialized....");
    pinMode(HB_LED, OUTPUT);
    pinMode(MESH_STATS_LED, OUTPUT);
    
    Mesh.subscribe("Recieved_Nodes", ProcessNodes);
    Mesh.subscribe("NodeID", ProcessNodeID);
   d41d6:	f001 bc6b 	b.w	d5ab0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d41da:	bf00      	nop
   d41dc:	000d6387 	.word	0x000d6387
   d41e0:	000d62f2 	.word	0x000d62f2
   d41e4:	000d62fe 	.word	0x000d62fe
   d41e8:	000d4125 	.word	0x000d4125
   d41ec:	000d631b 	.word	0x000d631b
   d41f0:	2003e540 	.word	0x2003e540
   d41f4:	000d40b9 	.word	0x000d40b9
   d41f8:	000d632a 	.word	0x000d632a

000d41fc <loop>:

void ProcessNodes(const char *, const char *);
void ProcessNodeID(const char *, const char *);

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
   d4200:	4c38      	ldr	r4, [pc, #224]	; (d42e4 <loop+0xe8>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4202:	f000 f919 	bl	d4438 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastTime >= TIME_INTERVAL){
    lastTime = millis();
    heartbeat = 1;
  }
*/
  if(timeElapsed > TIME_INTERVAL)
   d4206:	6823      	ldr	r3, [r4, #0]
   d4208:	1ac0      	subs	r0, r0, r3
   d420a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d420e:	d905      	bls.n	d421c <loop+0x20>
  {
     heartbeat = 1;
   d4210:	4b35      	ldr	r3, [pc, #212]	; (d42e8 <loop+0xec>)
   d4212:	2201      	movs	r2, #1
   d4214:	701a      	strb	r2, [r3, #0]
   d4216:	f000 f90f 	bl	d4438 <HAL_Timer_Get_Milli_Seconds>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
   d421a:	6020      	str	r0, [r4, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
   d421c:	4d33      	ldr	r5, [pc, #204]	; (d42ec <loop+0xf0>)
   d421e:	4c34      	ldr	r4, [pc, #208]	; (d42f0 <loop+0xf4>)
   d4220:	f000 f90a 	bl	d4438 <HAL_Timer_Get_Milli_Seconds>
     timeElapsed = 0;
  }
  
  if(timeElapsed2 > TIME_INTERVAL2)
   d4224:	682b      	ldr	r3, [r5, #0]
   d4226:	1ac0      	subs	r0, r0, r3
   d4228:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d422c:	d904      	bls.n	d4238 <loop+0x3c>
  {
     heartbeat2 = 1;
   d422e:	2301      	movs	r3, #1
   d4230:	7023      	strb	r3, [r4, #0]
   d4232:	f000 f901 	bl	d4438 <HAL_Timer_Get_Milli_Seconds>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
   d4236:	6028      	str	r0, [r5, #0]
     timeElapsed2 = 0;
  }



  if(heartbeat2 && heartbeat_blocking2){
   d4238:	7823      	ldrb	r3, [r4, #0]
   d423a:	2b00      	cmp	r3, #0
   d423c:	d03c      	beq.n	d42b8 <loop+0xbc>
   d423e:	4d2d      	ldr	r5, [pc, #180]	; (d42f4 <loop+0xf8>)
   d4240:	782b      	ldrb	r3, [r5, #0]
   d4242:	2b00      	cmp	r3, #0
   d4244:	d038      	beq.n	d42b8 <loop+0xbc>
    
    int8_t i;

    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
   d4246:	4b2c      	ldr	r3, [pc, #176]	; (d42f8 <loop+0xfc>)
    heartbeat_blocking2 = 1;
    heartbeat2 = 0;
    Serial.printlnf("GATEWAY: Sending <<<GET NODE>>> request");
    Mesh.publish("GET_Nodes");

    for(i = 0; i<= gNodeCount; i++){
   d4248:	f8df 80d0 	ldr.w	r8, [pc, #208]	; d431c <loop+0x120>
  if(heartbeat2 && heartbeat_blocking2){
    
    int8_t i;

    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
   d424c:	7819      	ldrb	r1, [r3, #0]

  if(heartbeat2 && heartbeat_blocking2){
    
    int8_t i;

    heartbeat_blocking2 = 0;
   d424e:	2400      	movs	r4, #0
    gLedstate2 = !gLedstate2;   
   d4250:	f081 0101 	eor.w	r1, r1, #1
    digitalWrite(MESH_STATS_LED,gLedstate2);
   d4254:	2006      	movs	r0, #6
  if(heartbeat2 && heartbeat_blocking2){
    
    int8_t i;

    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
   d4256:	7019      	strb	r1, [r3, #0]

  if(heartbeat2 && heartbeat_blocking2){
    
    int8_t i;

    heartbeat_blocking2 = 0;
   d4258:	702c      	strb	r4, [r5, #0]
    gLedstate2 = !gLedstate2;   
    digitalWrite(MESH_STATS_LED,gLedstate2);
   d425a:	f001 fddc 	bl	d5e16 <digitalWrite>
    heartbeat_blocking2 = 1;
    heartbeat2 = 0;
   d425e:	4b24      	ldr	r3, [pc, #144]	; (d42f0 <loop+0xf4>)
    int8_t i;

    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
    digitalWrite(MESH_STATS_LED,gLedstate2);
    heartbeat_blocking2 = 1;
   d4260:	2601      	movs	r6, #1
    heartbeat2 = 0;
   d4262:	701c      	strb	r4, [r3, #0]
    int8_t i;

    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
    digitalWrite(MESH_STATS_LED,gLedstate2);
    heartbeat_blocking2 = 1;
   d4264:	702e      	strb	r6, [r5, #0]
    heartbeat2 = 0;
    Serial.printlnf("GATEWAY: Sending <<<GET NODE>>> request");
   d4266:	f001 f8cd 	bl	d5404 <_Z16_fetch_usbserialv>
   d426a:	4631      	mov	r1, r6
   d426c:	4a23      	ldr	r2, [pc, #140]	; (d42fc <loop+0x100>)
    Mesh.publish("GET_Nodes");

    for(i = 0; i<= gNodeCount; i++){
      if(strcmp(gNodeID[i],"") == 0){
   d426e:	4e24      	ldr	r6, [pc, #144]	; (d4300 <loop+0x104>)
   d4270:	f000 ff1d 	bl	d50ae <_ZN5Print11printf_implEbPKcz>
    gLedstate2 = !gLedstate2;   
    digitalWrite(MESH_STATS_LED,gLedstate2);
    heartbeat_blocking2 = 1;
    heartbeat2 = 0;
    Serial.printlnf("GATEWAY: Sending <<<GET NODE>>> request");
    Mesh.publish("GET_Nodes");
   d4274:	4622      	mov	r2, r4
   d4276:	4923      	ldr	r1, [pc, #140]	; (d4304 <loop+0x108>)
   d4278:	4823      	ldr	r0, [pc, #140]	; (d4308 <loop+0x10c>)
   d427a:	f001 fba1 	bl	d59c0 <_ZN5spark11MeshPublish7publishEPKcS2_>

    for(i = 0; i<= gNodeCount; i++){
   d427e:	f898 3000 	ldrb.w	r3, [r8]
   d4282:	b265      	sxtb	r5, r4
   d4284:	429d      	cmp	r5, r3
   d4286:	dc17      	bgt.n	d42b8 <loop+0xbc>
      if(strcmp(gNodeID[i],"") == 0){
   d4288:	f816 3025 	ldrb.w	r3, [r6, r5, lsl #2]
   d428c:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   d4290:	3401      	adds	r4, #1
   d4292:	b943      	cbnz	r3, d42a6 <loop+0xaa>
        Serial.printlnf("Empty Node list!!!");
   d4294:	f001 f8b6 	bl	d5404 <_Z16_fetch_usbserialv>
   d4298:	4a1c      	ldr	r2, [pc, #112]	; (d430c <loop+0x110>)
   d429a:	2101      	movs	r1, #1
    heartbeat_blocking = 1;
    heartbeat = 0;
    
  }

}
   d429c:	b002      	add	sp, #8
   d429e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d42a2:	f000 bf04 	b.w	d50ae <_ZN5Print11printf_implEbPKcz>
    for(i = 0; i<= gNodeCount; i++){
      if(strcmp(gNodeID[i],"") == 0){
        Serial.printlnf("Empty Node list!!!");
        return;
      }
      Serial.printlnf("NODE: %d, ID: %s",i,gNodeID[i]);
   d42a6:	f001 f8ad 	bl	d5404 <_Z16_fetch_usbserialv>
   d42aa:	9700      	str	r7, [sp, #0]
   d42ac:	462b      	mov	r3, r5
   d42ae:	4a18      	ldr	r2, [pc, #96]	; (d4310 <loop+0x114>)
   d42b0:	2101      	movs	r1, #1
   d42b2:	f000 fefc 	bl	d50ae <_ZN5Print11printf_implEbPKcz>
    heartbeat_blocking2 = 1;
    heartbeat2 = 0;
    Serial.printlnf("GATEWAY: Sending <<<GET NODE>>> request");
    Mesh.publish("GET_Nodes");

    for(i = 0; i<= gNodeCount; i++){
   d42b6:	e7e2      	b.n	d427e <loop+0x82>
      }
      Serial.printlnf("NODE: %d, ID: %s",i,gNodeID[i]);
    }  

  }  
    if(heartbeat && heartbeat_blocking){
   d42b8:	4d0b      	ldr	r5, [pc, #44]	; (d42e8 <loop+0xec>)
   d42ba:	782b      	ldrb	r3, [r5, #0]
   d42bc:	b17b      	cbz	r3, d42de <loop+0xe2>
   d42be:	4c15      	ldr	r4, [pc, #84]	; (d4314 <loop+0x118>)
   d42c0:	7823      	ldrb	r3, [r4, #0]
   d42c2:	b163      	cbz	r3, d42de <loop+0xe2>
    heartbeat_blocking = 0;
    gLedstate = !gLedstate;
   d42c4:	4b14      	ldr	r3, [pc, #80]	; (d4318 <loop+0x11c>)
   d42c6:	7819      	ldrb	r1, [r3, #0]
      Serial.printlnf("NODE: %d, ID: %s",i,gNodeID[i]);
    }  

  }  
    if(heartbeat && heartbeat_blocking){
    heartbeat_blocking = 0;
   d42c8:	2600      	movs	r6, #0
    gLedstate = !gLedstate;
   d42ca:	f081 0101 	eor.w	r1, r1, #1
    digitalWrite(HB_LED,gLedstate);    
   d42ce:	2007      	movs	r0, #7
    }  

  }  
    if(heartbeat && heartbeat_blocking){
    heartbeat_blocking = 0;
    gLedstate = !gLedstate;
   d42d0:	7019      	strb	r1, [r3, #0]
      Serial.printlnf("NODE: %d, ID: %s",i,gNodeID[i]);
    }  

  }  
    if(heartbeat && heartbeat_blocking){
    heartbeat_blocking = 0;
   d42d2:	7026      	strb	r6, [r4, #0]
    gLedstate = !gLedstate;
    digitalWrite(HB_LED,gLedstate);    
   d42d4:	f001 fd9f 	bl	d5e16 <digitalWrite>
    heartbeat_blocking = 1;
   d42d8:	2301      	movs	r3, #1
   d42da:	7023      	strb	r3, [r4, #0]
    heartbeat = 0;
   d42dc:	702e      	strb	r6, [r5, #0]
    
  }

}
   d42de:	b002      	add	sp, #8
   d42e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d42e4:	2003e36c 	.word	0x2003e36c
   d42e8:	2003e361 	.word	0x2003e361
   d42ec:	2003e364 	.word	0x2003e364
   d42f0:	2003e368 	.word	0x2003e368
   d42f4:	2003e2f1 	.word	0x2003e2f1
   d42f8:	2003e360 	.word	0x2003e360
   d42fc:	000d6331 	.word	0x000d6331
   d4300:	2003e372 	.word	0x2003e372
   d4304:	000d6359 	.word	0x000d6359
   d4308:	2003e540 	.word	0x2003e540
   d430c:	000d6363 	.word	0x000d6363
   d4310:	000d6376 	.word	0x000d6376
   d4314:	2003e2f0 	.word	0x2003e2f0
   d4318:	2003e371 	.word	0x2003e371
   d431c:	2003e370 	.word	0x2003e370

000d4320 <_GLOBAL__sub_I_gNumberofNodes>:
     }   
     

  }

   d4320:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4322:	f000 f821 	bl	d4368 <HAL_Pin_Map>
 * Author:
 * Date:
 */
#include "elapsedMillis.h"

SYSTEM_THREAD(ENABLED);
   d4326:	2100      	movs	r1, #0
   d4328:	2001      	movs	r0, #1
   d432a:	f000 f9fd 	bl	d4728 <system_thread_set_state>
   d432e:	f000 f883 	bl	d4438 <HAL_Timer_Get_Milli_Seconds>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
   d4332:	4b03      	ldr	r3, [pc, #12]	; (d4340 <_GLOBAL__sub_I_gNumberofNodes+0x20>)
   d4334:	6018      	str	r0, [r3, #0]
   d4336:	f000 f87f 	bl	d4438 <HAL_Timer_Get_Milli_Seconds>
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <_GLOBAL__sub_I_gNumberofNodes+0x24>)
   d433c:	6018      	str	r0, [r3, #0]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	2003e36c 	.word	0x2003e36c
   d4344:	2003e364 	.word	0x2003e364

000d4348 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <netdb_freeaddrinfo+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	689b      	ldr	r3, [r3, #8]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030268 	.word	0x00030268

000d4358 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <netdb_getaddrinfo+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	68db      	ldr	r3, [r3, #12]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030268 	.word	0x00030268

000d4368 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_Pin_Map+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	681b      	ldr	r3, [r3, #0]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	0003022c 	.word	0x0003022c

000d4378 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <HAL_Pin_Mode+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	689b      	ldr	r3, [r3, #8]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003022c 	.word	0x0003022c

000d4388 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_Get_Pin_Mode+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	68db      	ldr	r3, [r3, #12]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003022c 	.word	0x0003022c

000d4398 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_GPIO_Write+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	691b      	ldr	r3, [r3, #16]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003022c 	.word	0x0003022c

000d43a8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_SPI_Init+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	69db      	ldr	r3, [r3, #28]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030230 	.word	0x00030230

000d43b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_SPI_Is_Enabled+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	6a1b      	ldr	r3, [r3, #32]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030230 	.word	0x00030230

000d43c8 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <if_name_to_index+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	691b      	ldr	r3, [r3, #16]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003026c 	.word	0x0003026c

000d43d8 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <if_index_to_name+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	695b      	ldr	r3, [r3, #20]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003026c 	.word	0x0003026c

000d43e8 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <if_get_by_index+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	699b      	ldr	r3, [r3, #24]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003026c 	.word	0x0003026c

000d43f8 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <if_get_addrs+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003026c 	.word	0x0003026c

000d4408 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <if_free_if_addrs+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003026c 	.word	0x0003026c

000d4418 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_RNG_GetRandomNumber+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	685b      	ldr	r3, [r3, #4]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030218 	.word	0x00030218

000d4428 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_Delay_Milliseconds+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	689b      	ldr	r3, [r3, #8]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030218 	.word	0x00030218

000d4438 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	695b      	ldr	r3, [r3, #20]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030218 	.word	0x00030218

000d4448 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <hal_timer_millis+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030218 	.word	0x00030218

000d4458 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <os_thread_create+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	685b      	ldr	r3, [r3, #4]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030248 	.word	0x00030248

000d4468 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <os_thread_is_current+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	689b      	ldr	r3, [r3, #8]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030248 	.word	0x00030248

000d4478 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <os_thread_join+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	691b      	ldr	r3, [r3, #16]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030248 	.word	0x00030248

000d4488 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <os_thread_cleanup+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	695b      	ldr	r3, [r3, #20]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030248 	.word	0x00030248

000d4498 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <os_mutex_create+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030248 	.word	0x00030248

000d44a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <os_mutex_recursive_create+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030248 	.word	0x00030248

000d44b8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <os_mutex_recursive_lock+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030248 	.word	0x00030248

000d44c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <os_mutex_recursive_unlock+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030248 	.word	0x00030248

000d44d8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <os_thread_exit+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030248 	.word	0x00030248

000d44e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <inet_inet_ntop+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	695b      	ldr	r3, [r3, #20]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030264 	.word	0x00030264

000d44f8 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <inet_inet_pton+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	699b      	ldr	r3, [r3, #24]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030264 	.word	0x00030264

000d4508 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <inet_htonl+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6a1b      	ldr	r3, [r3, #32]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030264 	.word	0x00030264

000d4518 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <inet_ntohs+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030264 	.word	0x00030264

000d4528 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <inet_htons+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030264 	.word	0x00030264

000d4538 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_USART_Init+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	681b      	ldr	r3, [r3, #0]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003023c 	.word	0x0003023c

000d4548 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_USART_Write_Data+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	68db      	ldr	r3, [r3, #12]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	0003023c 	.word	0x0003023c

000d4558 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <HAL_USART_Available_Data+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	691b      	ldr	r3, [r3, #16]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	0003023c 	.word	0x0003023c

000d4568 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <HAL_USART_Read_Data+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	695b      	ldr	r3, [r3, #20]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	0003023c 	.word	0x0003023c

000d4578 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <HAL_USART_Peek_Data+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	699b      	ldr	r3, [r3, #24]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	0003023c 	.word	0x0003023c

000d4588 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_USART_Flush_Data+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	69db      	ldr	r3, [r3, #28]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	0003023c 	.word	0x0003023c

000d4598 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <HAL_USART_Is_Enabled+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	6a1b      	ldr	r3, [r3, #32]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	0003023c 	.word	0x0003023c

000d45a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <HAL_USART_Available_Data_For_Write+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	0003023c 	.word	0x0003023c

000d45b8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_I2C_Write_Data+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6a1b      	ldr	r3, [r3, #32]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030228 	.word	0x00030228

000d45c8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <HAL_I2C_Available_Data+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030228 	.word	0x00030228

000d45d8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_I2C_Read_Data+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030228 	.word	0x00030228

000d45e8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_I2C_Peek_Data+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030228 	.word	0x00030228

000d45f8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_I2C_Flush_Data+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030228 	.word	0x00030228

000d4608 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_I2C_Is_Enabled+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030228 	.word	0x00030228

000d4618 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_I2C_Init+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030228 	.word	0x00030228

000d4628 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <sock_bind+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	685b      	ldr	r3, [r3, #4]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030238 	.word	0x00030238

000d4638 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <sock_setsockopt+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	699b      	ldr	r3, [r3, #24]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030238 	.word	0x00030238

000d4648 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <sock_close+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	69db      	ldr	r3, [r3, #28]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030238 	.word	0x00030238

000d4658 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <sock_recvfrom+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030238 	.word	0x00030238

000d4668 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <sock_sendto+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030238 	.word	0x00030238

000d4678 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <sock_socket+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030238 	.word	0x00030238

000d4688 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <HAL_USB_USART_Init+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	681b      	ldr	r3, [r3, #0]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	0003024c 	.word	0x0003024c

000d4698 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <HAL_USB_USART_Begin+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	685b      	ldr	r3, [r3, #4]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	0003024c 	.word	0x0003024c

000d46a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <HAL_USB_USART_Available_Data+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	691b      	ldr	r3, [r3, #16]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	0003024c 	.word	0x0003024c

000d46b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	695b      	ldr	r3, [r3, #20]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003024c 	.word	0x0003024c

000d46c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <HAL_USB_USART_Receive_Data+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	699b      	ldr	r3, [r3, #24]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003024c 	.word	0x0003024c

000d46d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <HAL_USB_USART_Send_Data+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	69db      	ldr	r3, [r3, #28]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003024c 	.word	0x0003024c

000d46e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <HAL_USB_USART_Flush_Data+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6a1b      	ldr	r3, [r3, #32]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003024c 	.word	0x0003024c

000d46f8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <HAL_USB_USART_Is_Connected+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003024c 	.word	0x0003024c

000d4708 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <log_message+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030260 	.word	0x00030260

000d4718 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <set_system_mode+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	685b      	ldr	r3, [r3, #4]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030220 	.word	0x00030220

000d4728 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <system_thread_set_state+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030220 	.word	0x00030220

000d4738 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b03      	ldr	r3, [pc, #12]	; (d4748 <system_ctrl_set_app_request_handler+0x10>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4742:	9301      	str	r3, [sp, #4]
   d4744:	bd08      	pop	{r3, pc}
   d4746:	0000      	.short	0x0000
   d4748:	00030220 	.word	0x00030220

000d474c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b03      	ldr	r3, [pc, #12]	; (d475c <system_ctrl_set_result+0x10>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4756:	9301      	str	r3, [sp, #4]
   d4758:	bd08      	pop	{r3, pc}
   d475a:	0000      	.short	0x0000
   d475c:	00030220 	.word	0x00030220

000d4760 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b03      	ldr	r3, [pc, #12]	; (d4770 <system_invoke_event_handler+0x10>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d476a:	9301      	str	r3, [sp, #4]
   d476c:	bd08      	pop	{r3, pc}
   d476e:	0000      	.short	0x0000
   d4770:	00030220 	.word	0x00030220

000d4774 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <network_connect+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	685b      	ldr	r3, [r3, #4]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030240 	.word	0x00030240

000d4784 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <network_connecting+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	689b      	ldr	r3, [r3, #8]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030240 	.word	0x00030240

000d4794 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <network_disconnect+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	68db      	ldr	r3, [r3, #12]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030240 	.word	0x00030240

000d47a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <network_ready+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	691b      	ldr	r3, [r3, #16]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030240 	.word	0x00030240

000d47b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <network_on+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	695b      	ldr	r3, [r3, #20]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030240 	.word	0x00030240

000d47c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <network_off+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	699b      	ldr	r3, [r3, #24]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030240 	.word	0x00030240

000d47d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <network_listen+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	69db      	ldr	r3, [r3, #28]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	00030240 	.word	0x00030240

000d47e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <network_listening+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	6a1b      	ldr	r3, [r3, #32]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030240 	.word	0x00030240

000d47f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <network_set_listen_timeout+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	00030240 	.word	0x00030240

000d4804 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <network_get_listen_timeout+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	00030240 	.word	0x00030240

000d4814 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <spark_process+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	689b      	ldr	r3, [r3, #8]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	00030244 	.word	0x00030244

000d4824 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	00030244 	.word	0x00030244

000d4834 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <malloc+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	681b      	ldr	r3, [r3, #0]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003021c 	.word	0x0003021c

000d4844 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <free+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	685b      	ldr	r3, [r3, #4]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	0003021c 	.word	0x0003021c

000d4854 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <vsnprintf+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	0003021c 	.word	0x0003021c

000d4864 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <abort+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	0003021c 	.word	0x0003021c

000d4874 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4874:	2200      	movs	r2, #0
   d4876:	4611      	mov	r1, r2
   d4878:	6840      	ldr	r0, [r0, #4]
   d487a:	f7ff bfb3 	b.w	d47e4 <network_listening>

000d487e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d487e:	2200      	movs	r2, #0
   d4880:	4611      	mov	r1, r2
   d4882:	6840      	ldr	r0, [r0, #4]
   d4884:	f7ff bfbe 	b.w	d4804 <network_get_listen_timeout>

000d4888 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4888:	2200      	movs	r2, #0
   d488a:	6840      	ldr	r0, [r0, #4]
   d488c:	f7ff bfb2 	b.w	d47f4 <network_set_listen_timeout>

000d4890 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4890:	2200      	movs	r2, #0
   d4892:	f081 0101 	eor.w	r1, r1, #1
   d4896:	6840      	ldr	r0, [r0, #4]
   d4898:	f7ff bf9c 	b.w	d47d4 <network_listen>

000d489c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d489c:	2300      	movs	r3, #0
   d489e:	461a      	mov	r2, r3
   d48a0:	4619      	mov	r1, r3
   d48a2:	6840      	ldr	r0, [r0, #4]
   d48a4:	f7ff bf8e 	b.w	d47c4 <network_off>

000d48a8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48a8:	2300      	movs	r3, #0
   d48aa:	461a      	mov	r2, r3
   d48ac:	4619      	mov	r1, r3
   d48ae:	6840      	ldr	r0, [r0, #4]
   d48b0:	f7ff bf80 	b.w	d47b4 <network_on>

000d48b4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48b4:	2200      	movs	r2, #0
   d48b6:	4611      	mov	r1, r2
   d48b8:	6840      	ldr	r0, [r0, #4]
   d48ba:	f7ff bf73 	b.w	d47a4 <network_ready>

000d48be <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48be:	2200      	movs	r2, #0
   d48c0:	4611      	mov	r1, r2
   d48c2:	6840      	ldr	r0, [r0, #4]
   d48c4:	f7ff bf5e 	b.w	d4784 <network_connecting>

000d48c8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48c8:	2200      	movs	r2, #0
   d48ca:	2102      	movs	r1, #2
   d48cc:	6840      	ldr	r0, [r0, #4]
   d48ce:	f7ff bf61 	b.w	d4794 <network_disconnect>

000d48d2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48d2:	2300      	movs	r3, #0
   d48d4:	461a      	mov	r2, r3
   d48d6:	6840      	ldr	r0, [r0, #4]
   d48d8:	f7ff bf4c 	b.w	d4774 <network_connect>

000d48dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d48dc:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d48de:	2203      	movs	r2, #3
   d48e0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d48e2:	4a02      	ldr	r2, [pc, #8]	; (d48ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d48e4:	601a      	str	r2, [r3, #0]
   d48e6:	4770      	bx	lr
   d48e8:	2003e37c 	.word	0x2003e37c
   d48ec:	000d63a8 	.word	0x000d63a8

000d48f0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d48f0:	4770      	bx	lr

000d48f2 <_ZN8SPIClassD0Ev>:
   d48f2:	b510      	push	{r4, lr}
   d48f4:	4604      	mov	r4, r0
   d48f6:	f7ff fbd2 	bl	d409e <_ZdlPv>
   d48fa:	4620      	mov	r0, r4
   d48fc:	bd10      	pop	{r4, pc}
	...

000d4900 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4900:	b570      	push	{r4, r5, r6, lr}
   d4902:	4b08      	ldr	r3, [pc, #32]	; (d4924 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4904:	6003      	str	r3, [r0, #0]
   d4906:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4908:	2500      	movs	r5, #0
   d490a:	460e      	mov	r6, r1
   d490c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4910:	f7ff fdc2 	bl	d4498 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4914:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4916:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4918:	f7ff fd46 	bl	d43a8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d491c:	60a5      	str	r5, [r4, #8]
}
   d491e:	4620      	mov	r0, r4
   d4920:	bd70      	pop	{r4, r5, r6, pc}
   d4922:	bf00      	nop
   d4924:	000d63dc 	.word	0x000d63dc

000d4928 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4928:	7900      	ldrb	r0, [r0, #4]
   d492a:	f7ff bd45 	b.w	d43b8 <HAL_SPI_Is_Enabled>
	...

000d4930 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4930:	4b04      	ldr	r3, [pc, #16]	; (d4944 <_GLOBAL__sub_I_System+0x14>)
   d4932:	2000      	movs	r0, #0
   d4934:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4938:	7018      	strb	r0, [r3, #0]
   d493a:	8058      	strh	r0, [r3, #2]
   d493c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d493e:	f7ff beeb 	b.w	d4718 <set_system_mode>
   d4942:	bf00      	nop
   d4944:	2003e384 	.word	0x2003e384

000d4948 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4948:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d494a:	6804      	ldr	r4, [r0, #0]
   d494c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d494e:	46a4      	mov	ip, r4
    }
   d4950:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4954:	4760      	bx	ip

000d4956 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4956:	6803      	ldr	r3, [r0, #0]
   d4958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d495a:	4718      	bx	r3

000d495c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d495c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d495e:	4770      	bx	lr

000d4960 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4960:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4962:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4964:	1a10      	subs	r0, r2, r0
   d4966:	4770      	bx	lr

000d4968 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4968:	b513      	push	{r0, r1, r4, lr}
   d496a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d496c:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d496e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4972:	68d4      	ldr	r4, [r2, #12]
   d4974:	4619      	mov	r1, r3
   d4976:	2201      	movs	r2, #1
   d4978:	47a0      	blx	r4
}
   d497a:	b002      	add	sp, #8
   d497c:	bd10      	pop	{r4, pc}

000d497e <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d497e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4980:	6803      	ldr	r3, [r0, #0]
   d4982:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4984:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4986:	4798      	blx	r3
   d4988:	b128      	cbz	r0, d4996 <_ZN3UDP4readEv+0x18>
   d498a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d498c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d498e:	1c59      	adds	r1, r3, #1
   d4990:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4992:	5cd0      	ldrb	r0, [r2, r3]
   d4994:	bd10      	pop	{r4, pc}
   d4996:	f04f 30ff 	mov.w	r0, #4294967295
}
   d499a:	bd10      	pop	{r4, pc}

000d499c <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d499c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d499e:	6803      	ldr	r3, [r0, #0]
   d49a0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d49a2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d49a4:	4798      	blx	r3
   d49a6:	b118      	cbz	r0, d49b0 <_ZN3UDP4peekEv+0x14>
   d49a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d49aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d49ac:	5cd0      	ldrb	r0, [r2, r3]
   d49ae:	bd10      	pop	{r4, pc}
   d49b0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d49b4:	bd10      	pop	{r4, pc}

000d49b6 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d49b6:	4770      	bx	lr

000d49b8 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d49b8:	b410      	push	{r4}
   d49ba:	4603      	mov	r3, r0
   d49bc:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d49be:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d49c0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d49c2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d49c4:	6803      	ldr	r3, [r0, #0]
   d49c6:	1a52      	subs	r2, r2, r1
   d49c8:	68db      	ldr	r3, [r3, #12]
   d49ca:	4421      	add	r1, r4
}
   d49cc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d49d0:	4718      	bx	r3

000d49d2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d49d2:	f1a0 0010 	sub.w	r0, r0, #16
   d49d6:	f7ff bfef 	b.w	d49b8 <_ZNK3UDP7printToER5Print>

000d49da <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d49da:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d49dc:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d49de:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d49e0:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d49e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d49e4:	4604      	mov	r4, r0
   d49e6:	460f      	mov	r7, r1
   d49e8:	4615      	mov	r5, r2
    stop();
   d49ea:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d49ec:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d49ee:	4632      	mov	r2, r6
   d49f0:	2100      	movs	r1, #0
   d49f2:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d49f4:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d49f6:	f001 fbfb 	bl	d61f0 <memset>
    saddr.sin6_len = sizeof(saddr);
   d49fa:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d49fe:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4a00:	260a      	movs	r6, #10
   d4a02:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d4a06:	f7ff fd8f 	bl	d4528 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4a0a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4a0c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4a10:	2102      	movs	r1, #2
   d4a12:	4630      	mov	r0, r6
   d4a14:	f7ff fe30 	bl	d4678 <sock_socket>

    if (_sock < 0) {
   d4a18:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4a1a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d4a1c:	db24      	blt.n	d4a68 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4a1e:	2204      	movs	r2, #4
   d4a20:	9200      	str	r2, [sp, #0]
   d4a22:	ab02      	add	r3, sp, #8
   d4a24:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4a28:	f7ff fe06 	bl	d4638 <sock_setsockopt>
   d4a2c:	b9e0      	cbnz	r0, d4a68 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d4a2e:	b195      	cbz	r5, d4a56 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d4a30:	9003      	str	r0, [sp, #12]
   d4a32:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d4a36:	a903      	add	r1, sp, #12
   d4a38:	b2e8      	uxtb	r0, r5
   d4a3a:	f7ff fccd 	bl	d43d8 <if_index_to_name>
   d4a3e:	b998      	cbnz	r0, d4a68 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4a40:	2306      	movs	r3, #6
   d4a42:	9300      	str	r3, [sp, #0]
   d4a44:	f241 020b 	movw	r2, #4107	; 0x100b
   d4a48:	ab03      	add	r3, sp, #12
   d4a4a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4a4e:	6960      	ldr	r0, [r4, #20]
   d4a50:	f7ff fdf2 	bl	d4638 <sock_setsockopt>
   d4a54:	b940      	cbnz	r0, d4a68 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d4a56:	221c      	movs	r2, #28
   d4a58:	a905      	add	r1, sp, #20
   d4a5a:	6960      	ldr	r0, [r4, #20]
   d4a5c:	f7ff fde4 	bl	d4628 <sock_bind>
   d4a60:	b910      	cbnz	r0, d4a68 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d4a62:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d4a64:	2001      	movs	r0, #1
   d4a66:	e004      	b.n	d4a72 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d4a68:	6823      	ldr	r3, [r4, #0]
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a6e:	4798      	blx	r3
   d4a70:	2000      	movs	r0, #0
    }
    return bound;
}
   d4a72:	b00d      	add	sp, #52	; 0x34
   d4a74:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a76 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d4a76:	b510      	push	{r4, lr}
   d4a78:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d4a7a:	6940      	ldr	r0, [r0, #20]
   d4a7c:	2800      	cmp	r0, #0
   d4a7e:	db01      	blt.n	d4a84 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d4a80:	f7ff fde2 	bl	d4648 <sock_close>
    }

    _sock = -1;
   d4a84:	f04f 33ff 	mov.w	r3, #4294967295
   d4a88:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4a8a:	2300      	movs	r3, #0
   d4a8c:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4a8e:	8723      	strh	r3, [r4, #56]	; 0x38
   d4a90:	bd10      	pop	{r4, pc}

000d4a92 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4a92:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4a94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4a96:	4605      	mov	r5, r0
   d4a98:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4a9a:	b113      	cbz	r3, d4aa2 <_ZN3UDP5writeEPKhj+0x10>
   d4a9c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d4a9e:	1a24      	subs	r4, r4, r0
   d4aa0:	e000      	b.n	d4aa4 <_ZN3UDP5writeEPKhj+0x12>
   d4aa2:	461c      	mov	r4, r3
   d4aa4:	4294      	cmp	r4, r2
   d4aa6:	bf28      	it	cs
   d4aa8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d4aaa:	4622      	mov	r2, r4
   d4aac:	4418      	add	r0, r3
   d4aae:	f001 fb94 	bl	d61da <memcpy>
    _offset += size;
   d4ab2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d4ab4:	4423      	add	r3, r4
   d4ab6:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d4ab8:	4620      	mov	r0, r4
   d4aba:	bd38      	pop	{r3, r4, r5, pc}

000d4abc <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4abc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d4abe:	6803      	ldr	r3, [r0, #0]
   d4ac0:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4ac2:	4604      	mov	r4, r0
   d4ac4:	460e      	mov	r6, r1
   d4ac6:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d4ac8:	4798      	blx	r3
   d4aca:	b188      	cbz	r0, d4af0 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d4acc:	6823      	ldr	r3, [r4, #0]
   d4ace:	4620      	mov	r0, r4
   d4ad0:	691b      	ldr	r3, [r3, #16]
   d4ad2:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d4ad4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4ad6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4ad8:	4285      	cmp	r5, r0
   d4ada:	bfa8      	it	ge
   d4adc:	4605      	movge	r5, r0
   d4ade:	4419      	add	r1, r3
   d4ae0:	462a      	mov	r2, r5
   d4ae2:	4630      	mov	r0, r6
   d4ae4:	f001 fb79 	bl	d61da <memcpy>
        _offset += read;
   d4ae8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4aea:	442b      	add	r3, r5
   d4aec:	86e3      	strh	r3, [r4, #54]	; 0x36
   d4aee:	e001      	b.n	d4af4 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d4af0:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d4af4:	4628      	mov	r0, r5
   d4af6:	bd70      	pop	{r4, r5, r6, pc}

000d4af8 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d4af8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4afa:	4604      	mov	r4, r0
   d4afc:	4b05      	ldr	r3, [pc, #20]	; (d4b14 <_ZN3UDP8remoteIPEv+0x1c>)
   d4afe:	f844 3b04 	str.w	r3, [r4], #4
   d4b02:	f101 0520 	add.w	r5, r1, #32
   d4b06:	4606      	mov	r6, r0
   d4b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b0c:	682b      	ldr	r3, [r5, #0]
   d4b0e:	7023      	strb	r3, [r4, #0]
   d4b10:	4630      	mov	r0, r6
   d4b12:	bd70      	pop	{r4, r5, r6, pc}
   d4b14:	000d6564 	.word	0x000d6564

000d4b18 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b1a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4b1c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4b1e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4b20:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d4b22:	4a0a      	ldr	r2, [pc, #40]	; (d4b4c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d4b24:	9202      	str	r2, [sp, #8]
   d4b26:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4b28:	468e      	mov	lr, r1
   d4b2a:	4606      	mov	r6, r0
   d4b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b2e:	ac03      	add	r4, sp, #12
   d4b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b32:	682b      	ldr	r3, [r5, #0]
   d4b34:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4b36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4b3a:	9300      	str	r3, [sp, #0]
   d4b3c:	4662      	mov	r2, ip
   d4b3e:	ab02      	add	r3, sp, #8
   d4b40:	4671      	mov	r1, lr
   d4b42:	4630      	mov	r0, r6
   d4b44:	47b8      	blx	r7
    }
   d4b46:	b009      	add	sp, #36	; 0x24
   d4b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b4a:	bf00      	nop
   d4b4c:	000d6564 	.word	0x000d6564

000d4b50 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4b52:	6803      	ldr	r3, [r0, #0]
   d4b54:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d4b58:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4b5a:	4b0d      	ldr	r3, [pc, #52]	; (d4b90 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4b5c:	b089      	sub	sp, #36	; 0x24
   d4b5e:	f100 0620 	add.w	r6, r0, #32
   d4b62:	4604      	mov	r4, r0
   d4b64:	9302      	str	r3, [sp, #8]
   d4b66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4b68:	ad03      	add	r5, sp, #12
   d4b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4b6c:	6833      	ldr	r3, [r6, #0]
   d4b6e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4b70:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d4b72:	9300      	str	r3, [sp, #0]
   d4b74:	4672      	mov	r2, lr
   d4b76:	ab02      	add	r3, sp, #8
   d4b78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4b7a:	4620      	mov	r0, r4
   d4b7c:	47b8      	blx	r7
    flush(); // wait for send to complete
   d4b7e:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4b80:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d4b82:	69db      	ldr	r3, [r3, #28]
   d4b84:	4620      	mov	r0, r4
   d4b86:	4798      	blx	r3
    return result;
}
   d4b88:	4628      	mov	r0, r5
   d4b8a:	b009      	add	sp, #36	; 0x24
   d4b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b8e:	bf00      	nop
   d4b90:	000d6564 	.word	0x000d6564

000d4b94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d4b96:	7843      	ldrb	r3, [r0, #1]
   d4b98:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4b9a:	b08d      	sub	sp, #52	; 0x34
   d4b9c:	4605      	mov	r5, r0
   d4b9e:	460c      	mov	r4, r1
   d4ba0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d4ba2:	d101      	bne.n	d4ba8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d4ba4:	1d01      	adds	r1, r0, #4
   d4ba6:	e033      	b.n	d4c10 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d4ba8:	2b0a      	cmp	r3, #10
   d4baa:	d135      	bne.n	d4c18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d4bac:	2211      	movs	r2, #17
   d4bae:	2100      	movs	r1, #0
   d4bb0:	a801      	add	r0, sp, #4
   d4bb2:	f001 fb1d 	bl	d61f0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d4bb6:	68ab      	ldr	r3, [r5, #8]
   d4bb8:	b943      	cbnz	r3, d4bcc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4bba:	68eb      	ldr	r3, [r5, #12]
   d4bbc:	b933      	cbnz	r3, d4bcc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4bbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d4bc2:	692e      	ldr	r6, [r5, #16]
   d4bc4:	f7ff fca0 	bl	d4508 <inet_htonl>
   d4bc8:	4286      	cmp	r6, r0
   d4bca:	d01f      	beq.n	d4c0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4bcc:	f105 0308 	add.w	r3, r5, #8
   d4bd0:	ae01      	add	r6, sp, #4
   d4bd2:	f105 0e18 	add.w	lr, r5, #24
   d4bd6:	6818      	ldr	r0, [r3, #0]
   d4bd8:	6859      	ldr	r1, [r3, #4]
   d4bda:	4632      	mov	r2, r6
   d4bdc:	c203      	stmia	r2!, {r0, r1}
   d4bde:	3308      	adds	r3, #8
   d4be0:	4573      	cmp	r3, lr
   d4be2:	4616      	mov	r6, r2
   d4be4:	d1f7      	bne.n	d4bd6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d4be6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d4be8:	a901      	add	r1, sp, #4
   d4bea:	a806      	add	r0, sp, #24
   d4bec:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d4bee:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d4bf2:	f000 fb79 	bl	d52e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4bf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4bf8:	3404      	adds	r4, #4
   d4bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4bfc:	6833      	ldr	r3, [r6, #0]
   d4bfe:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d4c00:	b157      	cbz	r7, d4c18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d4c02:	8868      	ldrh	r0, [r5, #2]
   d4c04:	f7ff fc88 	bl	d4518 <inet_ntohs>
   d4c08:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d4c0a:	e005      	b.n	d4c18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d4c0c:	f105 0114 	add.w	r1, r5, #20
   d4c10:	4620      	mov	r0, r4
   d4c12:	f000 fb9e 	bl	d5352 <_ZN9IPAddressaSEPKh>
   d4c16:	e7f3      	b.n	d4c00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d4c18:	b00d      	add	sp, #52	; 0x34
   d4c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c1c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c20:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d4c22:	ab0e      	add	r3, sp, #56	; 0x38
   d4c24:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4c26:	4606      	mov	r6, r0
   d4c28:	4617      	mov	r7, r2
   d4c2a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d4c2c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d4c30:	462a      	mov	r2, r5
   d4c32:	4629      	mov	r1, r5
   d4c34:	f7ff fb90 	bl	d4358 <netdb_getaddrinfo>
   d4c38:	2800      	cmp	r0, #0
   d4c3a:	db1f      	blt.n	d4c7c <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d4c3c:	9b01      	ldr	r3, [sp, #4]
   d4c3e:	b1fb      	cbz	r3, d4c80 <_ZN3UDP11beginPacketEPKct+0x64>
   d4c40:	695b      	ldr	r3, [r3, #20]
   d4c42:	b1eb      	cbz	r3, d4c80 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d4c44:	a802      	add	r0, sp, #8
   d4c46:	f000 fb41 	bl	d52cc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d4c4a:	9b01      	ldr	r3, [sp, #4]
   d4c4c:	462a      	mov	r2, r5
   d4c4e:	6958      	ldr	r0, [r3, #20]
   d4c50:	a902      	add	r1, sp, #8
   d4c52:	f7ff ff9f 	bl	d4b94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d4c56:	a802      	add	r0, sp, #8
   d4c58:	f000 fb58 	bl	d530c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d4c5c:	b180      	cbz	r0, d4c80 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d4c5e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4c60:	ad03      	add	r5, sp, #12
   d4c62:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d4c66:	4b0b      	ldr	r3, [pc, #44]	; (d4c94 <_ZN3UDP11beginPacketEPKct+0x78>)
   d4c68:	9308      	str	r3, [sp, #32]
   d4c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c6c:	ac09      	add	r4, sp, #36	; 0x24
   d4c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c70:	682b      	ldr	r3, [r5, #0]
   d4c72:	7023      	strb	r3, [r4, #0]
   d4c74:	463a      	mov	r2, r7
   d4c76:	a908      	add	r1, sp, #32
   d4c78:	4630      	mov	r0, r6
   d4c7a:	47c0      	blx	r8
   d4c7c:	4604      	mov	r4, r0
   d4c7e:	e001      	b.n	d4c84 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d4c80:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d4c84:	9801      	ldr	r0, [sp, #4]
   d4c86:	f7ff fb5f 	bl	d4348 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d4c8a:	4620      	mov	r0, r4
   d4c8c:	b00e      	add	sp, #56	; 0x38
   d4c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c92:	bf00      	nop
   d4c94:	000d6564 	.word	0x000d6564

000d4c98 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4c9c:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d4ca0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4ca4:	b08c      	sub	sp, #48	; 0x30
   d4ca6:	4605      	mov	r5, r0
   d4ca8:	460c      	mov	r4, r1
   d4caa:	4617      	mov	r7, r2
   d4cac:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4cae:	db00      	blt.n	d4cb2 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d4cb0:	b911      	cbnz	r1, d4cb8 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d4cb2:	f04f 30ff 	mov.w	r0, #4294967295
   d4cb6:	e035      	b.n	d4d24 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d4cb8:	f04f 0a1c 	mov.w	sl, #28
   d4cbc:	ae05      	add	r6, sp, #20
   d4cbe:	4652      	mov	r2, sl
   d4cc0:	2100      	movs	r1, #0
   d4cc2:	4630      	mov	r0, r6
   d4cc4:	f001 fa94 	bl	d61f0 <memset>
        socklen_t slen = sizeof(saddr);
   d4cc8:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d4ccc:	f1b9 0f00 	cmp.w	r9, #0
   d4cd0:	d014      	beq.n	d4cfc <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d4cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4cd6:	fbb9 f1f2 	udiv	r1, r9, r2
   d4cda:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d4cdc:	fb02 9111 	mls	r1, r2, r1, r9
   d4ce0:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4ce2:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d4ce4:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4ce6:	9300      	str	r3, [sp, #0]
   d4ce8:	f241 0206 	movw	r2, #4102	; 0x1006
   d4cec:	ab03      	add	r3, sp, #12
   d4cee:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4cf2:	4640      	mov	r0, r8
   d4cf4:	f7ff fca0 	bl	d4638 <sock_setsockopt>
            if (ret) {
   d4cf8:	b108      	cbz	r0, d4cfe <_ZN3UDP13receivePacketEPhjm+0x66>
   d4cfa:	e013      	b.n	d4d24 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d4cfc:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4cfe:	ab02      	add	r3, sp, #8
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	4621      	mov	r1, r4
   d4d04:	4603      	mov	r3, r0
   d4d06:	9600      	str	r6, [sp, #0]
   d4d08:	463a      	mov	r2, r7
   d4d0a:	6968      	ldr	r0, [r5, #20]
   d4d0c:	f7ff fca4 	bl	d4658 <sock_recvfrom>
        if (ret >= 0) {
   d4d10:	1e04      	subs	r4, r0, #0
   d4d12:	db06      	blt.n	d4d22 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d4d14:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d4d18:	f105 011c 	add.w	r1, r5, #28
   d4d1c:	4630      	mov	r0, r6
   d4d1e:	f7ff ff39 	bl	d4b94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4d22:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d4d24:	b00c      	add	sp, #48	; 0x30
   d4d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4d2a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4d2a:	b538      	push	{r3, r4, r5, lr}
   d4d2c:	4605      	mov	r5, r0
   d4d2e:	4614      	mov	r4, r2
   d4d30:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d4d32:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4d34:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d4d36:	d111      	bne.n	d4d5c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d4d38:	231c      	movs	r3, #28
   d4d3a:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d4d3c:	230a      	movs	r3, #10
   d4d3e:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d4d40:	f7ff fbf2 	bl	d4528 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4d44:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d4d46:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4d4a:	1d2b      	adds	r3, r5, #4
   d4d4c:	3514      	adds	r5, #20
   d4d4e:	f853 2b04 	ldr.w	r2, [r3], #4
   d4d52:	f844 2b04 	str.w	r2, [r4], #4
   d4d56:	42ab      	cmp	r3, r5
   d4d58:	d1f9      	bne.n	d4d4e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d4d5a:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d4d5c:	2b04      	cmp	r3, #4
   d4d5e:	d10a      	bne.n	d4d76 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d4d60:	2310      	movs	r3, #16
   d4d62:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d4d64:	2302      	movs	r3, #2
   d4d66:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d4d68:	f7ff fbde 	bl	d4528 <inet_htons>
   d4d6c:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d4d6e:	6868      	ldr	r0, [r5, #4]
   d4d70:	f7ff fbca 	bl	d4508 <inet_htonl>
   d4d74:	6060      	str	r0, [r4, #4]
   d4d76:	bd38      	pop	{r3, r4, r5, pc}

000d4d78 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d7c:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4d7e:	ac03      	add	r4, sp, #12
   d4d80:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4d82:	4699      	mov	r9, r3
   d4d84:	4606      	mov	r6, r0
   d4d86:	460f      	mov	r7, r1
   d4d88:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4d8a:	2100      	movs	r1, #0
   d4d8c:	462a      	mov	r2, r5
   d4d8e:	4620      	mov	r0, r4
   d4d90:	f001 fa2e 	bl	d61f0 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d4d94:	4622      	mov	r2, r4
   d4d96:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d4d9a:	4648      	mov	r0, r9
   d4d9c:	f7ff ffc5 	bl	d4d2a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d4da0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4da4:	b143      	cbz	r3, d4db8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d4da6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d4daa:	2300      	movs	r3, #0
   d4dac:	4642      	mov	r2, r8
   d4dae:	4639      	mov	r1, r7
   d4db0:	6970      	ldr	r0, [r6, #20]
   d4db2:	f7ff fc59 	bl	d4668 <sock_sendto>
   d4db6:	e001      	b.n	d4dbc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d4db8:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d4dbc:	b00b      	add	sp, #44	; 0x2c
   d4dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4dc2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4dc4:	b091      	sub	sp, #68	; 0x44
   d4dc6:	460c      	mov	r4, r1
   d4dc8:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d4dca:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4dcc:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d4dce:	a809      	add	r0, sp, #36	; 0x24
   d4dd0:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4dd2:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d4dd4:	f001 fa0c 	bl	d61f0 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d4dd8:	aa09      	add	r2, sp, #36	; 0x24
   d4dda:	2100      	movs	r1, #0
   d4ddc:	4620      	mov	r0, r4
   d4dde:	f7ff ffa4 	bl	d4d2a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d4de2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4de6:	2b02      	cmp	r3, #2
   d4de8:	d12e      	bne.n	d4e48 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d4dea:	2300      	movs	r3, #0
   d4dec:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d4dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4df0:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d4df2:	b1dd      	cbz	r5, d4e2c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d4df4:	a902      	add	r1, sp, #8
   d4df6:	4628      	mov	r0, r5
   d4df8:	f7ff faf6 	bl	d43e8 <if_get_by_index>
   d4dfc:	b9b0      	cbnz	r0, d4e2c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d4dfe:	a910      	add	r1, sp, #64	; 0x40
   d4e00:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d4e04:	9802      	ldr	r0, [sp, #8]
   d4e06:	f7ff faf7 	bl	d43f8 <if_get_addrs>
   d4e0a:	b960      	cbnz	r0, d4e26 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d4e0c:	9b03      	ldr	r3, [sp, #12]
   d4e0e:	b153      	cbz	r3, d4e26 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d4e10:	68da      	ldr	r2, [r3, #12]
   d4e12:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d4e14:	7851      	ldrb	r1, [r2, #1]
   d4e16:	2902      	cmp	r1, #2
   d4e18:	d103      	bne.n	d4e22 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d4e1a:	6852      	ldr	r2, [r2, #4]
   d4e1c:	b10a      	cbz	r2, d4e22 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d4e1e:	9205      	str	r2, [sp, #20]
   d4e20:	e001      	b.n	d4e26 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d4e22:	681b      	ldr	r3, [r3, #0]
   d4e24:	e7f3      	b.n	d4e0e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d4e26:	9803      	ldr	r0, [sp, #12]
   d4e28:	f7ff faee 	bl	d4408 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d4e2c:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d4e2e:	f04f 0308 	mov.w	r3, #8
   d4e32:	9300      	str	r3, [sp, #0]
   d4e34:	bf18      	it	ne
   d4e36:	2203      	movne	r2, #3
   d4e38:	ab04      	add	r3, sp, #16
   d4e3a:	bf08      	it	eq
   d4e3c:	2204      	moveq	r2, #4
   d4e3e:	2100      	movs	r1, #0
   d4e40:	4630      	mov	r0, r6
   d4e42:	f7ff fbf9 	bl	d4638 <sock_setsockopt>
   d4e46:	e01e      	b.n	d4e86 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d4e48:	2b0a      	cmp	r3, #10
   d4e4a:	d11a      	bne.n	d4e82 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d4e4c:	ac04      	add	r4, sp, #16
   d4e4e:	2214      	movs	r2, #20
   d4e50:	2100      	movs	r1, #0
   d4e52:	4620      	mov	r0, r4
   d4e54:	f001 f9cc 	bl	d61f0 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d4e58:	ab0b      	add	r3, sp, #44	; 0x2c
   d4e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4e5c:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d4e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4e62:	f04f 0314 	mov.w	r3, #20
   d4e66:	9300      	str	r3, [sp, #0]
   d4e68:	bf18      	it	ne
   d4e6a:	220c      	movne	r2, #12
   d4e6c:	4623      	mov	r3, r4
   d4e6e:	bf08      	it	eq
   d4e70:	220d      	moveq	r2, #13
   d4e72:	2129      	movs	r1, #41	; 0x29
   d4e74:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d4e76:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4e78:	f7ff fbde 	bl	d4638 <sock_setsockopt>
   d4e7c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d4e80:	e001      	b.n	d4e86 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d4e82:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4e86:	b011      	add	sp, #68	; 0x44
   d4e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4e8c <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d4e8c:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e92:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d4e94:	4b0b      	ldr	r3, [pc, #44]	; (d4ec4 <_ZN3UDPC1Ev+0x38>)
   d4e96:	f103 0208 	add.w	r2, r3, #8
   d4e9a:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e9c:	2500      	movs	r5, #0
   d4e9e:	6103      	str	r3, [r0, #16]
   d4ea0:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d4ea4:	4604      	mov	r4, r0
   d4ea6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d4ea8:	6002      	str	r2, [r0, #0]
   d4eaa:	6143      	str	r3, [r0, #20]
   d4eac:	301c      	adds	r0, #28
   d4eae:	f000 fa0d 	bl	d52cc <_ZN9IPAddressC1Ev>
   d4eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d4eb6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d4eb8:	8725      	strh	r5, [r4, #56]	; 0x38
   d4eba:	63e5      	str	r5, [r4, #60]	; 0x3c
   d4ebc:	6423      	str	r3, [r4, #64]	; 0x40
   d4ebe:	6465      	str	r5, [r4, #68]	; 0x44
}
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	bd38      	pop	{r3, r4, r5, pc}
   d4ec4:	000d63e4 	.word	0x000d63e4

000d4ec8 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d4ec8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d4eca:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d4ece:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d4ed0:	b11b      	cbz	r3, d4eda <_ZN3UDP13releaseBufferEv+0x12>
   d4ed2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d4ed4:	b108      	cbz	r0, d4eda <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d4ed6:	f7ff f8e2 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d4eda:	2300      	movs	r3, #0
   d4edc:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d4ede:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d4ee2:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4ee4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4ee6:	8723      	strh	r3, [r4, #56]	; 0x38
   d4ee8:	bd10      	pop	{r4, pc}

000d4eea <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d4eea:	b570      	push	{r4, r5, r6, lr}
   d4eec:	4604      	mov	r4, r0
   d4eee:	4616      	mov	r6, r2
   d4ef0:	460d      	mov	r5, r1
    releaseBuffer();
   d4ef2:	f7ff ffe9 	bl	d4ec8 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d4ef6:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d4ef8:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d4efa:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d4efc:	b93e      	cbnz	r6, d4f0e <_ZN3UDP9setBufferEjPh+0x24>
   d4efe:	b135      	cbz	r5, d4f0e <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d4f00:	4628      	mov	r0, r5
   d4f02:	f7ff f8ca 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d4f06:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d4f08:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d4f0a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d4f0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d4f10:	b103      	cbz	r3, d4f14 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d4f12:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d4f14:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d4f16:	3000      	adds	r0, #0
   d4f18:	bf18      	it	ne
   d4f1a:	2001      	movne	r0, #1
   d4f1c:	bd70      	pop	{r4, r5, r6, pc}

000d4f1e <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d4f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f20:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d4f22:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d4f24:	4605      	mov	r5, r0
   d4f26:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d4f28:	b91a      	cbnz	r2, d4f32 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d4f2a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d4f2c:	b109      	cbz	r1, d4f32 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d4f2e:	f7ff ffdc 	bl	d4eea <_ZN3UDP9setBufferEjPh>
   d4f32:	3404      	adds	r4, #4
   d4f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4f36:	f105 0620 	add.w	r6, r5, #32
   d4f3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4f3c:	6823      	ldr	r3, [r4, #0]
   d4f3e:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4f40:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d4f42:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4f44:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d4f46:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d4f48:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d4f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f4c <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d4f4c:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d4f4e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d4f50:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d4f52:	b91a      	cbnz	r2, d4f5c <_ZN3UDP11parsePacketEm+0x10>
   d4f54:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d4f56:	b109      	cbz	r1, d4f5c <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d4f58:	f7ff ffc7 	bl	d4eea <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d4f5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4f5e:	2300      	movs	r3, #0
   d4f60:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4f62:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d4f64:	b141      	cbz	r1, d4f78 <_ZN3UDP11parsePacketEm+0x2c>
   d4f66:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d4f68:	b132      	cbz	r2, d4f78 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d4f6a:	6820      	ldr	r0, [r4, #0]
   d4f6c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d4f6e:	4620      	mov	r0, r4
   d4f70:	47a8      	blx	r5
        if (result > 0) {
   d4f72:	2800      	cmp	r0, #0
            _total = result;
   d4f74:	bfc8      	it	gt
   d4f76:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d4f78:	6823      	ldr	r3, [r4, #0]
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	691b      	ldr	r3, [r3, #16]
}
   d4f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d4f82:	4718      	bx	r3

000d4f84 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d4f84:	b510      	push	{r4, lr}
   d4f86:	4b07      	ldr	r3, [pc, #28]	; (d4fa4 <_ZN3UDPD1Ev+0x20>)
   d4f88:	f103 0208 	add.w	r2, r3, #8
   d4f8c:	336c      	adds	r3, #108	; 0x6c
   d4f8e:	4604      	mov	r4, r0
   d4f90:	6002      	str	r2, [r0, #0]
   d4f92:	6103      	str	r3, [r0, #16]
   d4f94:	f7ff fd6f 	bl	d4a76 <_ZN3UDP4stopEv>
   d4f98:	4620      	mov	r0, r4
   d4f9a:	f7ff ff95 	bl	d4ec8 <_ZN3UDP13releaseBufferEv>
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	bd10      	pop	{r4, pc}
   d4fa2:	bf00      	nop
   d4fa4:	000d63e4 	.word	0x000d63e4

000d4fa8 <_ZN3UDPD0Ev>:
   d4fa8:	b510      	push	{r4, lr}
   d4faa:	4604      	mov	r4, r0
   d4fac:	f7ff ffea 	bl	d4f84 <_ZN3UDPD1Ev>
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	f7ff f874 	bl	d409e <_ZdlPv>
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	bd10      	pop	{r4, pc}

000d4fba <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d4fba:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d4fbc:	6940      	ldr	r0, [r0, #20]
   d4fbe:	2800      	cmp	r0, #0
   d4fc0:	db04      	blt.n	d4fcc <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d4fc2:	2301      	movs	r3, #1
   d4fc4:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d4fc8:	f7ff befb 	b.w	d4dc2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d4fcc:	f04f 30ff 	mov.w	r0, #4294967295
   d4fd0:	4770      	bx	lr

000d4fd2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fd4:	4606      	mov	r6, r0
   d4fd6:	460d      	mov	r5, r1
   d4fd8:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4fda:	2400      	movs	r4, #0
  while (size--) {
   d4fdc:	42bd      	cmp	r5, r7
   d4fde:	d00c      	beq.n	d4ffa <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4fe0:	6833      	ldr	r3, [r6, #0]
   d4fe2:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4fe6:	689b      	ldr	r3, [r3, #8]
   d4fe8:	4630      	mov	r0, r6
   d4fea:	4798      	blx	r3
     if (chunk>=0)
   d4fec:	2800      	cmp	r0, #0
   d4fee:	db01      	blt.n	d4ff4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4ff0:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4ff2:	e7f3      	b.n	d4fdc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4ff4:	2c00      	cmp	r4, #0
   d4ff6:	bf08      	it	eq
   d4ff8:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ffe <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4ffe:	b570      	push	{r4, r5, r6, lr}
   d5000:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5002:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5004:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5006:	b149      	cbz	r1, d501c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5008:	f001 f934 	bl	d6274 <strlen>
   d500c:	682b      	ldr	r3, [r5, #0]
   d500e:	4602      	mov	r2, r0
   d5010:	4621      	mov	r1, r4
   d5012:	4628      	mov	r0, r5
   d5014:	68db      	ldr	r3, [r3, #12]
    }
   d5016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d501a:	4718      	bx	r3
    }
   d501c:	bd70      	pop	{r4, r5, r6, pc}

000d501e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d501e:	6803      	ldr	r3, [r0, #0]
   d5020:	689b      	ldr	r3, [r3, #8]
   d5022:	4718      	bx	r3

000d5024 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5024:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5026:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5028:	4605      	mov	r5, r0
  size_t n = print('\r');
   d502a:	f7ff fff8 	bl	d501e <_ZN5Print5printEc>
  n += print('\n');
   d502e:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5030:	4604      	mov	r4, r0
  n += print('\n');
   d5032:	4628      	mov	r0, r5
   d5034:	f7ff fff3 	bl	d501e <_ZN5Print5printEc>
  return n;
}
   d5038:	4420      	add	r0, r4
   d503a:	bd38      	pop	{r3, r4, r5, pc}

000d503c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d503c:	b538      	push	{r3, r4, r5, lr}
   d503e:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5040:	f7ff ffdd 	bl	d4ffe <_ZN5Print5writeEPKc>
   d5044:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5046:	4628      	mov	r0, r5
   d5048:	f7ff ffec 	bl	d5024 <_ZN5Print7printlnEv>
  return n;
}
   d504c:	4420      	add	r0, r4
   d504e:	bd38      	pop	{r3, r4, r5, pc}

000d5050 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5050:	b530      	push	{r4, r5, lr}
   d5052:	b08b      	sub	sp, #44	; 0x2c
   d5054:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5056:	2100      	movs	r1, #0
   d5058:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d505c:	2a01      	cmp	r2, #1
   d505e:	bf98      	it	ls
   d5060:	220a      	movls	r2, #10
   d5062:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5066:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d506a:	fb05 3312 	mls	r3, r5, r2, r3
   d506e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5072:	2b09      	cmp	r3, #9
   d5074:	bf94      	ite	ls
   d5076:	3330      	addls	r3, #48	; 0x30
   d5078:	3337      	addhi	r3, #55	; 0x37
   d507a:	b2db      	uxtb	r3, r3
   d507c:	4621      	mov	r1, r4
   d507e:	f804 3901 	strb.w	r3, [r4], #-1
   d5082:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5084:	2d00      	cmp	r5, #0
   d5086:	d1ee      	bne.n	d5066 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5088:	f7ff ffb9 	bl	d4ffe <_ZN5Print5writeEPKc>
}
   d508c:	b00b      	add	sp, #44	; 0x2c
   d508e:	bd30      	pop	{r4, r5, pc}

000d5090 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5090:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5092:	b92a      	cbnz	r2, d50a0 <_ZN5Print5printEmi+0x10>
   d5094:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5096:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d509a:	689b      	ldr	r3, [r3, #8]
   d509c:	b2c9      	uxtb	r1, r1
   d509e:	4718      	bx	r3
  else return printNumber(n, base);
   d50a0:	b2d2      	uxtb	r2, r2
}
   d50a2:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d50a6:	f7ff bfd3 	b.w	d5050 <_ZN5Print11printNumberEmh>

000d50aa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d50aa:	f7ff bff1 	b.w	d5090 <_ZN5Print5printEmi>

000d50ae <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d50ae:	b40c      	push	{r2, r3}
   d50b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d50b4:	b087      	sub	sp, #28
   d50b6:	af00      	add	r7, sp, #0
   d50b8:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d50bc:	4605      	mov	r5, r0
   d50be:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d50c2:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d50c4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d50c6:	4623      	mov	r3, r4
   d50c8:	464a      	mov	r2, r9
   d50ca:	2114      	movs	r1, #20
   d50cc:	1d38      	adds	r0, r7, #4
   d50ce:	f7ff fbc1 	bl	d4854 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d50d2:	2813      	cmp	r0, #19
   d50d4:	d805      	bhi.n	d50e2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d50d6:	1d39      	adds	r1, r7, #4
   d50d8:	4628      	mov	r0, r5
   d50da:	f7ff ff90 	bl	d4ffe <_ZN5Print5writeEPKc>
   d50de:	4604      	mov	r4, r0
   d50e0:	e013      	b.n	d510a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d50e2:	f100 0308 	add.w	r3, r0, #8
   d50e6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d50ea:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d50ec:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d50f0:	1c41      	adds	r1, r0, #1
   d50f2:	4623      	mov	r3, r4
   d50f4:	464a      	mov	r2, r9
   d50f6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d50f8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d50fa:	f7ff fbab 	bl	d4854 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d50fe:	4669      	mov	r1, sp
   d5100:	4628      	mov	r0, r5
   d5102:	f7ff ff7c 	bl	d4ffe <_ZN5Print5writeEPKc>
   d5106:	4604      	mov	r4, r0
   d5108:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d510a:	b11e      	cbz	r6, d5114 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d510c:	4628      	mov	r0, r5
   d510e:	f7ff ff89 	bl	d5024 <_ZN5Print7printlnEv>
   d5112:	4404      	add	r4, r0
    return n;
}
   d5114:	4620      	mov	r0, r4
   d5116:	371c      	adds	r7, #28
   d5118:	46bd      	mov	sp, r7
   d511a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d511e:	b002      	add	sp, #8
   d5120:	4770      	bx	lr
	...

000d5124 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5124:	4b01      	ldr	r3, [pc, #4]	; (d512c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5126:	4a02      	ldr	r2, [pc, #8]	; (d5130 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5128:	601a      	str	r2, [r3, #0]
   d512a:	4770      	bx	lr
   d512c:	2003e38c 	.word	0x2003e38c
   d5130:	000d6509 	.word	0x000d6509

000d5134 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5134:	4b02      	ldr	r3, [pc, #8]	; (d5140 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5136:	681a      	ldr	r2, [r3, #0]
   d5138:	4b02      	ldr	r3, [pc, #8]	; (d5144 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d513a:	601a      	str	r2, [r3, #0]
   d513c:	4770      	bx	lr
   d513e:	bf00      	nop
   d5140:	2003e2f4 	.word	0x2003e2f4
   d5144:	2003e390 	.word	0x2003e390

000d5148 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5148:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d514a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d514c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d514e:	b113      	cbz	r3, d5156 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5150:	2203      	movs	r2, #3
   d5152:	4601      	mov	r1, r0
   d5154:	4798      	blx	r3
    }
   d5156:	4620      	mov	r0, r4
   d5158:	bd10      	pop	{r4, pc}

000d515a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d515a:	b510      	push	{r4, lr}
   d515c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d515e:	f7ff fff3 	bl	d5148 <_ZNSt14_Function_baseD1Ev>
   d5162:	4620      	mov	r0, r4
   d5164:	bd10      	pop	{r4, pc}
	...

000d5168 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5168:	4803      	ldr	r0, [pc, #12]	; (d5178 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d516a:	4a04      	ldr	r2, [pc, #16]	; (d517c <_GLOBAL__sub_I_RGB+0x14>)
   d516c:	4904      	ldr	r1, [pc, #16]	; (d5180 <_GLOBAL__sub_I_RGB+0x18>)
   d516e:	2300      	movs	r3, #0
   d5170:	6083      	str	r3, [r0, #8]
   d5172:	f000 beab 	b.w	d5ecc <__aeabi_atexit>
   d5176:	bf00      	nop
   d5178:	2003e394 	.word	0x2003e394
   d517c:	2003e35c 	.word	0x2003e35c
   d5180:	000d515b 	.word	0x000d515b

000d5184 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5184:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5186:	4b0c      	ldr	r3, [pc, #48]	; (d51b8 <serialEventRun+0x34>)
   d5188:	b133      	cbz	r3, d5198 <serialEventRun+0x14>
   d518a:	f000 f93b 	bl	d5404 <_Z16_fetch_usbserialv>
   d518e:	6803      	ldr	r3, [r0, #0]
   d5190:	691b      	ldr	r3, [r3, #16]
   d5192:	4798      	blx	r3
   d5194:	2800      	cmp	r0, #0
   d5196:	dc09      	bgt.n	d51ac <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5198:	4b08      	ldr	r3, [pc, #32]	; (d51bc <serialEventRun+0x38>)
   d519a:	b163      	cbz	r3, d51b6 <serialEventRun+0x32>
   d519c:	f000 f9f0 	bl	d5580 <_Z22__fetch_global_Serial1v>
   d51a0:	6803      	ldr	r3, [r0, #0]
   d51a2:	691b      	ldr	r3, [r3, #16]
   d51a4:	4798      	blx	r3
   d51a6:	2800      	cmp	r0, #0
   d51a8:	dc03      	bgt.n	d51b2 <serialEventRun+0x2e>
   d51aa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d51ac:	f3af 8000 	nop.w
   d51b0:	e7f2      	b.n	d5198 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d51b2:	f3af 8000 	nop.w
   d51b6:	bd08      	pop	{r3, pc}
	...

000d51c0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d51c0:	b508      	push	{r3, lr}
	serialEventRun();
   d51c2:	f7ff ffdf 	bl	d5184 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d51c6:	f7ff f937 	bl	d4438 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d51ca:	4b01      	ldr	r3, [pc, #4]	; (d51d0 <_post_loop+0x10>)
   d51cc:	6018      	str	r0, [r3, #0]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	2003e730 	.word	0x2003e730

000d51d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d51d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d51d6:	2300      	movs	r3, #0
   d51d8:	9300      	str	r3, [sp, #0]
   d51da:	461a      	mov	r2, r3
   d51dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d51e0:	f7ff fab4 	bl	d474c <system_ctrl_set_result>
}
   d51e4:	b003      	add	sp, #12
   d51e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d51ec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d51ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d51ee:	8843      	ldrh	r3, [r0, #2]
   d51f0:	2b0a      	cmp	r3, #10
   d51f2:	d008      	beq.n	d5206 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d51f4:	2b50      	cmp	r3, #80	; 0x50
   d51f6:	d109      	bne.n	d520c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d51f8:	4b09      	ldr	r3, [pc, #36]	; (d5220 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d51fa:	681b      	ldr	r3, [r3, #0]
   d51fc:	b13b      	cbz	r3, d520e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d51fe:	b003      	add	sp, #12
   d5200:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5204:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5206:	f7ff ffe5 	bl	d51d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d520a:	e006      	b.n	d521a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d520c:	2300      	movs	r3, #0
   d520e:	9300      	str	r3, [sp, #0]
   d5210:	461a      	mov	r2, r3
   d5212:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5216:	f7ff fa99 	bl	d474c <system_ctrl_set_result>
        break;
    }
}
   d521a:	b003      	add	sp, #12
   d521c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5220:	2003e3a4 	.word	0x2003e3a4

000d5224 <module_user_init_hook>:

void module_user_init_hook()
{
   d5224:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5226:	f7ff f8f7 	bl	d4418 <HAL_RNG_GetRandomNumber>
   d522a:	4604      	mov	r4, r0
    srand(seed);
   d522c:	f000 ffe8 	bl	d6200 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5230:	4b07      	ldr	r3, [pc, #28]	; (d5250 <module_user_init_hook+0x2c>)
   d5232:	b113      	cbz	r3, d523a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5234:	4620      	mov	r0, r4
   d5236:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d523a:	2100      	movs	r1, #0
   d523c:	4804      	ldr	r0, [pc, #16]	; (d5250 <module_user_init_hook+0x2c>)
   d523e:	f7ff faf1 	bl	d4824 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5242:	2100      	movs	r1, #0
   d5244:	4803      	ldr	r0, [pc, #12]	; (d5254 <module_user_init_hook+0x30>)
}
   d5246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d524a:	f7ff ba75 	b.w	d4738 <system_ctrl_set_app_request_handler>
   d524e:	bf00      	nop
   d5250:	00000000 	.word	0x00000000
   d5254:	000d51ed 	.word	0x000d51ed

000d5258 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5258:	4770      	bx	lr

000d525a <_ZN9IPAddressD0Ev>:
   d525a:	b510      	push	{r4, lr}
   d525c:	4604      	mov	r4, r0
   d525e:	f7fe ff1e 	bl	d409e <_ZdlPv>
   d5262:	4620      	mov	r0, r4
   d5264:	bd10      	pop	{r4, pc}

000d5266 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5266:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5268:	7d03      	ldrb	r3, [r0, #20]
   d526a:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d526c:	b08d      	sub	sp, #52	; 0x34
   d526e:	460e      	mov	r6, r1
   d5270:	f100 0704 	add.w	r7, r0, #4
   d5274:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d5278:	d002      	beq.n	d5280 <_ZNK9IPAddress7printToER5Print+0x1a>
   d527a:	f100 0508 	add.w	r5, r0, #8
   d527e:	e018      	b.n	d52b2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5280:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5282:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5284:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5288:	232f      	movs	r3, #47	; 0x2f
   d528a:	462a      	mov	r2, r5
   d528c:	200a      	movs	r0, #10
   d528e:	f7ff f92b 	bl	d44e8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5292:	4628      	mov	r0, r5
   d5294:	f000 ffee 	bl	d6274 <strlen>
   d5298:	6833      	ldr	r3, [r6, #0]
   d529a:	4602      	mov	r2, r0
   d529c:	68db      	ldr	r3, [r3, #12]
   d529e:	4629      	mov	r1, r5
   d52a0:	4630      	mov	r0, r6
   d52a2:	4798      	blx	r3
   d52a4:	e00f      	b.n	d52c6 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d52a6:	b124      	cbz	r4, d52b2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d52a8:	212e      	movs	r1, #46	; 0x2e
   d52aa:	4630      	mov	r0, r6
   d52ac:	f7ff feb7 	bl	d501e <_ZN5Print5printEc>
   d52b0:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d52b2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d52b6:	220a      	movs	r2, #10
   d52b8:	4630      	mov	r0, r6
   d52ba:	f7ff fef6 	bl	d50aa <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d52be:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d52c0:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d52c2:	d1f0      	bne.n	d52a6 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d52c4:	4620      	mov	r0, r4
    }
    return n;
}
   d52c6:	b00d      	add	sp, #52	; 0x34
   d52c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d52cc <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d52cc:	b510      	push	{r4, lr}
   d52ce:	4b05      	ldr	r3, [pc, #20]	; (d52e4 <_ZN9IPAddressC1Ev+0x18>)
   d52d0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d52d2:	2211      	movs	r2, #17
   d52d4:	f840 3b04 	str.w	r3, [r0], #4
   d52d8:	2100      	movs	r1, #0
   d52da:	f000 ff89 	bl	d61f0 <memset>
{
    clear();
}
   d52de:	4620      	mov	r0, r4
   d52e0:	bd10      	pop	{r4, pc}
   d52e2:	bf00      	nop
   d52e4:	000d6564 	.word	0x000d6564

000d52e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d52e8:	4603      	mov	r3, r0
   d52ea:	4a07      	ldr	r2, [pc, #28]	; (d5308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d52ec:	b510      	push	{r4, lr}
   d52ee:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d52f2:	f101 0210 	add.w	r2, r1, #16
   d52f6:	f851 4b04 	ldr.w	r4, [r1], #4
   d52fa:	f843 4b04 	str.w	r4, [r3], #4
   d52fe:	4291      	cmp	r1, r2
   d5300:	d1f9      	bne.n	d52f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5302:	780a      	ldrb	r2, [r1, #0]
   d5304:	701a      	strb	r2, [r3, #0]
}
   d5306:	bd10      	pop	{r4, pc}
   d5308:	000d6564 	.word	0x000d6564

000d530c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d530c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d530e:	2b04      	cmp	r3, #4
   d5310:	d101      	bne.n	d5316 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5312:	6840      	ldr	r0, [r0, #4]
   d5314:	e008      	b.n	d5328 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5316:	2b06      	cmp	r3, #6
   d5318:	d10a      	bne.n	d5330 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d531a:	6843      	ldr	r3, [r0, #4]
   d531c:	b153      	cbz	r3, d5334 <_ZNK9IPAddresscvbEv+0x28>
   d531e:	6883      	ldr	r3, [r0, #8]
   d5320:	b143      	cbz	r3, d5334 <_ZNK9IPAddresscvbEv+0x28>
   d5322:	68c3      	ldr	r3, [r0, #12]
   d5324:	b133      	cbz	r3, d5334 <_ZNK9IPAddresscvbEv+0x28>
   d5326:	6900      	ldr	r0, [r0, #16]
   d5328:	3000      	adds	r0, #0
   d532a:	bf18      	it	ne
   d532c:	2001      	movne	r0, #1
   d532e:	4770      	bx	lr
   d5330:	2000      	movs	r0, #0
   d5332:	4770      	bx	lr
   d5334:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5336:	4770      	bx	lr

000d5338 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5338:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d533a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d533e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5342:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5346:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d534a:	2304      	movs	r3, #4
   d534c:	6041      	str	r1, [r0, #4]
   d534e:	7503      	strb	r3, [r0, #20]
   d5350:	bd10      	pop	{r4, pc}

000d5352 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5352:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5354:	780d      	ldrb	r5, [r1, #0]
   d5356:	788b      	ldrb	r3, [r1, #2]
   d5358:	784a      	ldrb	r2, [r1, #1]
   d535a:	78c9      	ldrb	r1, [r1, #3]
   d535c:	9100      	str	r1, [sp, #0]
   d535e:	4629      	mov	r1, r5
   d5360:	f7ff ffea 	bl	d5338 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5364:	b003      	add	sp, #12
   d5366:	bd30      	pop	{r4, r5, pc}

000d5368 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5368:	7441      	strb	r1, [r0, #17]
   d536a:	4770      	bx	lr

000d536c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d536c:	4770      	bx	lr

000d536e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d536e:	2100      	movs	r1, #0
   d5370:	7c00      	ldrb	r0, [r0, #16]
   d5372:	f7ff b9a9 	b.w	d46c8 <HAL_USB_USART_Receive_Data>

000d5376 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5376:	2101      	movs	r1, #1
   d5378:	7c00      	ldrb	r0, [r0, #16]
   d537a:	f7ff b9a5 	b.w	d46c8 <HAL_USB_USART_Receive_Data>

000d537e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d537e:	7c00      	ldrb	r0, [r0, #16]
   d5380:	f7ff b99a 	b.w	d46b8 <HAL_USB_USART_Available_Data_For_Write>

000d5384 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5384:	7c00      	ldrb	r0, [r0, #16]
   d5386:	f7ff b98f 	b.w	d46a8 <HAL_USB_USART_Available_Data>

000d538a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d538a:	b538      	push	{r3, r4, r5, lr}
   d538c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d538e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5390:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5392:	f7ff f991 	bl	d46b8 <HAL_USB_USART_Available_Data_For_Write>
   d5396:	2800      	cmp	r0, #0
   d5398:	dc01      	bgt.n	d539e <_ZN9USBSerial5writeEh+0x14>
   d539a:	7c60      	ldrb	r0, [r4, #17]
   d539c:	b120      	cbz	r0, d53a8 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d539e:	4629      	mov	r1, r5
   d53a0:	7c20      	ldrb	r0, [r4, #16]
   d53a2:	f7ff f999 	bl	d46d8 <HAL_USB_USART_Send_Data>
    return 1;
   d53a6:	2001      	movs	r0, #1
  }
  return 0;
}
   d53a8:	bd38      	pop	{r3, r4, r5, pc}

000d53aa <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d53aa:	7c00      	ldrb	r0, [r0, #16]
   d53ac:	f7ff b99c 	b.w	d46e8 <HAL_USB_USART_Flush_Data>

000d53b0 <_ZN9USBSerialD0Ev>:
   d53b0:	b510      	push	{r4, lr}
   d53b2:	4604      	mov	r4, r0
   d53b4:	f7fe fe73 	bl	d409e <_ZdlPv>
   d53b8:	4620      	mov	r0, r4
   d53ba:	bd10      	pop	{r4, pc}

000d53bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d53bc:	b510      	push	{r4, lr}
   d53be:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d53c0:	2300      	movs	r3, #0
   d53c2:	6063      	str	r3, [r4, #4]
   d53c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53c8:	60a3      	str	r3, [r4, #8]
   d53ca:	4b05      	ldr	r3, [pc, #20]	; (d53e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d53cc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d53ce:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d53d0:	4608      	mov	r0, r1
{
  _serial = serial;
   d53d2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d53d4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d53d6:	4611      	mov	r1, r2
   d53d8:	f7ff f956 	bl	d4688 <HAL_USB_USART_Init>
}
   d53dc:	4620      	mov	r0, r4
   d53de:	bd10      	pop	{r4, pc}
   d53e0:	000d6578 	.word	0x000d6578

000d53e4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d53e4:	2200      	movs	r2, #0
   d53e6:	7c00      	ldrb	r0, [r0, #16]
   d53e8:	f7ff b956 	b.w	d4698 <HAL_USB_USART_Begin>

000d53ec <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d53ec:	7c00      	ldrb	r0, [r0, #16]
   d53ee:	f7ff b983 	b.w	d46f8 <HAL_USB_USART_Is_Connected>

000d53f2 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53f2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d53f4:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53f6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d53f8:	2100      	movs	r1, #0
   d53fa:	f000 fef9 	bl	d61f0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53fe:	4620      	mov	r0, r4
   d5400:	bd10      	pop	{r4, pc}
	...

000d5404 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5404:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5406:	4d0e      	ldr	r5, [pc, #56]	; (d5440 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5408:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d540a:	a801      	add	r0, sp, #4
   d540c:	f7ff fff1 	bl	d53f2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5410:	6829      	ldr	r1, [r5, #0]
   d5412:	f011 0401 	ands.w	r4, r1, #1
   d5416:	d110      	bne.n	d543a <_Z16_fetch_usbserialv+0x36>
   d5418:	4628      	mov	r0, r5
   d541a:	f7fe fe44 	bl	d40a6 <__cxa_guard_acquire>
   d541e:	b160      	cbz	r0, d543a <_Z16_fetch_usbserialv+0x36>
   d5420:	aa01      	add	r2, sp, #4
   d5422:	4621      	mov	r1, r4
   d5424:	4807      	ldr	r0, [pc, #28]	; (d5444 <_Z16_fetch_usbserialv+0x40>)
   d5426:	f7ff ffc9 	bl	d53bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d542a:	4628      	mov	r0, r5
   d542c:	f7fe fe40 	bl	d40b0 <__cxa_guard_release>
   d5430:	4a05      	ldr	r2, [pc, #20]	; (d5448 <_Z16_fetch_usbserialv+0x44>)
   d5432:	4906      	ldr	r1, [pc, #24]	; (d544c <_Z16_fetch_usbserialv+0x48>)
   d5434:	4803      	ldr	r0, [pc, #12]	; (d5444 <_Z16_fetch_usbserialv+0x40>)
   d5436:	f000 fd49 	bl	d5ecc <__aeabi_atexit>
	return _usbserial;
}
   d543a:	4802      	ldr	r0, [pc, #8]	; (d5444 <_Z16_fetch_usbserialv+0x40>)
   d543c:	b007      	add	sp, #28
   d543e:	bd30      	pop	{r4, r5, pc}
   d5440:	2003e3a8 	.word	0x2003e3a8
   d5444:	2003e3ac 	.word	0x2003e3ac
   d5448:	2003e35c 	.word	0x2003e35c
   d544c:	000d536d 	.word	0x000d536d

000d5450 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5450:	2200      	movs	r2, #0
   d5452:	4611      	mov	r1, r2
   d5454:	6840      	ldr	r0, [r0, #4]
   d5456:	f7ff b9a5 	b.w	d47a4 <network_ready>

000d545a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d545a:	2200      	movs	r2, #0
   d545c:	4611      	mov	r1, r2
   d545e:	6840      	ldr	r0, [r0, #4]
   d5460:	f7ff b9c0 	b.w	d47e4 <network_listening>

000d5464 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5464:	2200      	movs	r2, #0
   d5466:	4611      	mov	r1, r2
   d5468:	6840      	ldr	r0, [r0, #4]
   d546a:	f7ff b9cb 	b.w	d4804 <network_get_listen_timeout>

000d546e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d546e:	2200      	movs	r2, #0
   d5470:	6840      	ldr	r0, [r0, #4]
   d5472:	f7ff b9bf 	b.w	d47f4 <network_set_listen_timeout>

000d5476 <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5476:	2200      	movs	r2, #0
   d5478:	f081 0101 	eor.w	r1, r1, #1
   d547c:	6840      	ldr	r0, [r0, #4]
   d547e:	f7ff b9a9 	b.w	d47d4 <network_listen>

000d5482 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5482:	2300      	movs	r3, #0
   d5484:	461a      	mov	r2, r3
   d5486:	4619      	mov	r1, r3
   d5488:	6840      	ldr	r0, [r0, #4]
   d548a:	f7ff b99b 	b.w	d47c4 <network_off>

000d548e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d548e:	2300      	movs	r3, #0
   d5490:	461a      	mov	r2, r3
   d5492:	4619      	mov	r1, r3
   d5494:	6840      	ldr	r0, [r0, #4]
   d5496:	f7ff b98d 	b.w	d47b4 <network_on>

000d549a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d549a:	2200      	movs	r2, #0
   d549c:	4611      	mov	r1, r2
   d549e:	6840      	ldr	r0, [r0, #4]
   d54a0:	f7ff b970 	b.w	d4784 <network_connecting>

000d54a4 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54a4:	2200      	movs	r2, #0
   d54a6:	2102      	movs	r1, #2
   d54a8:	6840      	ldr	r0, [r0, #4]
   d54aa:	f7ff b973 	b.w	d4794 <network_disconnect>

000d54ae <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54ae:	2300      	movs	r3, #0
   d54b0:	461a      	mov	r2, r3
   d54b2:	6840      	ldr	r0, [r0, #4]
   d54b4:	f7ff b95e 	b.w	d4774 <network_connect>

000d54b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d54b8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d54ba:	4d0c      	ldr	r5, [pc, #48]	; (d54ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d54bc:	2428      	movs	r4, #40	; 0x28
   d54be:	4622      	mov	r2, r4
   d54c0:	2100      	movs	r1, #0
   d54c2:	4628      	mov	r0, r5
   d54c4:	f000 fe94 	bl	d61f0 <memset>
        cid = -1;
   d54c8:	f04f 33ff 	mov.w	r3, #4294967295
   d54cc:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d54ce:	802c      	strh	r4, [r5, #0]
   d54d0:	4d07      	ldr	r5, [pc, #28]	; (d54f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d54d2:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d54d4:	4628      	mov	r0, r5
   d54d6:	606b      	str	r3, [r5, #4]
   d54d8:	4b06      	ldr	r3, [pc, #24]	; (d54f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d54da:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d54de:	4622      	mov	r2, r4
   d54e0:	2100      	movs	r1, #0
   d54e2:	f000 fe85 	bl	d61f0 <memset>
        size = sizeof(*this);
   d54e6:	812c      	strh	r4, [r5, #8]
   d54e8:	bd38      	pop	{r3, r4, r5, pc}
   d54ea:	bf00      	nop
   d54ec:	2003e3f0 	.word	0x2003e3f0
   d54f0:	2003e3c0 	.word	0x2003e3c0
   d54f4:	000d65a8 	.word	0x000d65a8

000d54f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d54f8:	4770      	bx	lr

000d54fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54fa:	7441      	strb	r1, [r0, #17]
   d54fc:	4770      	bx	lr

000d54fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d54fe:	7c00      	ldrb	r0, [r0, #16]
   d5500:	f7ff b852 	b.w	d45a8 <HAL_USART_Available_Data_For_Write>

000d5504 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5504:	7c00      	ldrb	r0, [r0, #16]
   d5506:	f7ff b827 	b.w	d4558 <HAL_USART_Available_Data>

000d550a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d550a:	7c00      	ldrb	r0, [r0, #16]
   d550c:	f7ff b834 	b.w	d4578 <HAL_USART_Peek_Data>

000d5510 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5510:	7c00      	ldrb	r0, [r0, #16]
   d5512:	f7ff b829 	b.w	d4568 <HAL_USART_Read_Data>

000d5516 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5516:	7c00      	ldrb	r0, [r0, #16]
   d5518:	f7ff b836 	b.w	d4588 <HAL_USART_Flush_Data>

000d551c <_ZN11USARTSerialD0Ev>:
   d551c:	b510      	push	{r4, lr}
   d551e:	4604      	mov	r4, r0
   d5520:	f7fe fdbd 	bl	d409e <_ZdlPv>
   d5524:	4620      	mov	r0, r4
   d5526:	bd10      	pop	{r4, pc}

000d5528 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5528:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d552a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d552c:	4604      	mov	r4, r0
   d552e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5530:	b925      	cbnz	r5, d553c <_ZN11USARTSerial5writeEh+0x14>
   d5532:	7c00      	ldrb	r0, [r0, #16]
   d5534:	f7ff f838 	bl	d45a8 <HAL_USART_Available_Data_For_Write>
   d5538:	2800      	cmp	r0, #0
   d553a:	dd05      	ble.n	d5548 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d553c:	4631      	mov	r1, r6
   d553e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5544:	f7ff b800 	b.w	d4548 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5548:	4628      	mov	r0, r5
   d554a:	bd70      	pop	{r4, r5, r6, pc}

000d554c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d554c:	b510      	push	{r4, lr}
   d554e:	4604      	mov	r4, r0
   d5550:	4608      	mov	r0, r1
   d5552:	4611      	mov	r1, r2
   d5554:	2200      	movs	r2, #0
   d5556:	6062      	str	r2, [r4, #4]
   d5558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d555c:	60a2      	str	r2, [r4, #8]
   d555e:	4a05      	ldr	r2, [pc, #20]	; (d5574 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5560:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5562:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5564:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5566:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5568:	461a      	mov	r2, r3
   d556a:	f7fe ffe5 	bl	d4538 <HAL_USART_Init>
}
   d556e:	4620      	mov	r0, r4
   d5570:	bd10      	pop	{r4, pc}
   d5572:	bf00      	nop
   d5574:	000d65dc 	.word	0x000d65dc

000d5578 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5578:	7c00      	ldrb	r0, [r0, #16]
   d557a:	f7ff b80d 	b.w	d4598 <HAL_USART_Is_Enabled>
	...

000d5580 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5580:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5582:	4d0c      	ldr	r5, [pc, #48]	; (d55b4 <_Z22__fetch_global_Serial1v+0x34>)
   d5584:	6829      	ldr	r1, [r5, #0]
   d5586:	f011 0401 	ands.w	r4, r1, #1
   d558a:	d111      	bne.n	d55b0 <_Z22__fetch_global_Serial1v+0x30>
   d558c:	4628      	mov	r0, r5
   d558e:	f7fe fd8a 	bl	d40a6 <__cxa_guard_acquire>
   d5592:	b168      	cbz	r0, d55b0 <_Z22__fetch_global_Serial1v+0x30>
   d5594:	4a08      	ldr	r2, [pc, #32]	; (d55b8 <_Z22__fetch_global_Serial1v+0x38>)
   d5596:	4b09      	ldr	r3, [pc, #36]	; (d55bc <_Z22__fetch_global_Serial1v+0x3c>)
   d5598:	4809      	ldr	r0, [pc, #36]	; (d55c0 <_Z22__fetch_global_Serial1v+0x40>)
   d559a:	4621      	mov	r1, r4
   d559c:	f7ff ffd6 	bl	d554c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d55a0:	4628      	mov	r0, r5
   d55a2:	f7fe fd85 	bl	d40b0 <__cxa_guard_release>
   d55a6:	4a07      	ldr	r2, [pc, #28]	; (d55c4 <_Z22__fetch_global_Serial1v+0x44>)
   d55a8:	4907      	ldr	r1, [pc, #28]	; (d55c8 <_Z22__fetch_global_Serial1v+0x48>)
   d55aa:	4805      	ldr	r0, [pc, #20]	; (d55c0 <_Z22__fetch_global_Serial1v+0x40>)
   d55ac:	f000 fc8e 	bl	d5ecc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d55b0:	4803      	ldr	r0, [pc, #12]	; (d55c0 <_Z22__fetch_global_Serial1v+0x40>)
   d55b2:	bd38      	pop	{r3, r4, r5, pc}
   d55b4:	2003e4b0 	.word	0x2003e4b0
   d55b8:	2003e4b4 	.word	0x2003e4b4
   d55bc:	2003e42c 	.word	0x2003e42c
   d55c0:	2003e418 	.word	0x2003e418
   d55c4:	2003e35c 	.word	0x2003e35c
   d55c8:	000d54f9 	.word	0x000d54f9

000d55cc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d55cc:	4770      	bx	lr

000d55ce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d55ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55d0:	4606      	mov	r6, r0
   d55d2:	4615      	mov	r5, r2
   d55d4:	460c      	mov	r4, r1
   d55d6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d55d8:	42bc      	cmp	r4, r7
   d55da:	d006      	beq.n	d55ea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d55dc:	6833      	ldr	r3, [r6, #0]
   d55de:	f814 1b01 	ldrb.w	r1, [r4], #1
   d55e2:	689b      	ldr	r3, [r3, #8]
   d55e4:	4630      	mov	r0, r6
   d55e6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d55e8:	e7f6      	b.n	d55d8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d55ea:	4628      	mov	r0, r5
   d55ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55ee <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d55ee:	2200      	movs	r2, #0
   d55f0:	7c00      	ldrb	r0, [r0, #16]
   d55f2:	f7fe bfe1 	b.w	d45b8 <HAL_I2C_Write_Data>

000d55f6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d55f6:	2100      	movs	r1, #0
   d55f8:	7c00      	ldrb	r0, [r0, #16]
   d55fa:	f7fe bfe5 	b.w	d45c8 <HAL_I2C_Available_Data>

000d55fe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d55fe:	2100      	movs	r1, #0
   d5600:	7c00      	ldrb	r0, [r0, #16]
   d5602:	f7fe bfe9 	b.w	d45d8 <HAL_I2C_Read_Data>

000d5606 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5606:	2100      	movs	r1, #0
   d5608:	7c00      	ldrb	r0, [r0, #16]
   d560a:	f7fe bfed 	b.w	d45e8 <HAL_I2C_Peek_Data>

000d560e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d560e:	2100      	movs	r1, #0
   d5610:	7c00      	ldrb	r0, [r0, #16]
   d5612:	f7fe bff1 	b.w	d45f8 <HAL_I2C_Flush_Data>

000d5616 <_ZN7TwoWireD0Ev>:
   d5616:	b510      	push	{r4, lr}
   d5618:	4604      	mov	r4, r0
   d561a:	f7fe fd40 	bl	d409e <_ZdlPv>
   d561e:	4620      	mov	r0, r4
   d5620:	bd10      	pop	{r4, pc}
	...

000d5624 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5624:	b510      	push	{r4, lr}
   d5626:	4604      	mov	r4, r0
   d5628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d562c:	4608      	mov	r0, r1
   d562e:	60a3      	str	r3, [r4, #8]
   d5630:	2100      	movs	r1, #0
   d5632:	4b04      	ldr	r3, [pc, #16]	; (d5644 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5634:	7420      	strb	r0, [r4, #16]
   d5636:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5638:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d563a:	f7fe ffed 	bl	d4618 <HAL_I2C_Init>

}
   d563e:	4620      	mov	r0, r4
   d5640:	bd10      	pop	{r4, pc}
   d5642:	bf00      	nop
   d5644:	000d660c 	.word	0x000d660c

000d5648 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5648:	2100      	movs	r1, #0
   d564a:	7c00      	ldrb	r0, [r0, #16]
   d564c:	f7fe bfdc 	b.w	d4608 <HAL_I2C_Is_Enabled>

000d5650 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5650:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d5652:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5654:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d5656:	b10b      	cbz	r3, d565c <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d5658:	68c0      	ldr	r0, [r0, #12]
   d565a:	e006      	b.n	d566a <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d565c:	6840      	ldr	r0, [r0, #4]
   d565e:	b128      	cbz	r0, d566c <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5660:	6883      	ldr	r3, [r0, #8]
   d5662:	b90b      	cbnz	r3, d5668 <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d5664:	f000 fc51 	bl	d5f0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5668:	68c3      	ldr	r3, [r0, #12]
   d566a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d566c:	2301      	movs	r3, #1
   d566e:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d5670:	2000      	movs	r0, #0
    }
   d5672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d5676:	f7fe bf2f 	b.w	d44d8 <os_thread_exit>

000d567a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d567a:	2200      	movs	r2, #0
   d567c:	4611      	mov	r1, r2
   d567e:	6840      	ldr	r0, [r0, #4]
   d5680:	f7ff b8b0 	b.w	d47e4 <network_listening>

000d5684 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5684:	2200      	movs	r2, #0
   d5686:	4611      	mov	r1, r2
   d5688:	6840      	ldr	r0, [r0, #4]
   d568a:	f7ff b8bb 	b.w	d4804 <network_get_listen_timeout>

000d568e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d568e:	2200      	movs	r2, #0
   d5690:	6840      	ldr	r0, [r0, #4]
   d5692:	f7ff b8af 	b.w	d47f4 <network_set_listen_timeout>

000d5696 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5696:	2200      	movs	r2, #0
   d5698:	f081 0101 	eor.w	r1, r1, #1
   d569c:	6840      	ldr	r0, [r0, #4]
   d569e:	f7ff b899 	b.w	d47d4 <network_listen>

000d56a2 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d56a2:	2300      	movs	r3, #0
   d56a4:	461a      	mov	r2, r3
   d56a6:	4619      	mov	r1, r3
   d56a8:	6840      	ldr	r0, [r0, #4]
   d56aa:	f7ff b88b 	b.w	d47c4 <network_off>

000d56ae <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56ae:	2300      	movs	r3, #0
   d56b0:	461a      	mov	r2, r3
   d56b2:	4619      	mov	r1, r3
   d56b4:	6840      	ldr	r0, [r0, #4]
   d56b6:	f7ff b87d 	b.w	d47b4 <network_on>

000d56ba <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56ba:	2200      	movs	r2, #0
   d56bc:	4611      	mov	r1, r2
   d56be:	6840      	ldr	r0, [r0, #4]
   d56c0:	f7ff b870 	b.w	d47a4 <network_ready>

000d56c4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56c4:	2200      	movs	r2, #0
   d56c6:	4611      	mov	r1, r2
   d56c8:	6840      	ldr	r0, [r0, #4]
   d56ca:	f7ff b85b 	b.w	d4784 <network_connecting>

000d56ce <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56ce:	2200      	movs	r2, #0
   d56d0:	2102      	movs	r1, #2
   d56d2:	6840      	ldr	r0, [r0, #4]
   d56d4:	f7ff b85e 	b.w	d4794 <network_disconnect>

000d56d8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56d8:	2300      	movs	r3, #0
   d56da:	461a      	mov	r2, r3
   d56dc:	6840      	ldr	r0, [r0, #4]
   d56de:	f7ff b849 	b.w	d4774 <network_connect>

000d56e2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56e2:	b110      	cbz	r0, d56ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d56e4:	6803      	ldr	r3, [r0, #0]
   d56e6:	685b      	ldr	r3, [r3, #4]
   d56e8:	4718      	bx	r3
   d56ea:	4770      	bx	lr

000d56ec <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d56ec:	b538      	push	{r3, r4, r5, lr}
   d56ee:	4604      	mov	r4, r0
   d56f0:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d56f2:	b1d0      	cbz	r0, d572a <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d56f4:	f7fe feb8 	bl	d4468 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d56f8:	b9b8      	cbnz	r0, d572a <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d56fa:	7c23      	ldrb	r3, [r4, #16]
   d56fc:	b91b      	cbnz	r3, d5706 <_ZN6Thread7disposeEv+0x1a>
   d56fe:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5700:	b108      	cbz	r0, d5706 <_ZN6Thread7disposeEv+0x1a>
   d5702:	f7fe feb9 	bl	d4478 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d5706:	6865      	ldr	r5, [r4, #4]
   d5708:	b155      	cbz	r5, d5720 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d570a:	68ab      	ldr	r3, [r5, #8]
   d570c:	b11b      	cbz	r3, d5716 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d570e:	2203      	movs	r2, #3
   d5710:	4629      	mov	r1, r5
   d5712:	4628      	mov	r0, r5
   d5714:	4798      	blx	r3
            delete wrapper;
   d5716:	4628      	mov	r0, r5
   d5718:	f7fe fcc1 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d571c:	2300      	movs	r3, #0
   d571e:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5720:	6820      	ldr	r0, [r4, #0]
   d5722:	f7fe feb1 	bl	d4488 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d5726:	2300      	movs	r3, #0
   d5728:	6023      	str	r3, [r4, #0]
   d572a:	bd38      	pop	{r3, r4, r5, pc}

000d572c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d572c:	b538      	push	{r3, r4, r5, lr}
   d572e:	4b0b      	ldr	r3, [pc, #44]	; (d575c <_ZN5spark9MeshClassD1Ev+0x30>)
   d5730:	6003      	str	r3, [r0, #0]
   d5732:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5734:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5738:	b108      	cbz	r0, d573e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d573a:	f7fe fcb2 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d573e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5742:	b12d      	cbz	r5, d5750 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d5744:	4628      	mov	r0, r5
   d5746:	f7ff ffd1 	bl	d56ec <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d574a:	4628      	mov	r0, r5
   d574c:	f7fe fca7 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5750:	68a0      	ldr	r0, [r4, #8]
   d5752:	b108      	cbz	r0, d5758 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5754:	f7ff ffc5 	bl	d56e2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5758:	4620      	mov	r0, r4
   d575a:	bd38      	pop	{r3, r4, r5, pc}
   d575c:	000d6634 	.word	0x000d6634

000d5760 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5760:	6800      	ldr	r0, [r0, #0]
   d5762:	f7fe bea9 	b.w	d44b8 <os_mutex_recursive_lock>

000d5766 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5766:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d576a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d576c:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d5770:	4606      	mov	r6, r0
   d5772:	4688      	mov	r8, r1
   d5774:	4691      	mov	r9, r2
   d5776:	469a      	mov	sl, r3
   d5778:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d577a:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d577c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d577e:	454b      	cmp	r3, r9
   d5780:	d129      	bne.n	d57d6 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d5782:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d5784:	4553      	cmp	r3, sl
   d5786:	d126      	bne.n	d57d6 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d5788:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d578c:	455b      	cmp	r3, fp
   d578e:	d122      	bne.n	d57d6 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5790:	2140      	movs	r1, #64	; 0x40
   d5792:	4640      	mov	r0, r8
   d5794:	f000 fd8b 	bl	d62ae <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d5798:	4641      	mov	r1, r8
   d579a:	4602      	mov	r2, r0
   d579c:	4620      	mov	r0, r4
   d579e:	f000 fd71 	bl	d6284 <strncmp>
   d57a2:	b9c0      	cbnz	r0, d57d6 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d57a4:	b16f      	cbz	r7, d57c2 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d57a6:	210c      	movs	r1, #12
   d57a8:	4638      	mov	r0, r7
   d57aa:	f000 fd80 	bl	d62ae <strnlen>
                if (id_len)
   d57ae:	4602      	mov	r2, r0
   d57b0:	b138      	cbz	r0, d57c2 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d57b2:	2358      	movs	r3, #88	; 0x58
   d57b4:	fb03 6005 	mla	r0, r3, r5, r6
   d57b8:	4639      	mov	r1, r7
   d57ba:	3049      	adds	r0, #73	; 0x49
   d57bc:	f000 fd62 	bl	d6284 <strncmp>
   d57c0:	e004      	b.n	d57cc <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d57c2:	2058      	movs	r0, #88	; 0x58
   d57c4:	fb00 6505 	mla	r5, r0, r5, r6
   d57c8:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d57cc:	fab0 f080 	clz	r0, r0
   d57d0:	0940      	lsrs	r0, r0, #5
   d57d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d57d6:	3501      	adds	r5, #1
   d57d8:	2d05      	cmp	r5, #5
   d57da:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d57de:	d1cd      	bne.n	d577c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d57e0:	2000      	movs	r0, #0
}
   d57e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d57e8 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d57e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57ec:	b085      	sub	sp, #20
   d57ee:	4607      	mov	r7, r0
   d57f0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d57f4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d57f6:	9601      	str	r6, [sp, #4]
   d57f8:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d57fc:	4689      	mov	r9, r1
   d57fe:	9202      	str	r2, [sp, #8]
   d5800:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d5802:	f7ff ffb0 	bl	d5766 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d5806:	2800      	cmp	r0, #0
   d5808:	d13c      	bne.n	d5884 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d580a:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d580c:	2358      	movs	r3, #88	; 0x58
   d580e:	fb03 7504 	mla	r5, r3, r4, r7
   d5812:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d5816:	f1b8 0f00 	cmp.w	r8, #0
   d581a:	d12e      	bne.n	d587a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d581c:	2140      	movs	r1, #64	; 0x40
   d581e:	4648      	mov	r0, r9
   d5820:	f000 fd45 	bl	d62ae <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5824:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5826:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5828:	4602      	mov	r2, r0
   d582a:	4628      	mov	r0, r5
   d582c:	f000 fcd5 	bl	d61da <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d5830:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d5834:	4641      	mov	r1, r8
   d5836:	eb05 000b 	add.w	r0, r5, fp
   d583a:	f000 fcd9 	bl	d61f0 <memset>
            event_handlers[i].handler = handler;
   d583e:	9b02      	ldr	r3, [sp, #8]
   d5840:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d5842:	9b03      	ldr	r3, [sp, #12]
   d5844:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d5846:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d584a:	b12e      	cbz	r6, d5858 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d584c:	210c      	movs	r1, #12
   d584e:	4630      	mov	r0, r6
   d5850:	f000 fd2d 	bl	d62ae <strnlen>
   d5854:	4605      	mov	r5, r0
   d5856:	e000      	b.n	d585a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d5858:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d585a:	2058      	movs	r0, #88	; 0x58
   d585c:	4344      	muls	r4, r0
   d585e:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d5860:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d5862:	462a      	mov	r2, r5
   d5864:	4631      	mov	r1, r6
   d5866:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d5868:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d586a:	f000 fcb6 	bl	d61da <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d586e:	2000      	movs	r0, #0
   d5870:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d5874:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d5878:	e005      	b.n	d5886 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d587a:	3401      	adds	r4, #1
   d587c:	2c05      	cmp	r4, #5
   d587e:	d1c6      	bne.n	d580e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d5880:	4802      	ldr	r0, [pc, #8]	; (d588c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d5882:	e000      	b.n	d5886 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d5884:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d5886:	b005      	add	sp, #20
   d5888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d588c:	fffffefc 	.word	0xfffffefc

000d5890 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d5890:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d5892:	2300      	movs	r3, #0
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	9300      	str	r3, [sp, #0]
   d5898:	f7ff ffa6 	bl	d57e8 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d589c:	b003      	add	sp, #12
   d589e:	f85d fb04 	ldr.w	pc, [sp], #4

000d58a2 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d58a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d58a6:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d58a8:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d58aa:	460d      	mov	r5, r1
   d58ac:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d58ae:	f000 fce1 	bl	d6274 <strlen>
   d58b2:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d58b6:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d58b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d58ba:	b1ab      	cbz	r3, d58e8 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d58bc:	2140      	movs	r1, #64	; 0x40
   d58be:	4620      	mov	r0, r4
   d58c0:	f000 fcf5 	bl	d62ae <strnlen>

        if (event_name_length < filter_length)
   d58c4:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d58c6:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d58c8:	d30b      	bcc.n	d58e2 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d58ca:	4629      	mov	r1, r5
   d58cc:	4620      	mov	r0, r4
   d58ce:	f000 fc75 	bl	d61bc <memcmp>
        if (0 == cmp)
   d58d2:	b930      	cbnz	r0, d58e2 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d58d4:	9000      	str	r0, [sp, #0]
   d58d6:	4643      	mov	r3, r8
   d58d8:	462a      	mov	r2, r5
   d58da:	4621      	mov	r1, r4
   d58dc:	2058      	movs	r0, #88	; 0x58
   d58de:	f7fe ff3f 	bl	d4760 <system_invoke_event_handler>
   d58e2:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d58e4:	42b4      	cmp	r4, r6
   d58e6:	d1e7      	bne.n	d58b8 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d58e8:	b002      	add	sp, #8
   d58ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d58f0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d58f0:	b530      	push	{r4, r5, lr}
   d58f2:	b08d      	sub	sp, #52	; 0x34
   d58f4:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d58f6:	2211      	movs	r2, #17
   d58f8:	2100      	movs	r1, #0
   d58fa:	a801      	add	r0, sp, #4
   d58fc:	f000 fc78 	bl	d61f0 <memset>
    addr.v = 6;
   d5900:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5902:	aa01      	add	r2, sp, #4
   d5904:	4909      	ldr	r1, [pc, #36]	; (d592c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5906:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d590a:	200a      	movs	r0, #10
   d590c:	f7fe fdf4 	bl	d44f8 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5910:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d5912:	a901      	add	r1, sp, #4
   d5914:	a806      	add	r0, sp, #24
   d5916:	f7ff fce7 	bl	d52e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d591a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d591c:	3404      	adds	r4, #4
   d591e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5920:	682b      	ldr	r3, [r5, #0]
   d5922:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5924:	2000      	movs	r0, #0
   d5926:	b00d      	add	sp, #52	; 0x34
   d5928:	bd30      	pop	{r4, r5, pc}
   d592a:	bf00      	nop
   d592c:	000d6660 	.word	0x000d6660

000d5930 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5930:	b530      	push	{r4, r5, lr}
   d5932:	4604      	mov	r4, r0
   d5934:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5936:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d593a:	f7ff ff11 	bl	d5760 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d593e:	6823      	ldr	r3, [r4, #0]
   d5940:	bb83      	cbnz	r3, d59a4 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d5942:	204c      	movs	r0, #76	; 0x4c
   d5944:	f7fe fba7 	bl	d4096 <_Znwj>
   d5948:	4605      	mov	r5, r0
   d594a:	b108      	cbz	r0, d5950 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d594c:	f7ff fa9e 	bl	d4e8c <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5950:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5952:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5954:	b108      	cbz	r0, d595a <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d5956:	f7ff fec4 	bl	d56e2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d595a:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d595c:	b320      	cbz	r0, d59a8 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d595e:	2200      	movs	r2, #0
   d5960:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d5964:	f7ff fac1 	bl	d4eea <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5968:	a908      	add	r1, sp, #32
   d596a:	2500      	movs	r5, #0
   d596c:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d5970:	4811      	ldr	r0, [pc, #68]	; (d59b8 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d5972:	f7fe fd29 	bl	d43c8 <if_name_to_index>
   d5976:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d5978:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d597c:	6803      	ldr	r3, [r0, #0]
   d597e:	f249 0169 	movw	r1, #36969	; 0x9069
   d5982:	6a1b      	ldr	r3, [r3, #32]
   d5984:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d5986:	a802      	add	r0, sp, #8
   d5988:	f7ff fca0 	bl	d52cc <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d598c:	a802      	add	r0, sp, #8
   d598e:	f7ff ffaf 	bl	d58f0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5992:	2800      	cmp	r0, #0
   d5994:	db04      	blt.n	d59a0 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d5996:	a902      	add	r1, sp, #8
   d5998:	6820      	ldr	r0, [r4, #0]
   d599a:	f7ff fb0e 	bl	d4fba <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d599e:	e004      	b.n	d59aa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d59a0:	4605      	mov	r5, r0
   d59a2:	e002      	b.n	d59aa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d59a4:	2500      	movs	r5, #0
   d59a6:	e000      	b.n	d59aa <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d59a8:	4d04      	ldr	r5, [pc, #16]	; (d59bc <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d59aa:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d59ae:	f7fe fd8b 	bl	d44c8 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d59b2:	4628      	mov	r0, r5
   d59b4:	b009      	add	sp, #36	; 0x24
   d59b6:	bd30      	pop	{r4, r5, pc}
   d59b8:	000d666d 	.word	0x000d666d
   d59bc:	fffffefc 	.word	0xfffffefc

000d59c0 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d59c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d59c4:	4605      	mov	r5, r0
   d59c6:	b08c      	sub	sp, #48	; 0x30
   d59c8:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d59ca:	460f      	mov	r7, r1
   d59cc:	b109      	cbz	r1, d59d2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d59ce:	780b      	ldrb	r3, [r1, #0]
   d59d0:	b90b      	cbnz	r3, d59d6 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d59d2:	4c35      	ldr	r4, [pc, #212]	; (d5aa8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d59d4:	e064      	b.n	d5aa0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d59d6:	4608      	mov	r0, r1
   d59d8:	f000 fc4c 	bl	d6274 <strlen>
   d59dc:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d59de:	2e00      	cmp	r6, #0
   d59e0:	d05c      	beq.n	d5a9c <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d59e2:	4630      	mov	r0, r6
   d59e4:	f000 fc46 	bl	d6274 <strlen>
   d59e8:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d59ea:	f108 0302 	add.w	r3, r8, #2
   d59ee:	4423      	add	r3, r4
   d59f0:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d59f4:	d84f      	bhi.n	d5a96 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d59f6:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d59fa:	f7ff feb1 	bl	d5760 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d59fe:	4628      	mov	r0, r5
   d5a00:	f7ff ff96 	bl	d5930 <_ZN5spark11MeshPublish14initialize_udpEv>
   d5a04:	2800      	cmp	r0, #0
   d5a06:	db40      	blt.n	d5a8a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d5a08:	4668      	mov	r0, sp
   d5a0a:	f7ff fc5f 	bl	d52cc <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5a0e:	4668      	mov	r0, sp
   d5a10:	f7ff ff6e 	bl	d58f0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5a14:	2800      	cmp	r0, #0
   d5a16:	db38      	blt.n	d5a8a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d5a18:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d5a1c:	f8da 3000 	ldr.w	r3, [sl]
   d5a20:	f10d 0c04 	add.w	ip, sp, #4
   d5a24:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d5a28:	4b20      	ldr	r3, [pc, #128]	; (d5aac <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d5a2a:	9306      	str	r3, [sp, #24]
   d5a2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5a30:	f10d 0e1c 	add.w	lr, sp, #28
   d5a34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5a38:	f8dc 3000 	ldr.w	r3, [ip]
   d5a3c:	f88e 3000 	strb.w	r3, [lr]
   d5a40:	f249 0269 	movw	r2, #36969	; 0x9069
   d5a44:	a906      	add	r1, sp, #24
   d5a46:	4650      	mov	r0, sl
   d5a48:	47c8      	blx	r9
   d5a4a:	2800      	cmp	r0, #0
   d5a4c:	db1d      	blt.n	d5a8a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d5a4e:	2300      	movs	r3, #0
   d5a50:	6828      	ldr	r0, [r5, #0]
   d5a52:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d5a56:	6803      	ldr	r3, [r0, #0]
   d5a58:	2201      	movs	r2, #1
   d5a5a:	68db      	ldr	r3, [r3, #12]
   d5a5c:	a906      	add	r1, sp, #24
   d5a5e:	4798      	blx	r3
   d5a60:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d5a62:	6803      	ldr	r3, [r0, #0]
   d5a64:	f108 0201 	add.w	r2, r8, #1
   d5a68:	68db      	ldr	r3, [r3, #12]
   d5a6a:	4639      	mov	r1, r7
   d5a6c:	4798      	blx	r3
    if (dataLen > 0) {
   d5a6e:	b12c      	cbz	r4, d5a7c <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d5a70:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d5a72:	6803      	ldr	r3, [r0, #0]
   d5a74:	4622      	mov	r2, r4
   d5a76:	68db      	ldr	r3, [r3, #12]
   d5a78:	4631      	mov	r1, r6
   d5a7a:	4798      	blx	r3
   d5a7c:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d5a7e:	6803      	ldr	r3, [r0, #0]
   d5a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a82:	4798      	blx	r3
   d5a84:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d5a88:	e000      	b.n	d5a8c <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d5a8a:	4604      	mov	r4, r0
   d5a8c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5a90:	f7fe fd1a 	bl	d44c8 <os_mutex_recursive_unlock>
   d5a94:	e004      	b.n	d5aa0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5a96:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d5a9a:	e001      	b.n	d5aa0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5a9c:	4634      	mov	r4, r6
   d5a9e:	e7a4      	b.n	d59ea <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	b00c      	add	sp, #48	; 0x30
   d5aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5aa8:	fffffef2 	.word	0xfffffef2
   d5aac:	000d6564 	.word	0x000d6564

000d5ab0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d5ab0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5ab4:	4604      	mov	r4, r0
   d5ab6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5aba:	460f      	mov	r7, r1
   d5abc:	4690      	mov	r8, r2
   d5abe:	f7ff fe4f 	bl	d5760 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d5ac2:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d5ac6:	b9fe      	cbnz	r6, d5b08 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5ac8:	491a      	ldr	r1, [pc, #104]	; (d5b34 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x84>)
   d5aca:	2014      	movs	r0, #20
   d5acc:	f000 fa0e 	bl	d5eec <_ZnwjRKSt9nothrow_t>
   d5ad0:	4605      	mov	r5, r0
   d5ad2:	b170      	cbz	r0, d5af2 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x42>

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d5ad4:	4b18      	ldr	r3, [pc, #96]	; (d5b38 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x88>)
   d5ad6:	6083      	str	r3, [r0, #8]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5ad8:	f44f 6340 	mov.w	r3, #3072	; 0xc00

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d5adc:	6006      	str	r6, [r0, #0]
   d5ade:	6046      	str	r6, [r0, #4]
   d5ae0:	60c4      	str	r4, [r0, #12]
   d5ae2:	7406      	strb	r6, [r0, #16]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5ae4:	2203      	movs	r2, #3
   d5ae6:	9301      	str	r3, [sp, #4]
   d5ae8:	9000      	str	r0, [sp, #0]
   d5aea:	4b14      	ldr	r3, [pc, #80]	; (d5b3c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8c>)
   d5aec:	4914      	ldr	r1, [pc, #80]	; (d5b40 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x90>)
   d5aee:	f7fe fcb3 	bl	d4458 <os_thread_create>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5af2:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d5af6:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5afa:	b12e      	cbz	r6, d5b08 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        }
    }

    ~Thread()
    {
        dispose();
   d5afc:	4630      	mov	r0, r6
   d5afe:	f7ff fdf5 	bl	d56ec <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b02:	4630      	mov	r0, r6
   d5b04:	f7fe facb 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d5b08:	4620      	mov	r0, r4
   d5b0a:	f7ff ff11 	bl	d5930 <_ZN5spark11MeshPublish14initialize_udpEv>
   d5b0e:	2800      	cmp	r0, #0
   d5b10:	db07      	blt.n	d5b22 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x72>
    CHECK(subscriptions.add(prefix, handler));
   d5b12:	4642      	mov	r2, r8
   d5b14:	4639      	mov	r1, r7
   d5b16:	1d20      	adds	r0, r4, #4
   d5b18:	f7ff feba 	bl	d5890 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d5b1c:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d5b20:	e000      	b.n	d5b24 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x74>
   d5b22:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5b24:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5b28:	f7fe fcce 	bl	d44c8 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d5b2c:	4628      	mov	r0, r5
   d5b2e:	b002      	add	sp, #8
   d5b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b34:	000d66c4 	.word	0x000d66c4
   d5b38:	000d5c55 	.word	0x000d5c55
   d5b3c:	000d5651 	.word	0x000d5651
   d5b40:	000d6671 	.word	0x000d6671

000d5b44 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b48:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d5b4a:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5b4e:	b08a      	sub	sp, #40	; 0x28
   d5b50:	4630      	mov	r0, r6
   d5b52:	f7ff fe05 	bl	d5760 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5b56:	682c      	ldr	r4, [r5, #0]
   d5b58:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5b5c:	f7fe fcb4 	bl	d44c8 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d5b60:	2c00      	cmp	r4, #0
   d5b62:	d063      	beq.n	d5c2c <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d5b64:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5b68:	b163      	cbz	r3, d5b84 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d5b6a:	6823      	ldr	r3, [r4, #0]
   d5b6c:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d5b70:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d5b72:	4620      	mov	r0, r4
   d5b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b78:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d5b7c:	47b8      	blx	r7
        if (len > 0) {
   d5b7e:	1e04      	subs	r4, r0, #0
   d5b80:	dc13      	bgt.n	d5baa <_ZN5spark11MeshPublish4pollEv+0x66>
   d5b82:	e056      	b.n	d5c32 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d5b84:	492d      	ldr	r1, [pc, #180]	; (d5c3c <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d5b86:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d5b8a:	f000 f9ad 	bl	d5ee8 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b8e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d5b92:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d5b96:	b113      	cbz	r3, d5b9e <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5b98:	4618      	mov	r0, r3
   d5b9a:	f7fe fa82 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d5b9e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5ba2:	2b00      	cmp	r3, #0
   d5ba4:	d1e1      	bne.n	d5b6a <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d5ba6:	4826      	ldr	r0, [pc, #152]	; (d5c40 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d5ba8:	e044      	b.n	d5c34 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d5baa:	2320      	movs	r3, #32
   d5bac:	4a25      	ldr	r2, [pc, #148]	; (d5c44 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d5bae:	9302      	str	r3, [sp, #8]
   d5bb0:	9200      	str	r2, [sp, #0]
   d5bb2:	2300      	movs	r3, #0
   d5bb4:	9401      	str	r4, [sp, #4]
   d5bb6:	aa02      	add	r2, sp, #8
   d5bb8:	4923      	ldr	r1, [pc, #140]	; (d5c48 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d5bba:	9303      	str	r3, [sp, #12]
   d5bbc:	2001      	movs	r0, #1
   d5bbe:	f7fe fda3 	bl	d4708 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5bc2:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d5bc6:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d5bc8:	781b      	ldrb	r3, [r3, #0]
   d5bca:	bb6b      	cbnz	r3, d5c28 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d5bcc:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d5bce:	4621      	mov	r1, r4
   d5bd0:	4638      	mov	r0, r7
   d5bd2:	f000 fb6c 	bl	d62ae <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d5bd6:	b338      	cbz	r0, d5c28 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5bd8:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5bda:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d5bdc:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5be0:	dd22      	ble.n	d5c28 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5be2:	5c3b      	ldrb	r3, [r7, r0]
   d5be4:	bb03      	cbnz	r3, d5c28 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d5be6:	3c01      	subs	r4, #1
   d5be8:	d00e      	beq.n	d5c08 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d5bea:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d5bee:	4621      	mov	r1, r4
   d5bf0:	4640      	mov	r0, r8
   d5bf2:	f000 fb5c 	bl	d62ae <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d5bf6:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5bf8:	2c00      	cmp	r4, #0
   d5bfa:	dd15      	ble.n	d5c28 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5bfc:	f818 3000 	ldrb.w	r3, [r8, r0]
   d5c00:	b993      	cbnz	r3, d5c28 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d5c02:	2c01      	cmp	r4, #1
   d5c04:	d002      	beq.n	d5c0c <_ZN5spark11MeshPublish4pollEv+0xc8>
   d5c06:	e00f      	b.n	d5c28 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5c08:	f8df 8044 	ldr.w	r8, [pc, #68]	; d5c50 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d5c0c:	4630      	mov	r0, r6
   d5c0e:	f7ff fda7 	bl	d5760 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d5c12:	4642      	mov	r2, r8
   d5c14:	4639      	mov	r1, r7
   d5c16:	1d28      	adds	r0, r5, #4
   d5c18:	f7ff fe43 	bl	d58a2 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d5c1c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5c20:	f7fe fc52 	bl	d44c8 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5c24:	2000      	movs	r0, #0
   d5c26:	e005      	b.n	d5c34 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d5c28:	4808      	ldr	r0, [pc, #32]	; (d5c4c <_ZN5spark11MeshPublish4pollEv+0x108>)
   d5c2a:	e003      	b.n	d5c34 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d5c2c:	2064      	movs	r0, #100	; 0x64
   d5c2e:	f7fe fbfb 	bl	d4428 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5c32:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d5c34:	b00a      	add	sp, #40	; 0x28
   d5c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c3a:	bf00      	nop
   d5c3c:	000d66c4 	.word	0x000d66c4
   d5c40:	fffffefc 	.word	0xfffffefc
   d5c44:	000d6680 	.word	0x000d6680
   d5c48:	000d6679 	.word	0x000d6679
   d5c4c:	fffffee8 	.word	0xfffffee8
   d5c50:	000d646a 	.word	0x000d646a

000d5c54 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d5c58:	4620      	mov	r0, r4
   d5c5a:	f7ff ff73 	bl	d5b44 <_ZN5spark11MeshPublish4pollEv>
   d5c5e:	e7fb      	b.n	d5c58 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d5c60 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5c60:	b538      	push	{r3, r4, r5, lr}
   d5c62:	4c0d      	ldr	r4, [pc, #52]	; (d5c98 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5c64:	4b0d      	ldr	r3, [pc, #52]	; (d5c9c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5c66:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5c68:	2500      	movs	r5, #0
   d5c6a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5c6c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5c70:	6063      	str	r3, [r4, #4]
   d5c72:	60a5      	str	r5, [r4, #8]
   d5c74:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c78:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5c7c:	f7fe fc14 	bl	d44a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5c80:	4b07      	ldr	r3, [pc, #28]	; (d5ca0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5c82:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5c86:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5c88:	4620      	mov	r0, r4
   d5c8a:	4a06      	ldr	r2, [pc, #24]	; (d5ca4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5c8c:	4906      	ldr	r1, [pc, #24]	; (d5ca8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5c92:	f000 b91b 	b.w	d5ecc <__aeabi_atexit>
   d5c96:	bf00      	nop
   d5c98:	2003e538 	.word	0x2003e538
   d5c9c:	000d6698 	.word	0x000d6698
   d5ca0:	000d6634 	.word	0x000d6634
   d5ca4:	2003e35c 	.word	0x2003e35c
   d5ca8:	000d572d 	.word	0x000d572d

000d5cac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5cac:	2300      	movs	r3, #0
   d5cae:	461a      	mov	r2, r3
   d5cb0:	6840      	ldr	r0, [r0, #4]
   d5cb2:	f7fe bd5f 	b.w	d4774 <network_connect>

000d5cb6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5cb6:	2200      	movs	r2, #0
   d5cb8:	2102      	movs	r1, #2
   d5cba:	6840      	ldr	r0, [r0, #4]
   d5cbc:	f7fe bd6a 	b.w	d4794 <network_disconnect>

000d5cc0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5cc0:	2200      	movs	r2, #0
   d5cc2:	4611      	mov	r1, r2
   d5cc4:	6840      	ldr	r0, [r0, #4]
   d5cc6:	f7fe bd5d 	b.w	d4784 <network_connecting>

000d5cca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5cca:	2200      	movs	r2, #0
   d5ccc:	4611      	mov	r1, r2
   d5cce:	6840      	ldr	r0, [r0, #4]
   d5cd0:	f7fe bd68 	b.w	d47a4 <network_ready>

000d5cd4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5cd4:	2300      	movs	r3, #0
   d5cd6:	461a      	mov	r2, r3
   d5cd8:	4619      	mov	r1, r3
   d5cda:	6840      	ldr	r0, [r0, #4]
   d5cdc:	f7fe bd6a 	b.w	d47b4 <network_on>

000d5ce0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5ce0:	2300      	movs	r3, #0
   d5ce2:	461a      	mov	r2, r3
   d5ce4:	4619      	mov	r1, r3
   d5ce6:	6840      	ldr	r0, [r0, #4]
   d5ce8:	f7fe bd6c 	b.w	d47c4 <network_off>

000d5cec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5cec:	2200      	movs	r2, #0
   d5cee:	f081 0101 	eor.w	r1, r1, #1
   d5cf2:	6840      	ldr	r0, [r0, #4]
   d5cf4:	f7fe bd6e 	b.w	d47d4 <network_listen>

000d5cf8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5cf8:	2200      	movs	r2, #0
   d5cfa:	6840      	ldr	r0, [r0, #4]
   d5cfc:	f7fe bd7a 	b.w	d47f4 <network_set_listen_timeout>

000d5d00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5d00:	2200      	movs	r2, #0
   d5d02:	4611      	mov	r1, r2
   d5d04:	6840      	ldr	r0, [r0, #4]
   d5d06:	f7fe bd7d 	b.w	d4804 <network_get_listen_timeout>

000d5d0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5d0a:	2200      	movs	r2, #0
   d5d0c:	4611      	mov	r1, r2
   d5d0e:	6840      	ldr	r0, [r0, #4]
   d5d10:	f7fe bd68 	b.w	d47e4 <network_listening>

000d5d14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5d14:	b570      	push	{r4, r5, r6, lr}
   d5d16:	b08c      	sub	sp, #48	; 0x30
   d5d18:	4614      	mov	r4, r2
   d5d1a:	4606      	mov	r6, r0
    IPAddress addr;
   d5d1c:	f7ff fad6 	bl	d52cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5d20:	ab0c      	add	r3, sp, #48	; 0x30
   d5d22:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5d24:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5d26:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	f7fe fb14 	bl	d4358 <netdb_getaddrinfo>
    if (!r && ai) {
   d5d30:	4601      	mov	r1, r0
   d5d32:	bb58      	cbnz	r0, d5d8c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5d34:	9b00      	ldr	r3, [sp, #0]
   d5d36:	b34b      	cbz	r3, d5d8c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5d38:	685a      	ldr	r2, [r3, #4]
   d5d3a:	2a02      	cmp	r2, #2
   d5d3c:	d00e      	beq.n	d5d5c <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5d3e:	2a0a      	cmp	r2, #10
   d5d40:	d124      	bne.n	d5d8c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5d42:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5d44:	2211      	movs	r2, #17
   d5d46:	a801      	add	r0, sp, #4
   d5d48:	f000 fa52 	bl	d61f0 <memset>
                a.v = 6;
   d5d4c:	2306      	movs	r3, #6
   d5d4e:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d52:	ad01      	add	r5, sp, #4
   d5d54:	f104 0308 	add.w	r3, r4, #8
   d5d58:	3418      	adds	r4, #24
   d5d5a:	e005      	b.n	d5d68 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d5c:	6959      	ldr	r1, [r3, #20]
   d5d5e:	4630      	mov	r0, r6
   d5d60:	3104      	adds	r1, #4
   d5d62:	f7ff faf6 	bl	d5352 <_ZN9IPAddressaSEPKh>
                break;
   d5d66:	e011      	b.n	d5d8c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d68:	6818      	ldr	r0, [r3, #0]
   d5d6a:	6859      	ldr	r1, [r3, #4]
   d5d6c:	462a      	mov	r2, r5
   d5d6e:	c203      	stmia	r2!, {r0, r1}
   d5d70:	3308      	adds	r3, #8
   d5d72:	42a3      	cmp	r3, r4
   d5d74:	4615      	mov	r5, r2
   d5d76:	d1f7      	bne.n	d5d68 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5d78:	a901      	add	r1, sp, #4
   d5d7a:	a806      	add	r0, sp, #24
   d5d7c:	ad07      	add	r5, sp, #28
   d5d7e:	f7ff fab3 	bl	d52e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d84:	1d34      	adds	r4, r6, #4
   d5d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d88:	682b      	ldr	r3, [r5, #0]
   d5d8a:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d5d8c:	9800      	ldr	r0, [sp, #0]
   d5d8e:	f7fe fadb 	bl	d4348 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d92:	4630      	mov	r0, r6
   d5d94:	b00c      	add	sp, #48	; 0x30
   d5d96:	bd70      	pop	{r4, r5, r6, pc}

000d5d98 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d98:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d9a:	4a03      	ldr	r2, [pc, #12]	; (d5da8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d9c:	601a      	str	r2, [r3, #0]
   d5d9e:	2200      	movs	r2, #0
   d5da0:	605a      	str	r2, [r3, #4]
   d5da2:	4770      	bx	lr
   d5da4:	2003e708 	.word	0x2003e708
   d5da8:	000d6698 	.word	0x000d6698

000d5dac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5dac:	b510      	push	{r4, lr}
   d5dae:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5db0:	480f      	ldr	r0, [pc, #60]	; (d5df0 <pinAvailable+0x44>)
   d5db2:	f7fe fdb9 	bl	d4928 <_ZN8SPIClass9isEnabledEv>
   d5db6:	b128      	cbz	r0, d5dc4 <pinAvailable+0x18>
   d5db8:	f1a4 030b 	sub.w	r3, r4, #11
   d5dbc:	2b02      	cmp	r3, #2
   d5dbe:	d801      	bhi.n	d5dc4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5dc0:	2000      	movs	r0, #0
   d5dc2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5dc4:	f000 f862 	bl	d5e8c <_Z19__fetch_global_Wirev>
   d5dc8:	f7ff fc3e 	bl	d5648 <_ZN7TwoWire9isEnabledEv>
   d5dcc:	b108      	cbz	r0, d5dd2 <pinAvailable+0x26>
   d5dce:	2c01      	cmp	r4, #1
   d5dd0:	d9f6      	bls.n	d5dc0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5dd2:	f7ff fbd5 	bl	d5580 <_Z22__fetch_global_Serial1v>
   d5dd6:	f7ff fbcf 	bl	d5578 <_ZN11USARTSerial9isEnabledEv>
   d5dda:	b118      	cbz	r0, d5de4 <pinAvailable+0x38>
   d5ddc:	f1a4 0309 	sub.w	r3, r4, #9
   d5de0:	2b01      	cmp	r3, #1
   d5de2:	d9ed      	bls.n	d5dc0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5de4:	2c23      	cmp	r4, #35	; 0x23
   d5de6:	bf8c      	ite	hi
   d5de8:	2000      	movhi	r0, #0
   d5dea:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5dec:	bd10      	pop	{r4, pc}
   d5dee:	bf00      	nop
   d5df0:	2003e710 	.word	0x2003e710

000d5df4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5df4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5df6:	b538      	push	{r3, r4, r5, lr}
   d5df8:	4604      	mov	r4, r0
   d5dfa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5dfc:	d80a      	bhi.n	d5e14 <pinMode+0x20>
   d5dfe:	29ff      	cmp	r1, #255	; 0xff
   d5e00:	d008      	beq.n	d5e14 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5e02:	f7ff ffd3 	bl	d5dac <pinAvailable>
   d5e06:	b128      	cbz	r0, d5e14 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5e08:	4629      	mov	r1, r5
   d5e0a:	4620      	mov	r0, r4
}
   d5e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5e10:	f7fe bab2 	b.w	d4378 <HAL_Pin_Mode>
   d5e14:	bd38      	pop	{r3, r4, r5, pc}

000d5e16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5e16:	b538      	push	{r3, r4, r5, lr}
   d5e18:	4604      	mov	r4, r0
   d5e1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e1c:	f7fe fab4 	bl	d4388 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5e20:	28ff      	cmp	r0, #255	; 0xff
   d5e22:	d010      	beq.n	d5e46 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5e24:	2806      	cmp	r0, #6
   d5e26:	d804      	bhi.n	d5e32 <digitalWrite+0x1c>
   d5e28:	234d      	movs	r3, #77	; 0x4d
   d5e2a:	fa23 f000 	lsr.w	r0, r3, r0
   d5e2e:	07c3      	lsls	r3, r0, #31
   d5e30:	d409      	bmi.n	d5e46 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7ff ffba 	bl	d5dac <pinAvailable>
   d5e38:	b128      	cbz	r0, d5e46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e3a:	4629      	mov	r1, r5
   d5e3c:	4620      	mov	r0, r4
}
   d5e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e42:	f7fe baa9 	b.w	d4398 <HAL_GPIO_Write>
   d5e46:	bd38      	pop	{r3, r4, r5, pc}

000d5e48 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5e48:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5e4a:	4c0c      	ldr	r4, [pc, #48]	; (d5e7c <_GLOBAL__sub_I_SPI+0x34>)
   d5e4c:	4e0c      	ldr	r6, [pc, #48]	; (d5e80 <_GLOBAL__sub_I_SPI+0x38>)
   d5e4e:	4d0d      	ldr	r5, [pc, #52]	; (d5e84 <_GLOBAL__sub_I_SPI+0x3c>)
   d5e50:	2100      	movs	r1, #0
   d5e52:	4620      	mov	r0, r4
   d5e54:	f7fe fd54 	bl	d4900 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5e58:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5e5a:	4c0b      	ldr	r4, [pc, #44]	; (d5e88 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5e5c:	4632      	mov	r2, r6
   d5e5e:	4629      	mov	r1, r5
   d5e60:	f000 f834 	bl	d5ecc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5e64:	2101      	movs	r1, #1
   d5e66:	4620      	mov	r0, r4
   d5e68:	f7fe fd4a 	bl	d4900 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5e6c:	4632      	mov	r2, r6
   d5e6e:	4629      	mov	r1, r5
   d5e70:	4620      	mov	r0, r4
   d5e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5e76:	f000 b829 	b.w	d5ecc <__aeabi_atexit>
   d5e7a:	bf00      	nop
   d5e7c:	2003e710 	.word	0x2003e710
   d5e80:	2003e35c 	.word	0x2003e35c
   d5e84:	000d48f1 	.word	0x000d48f1
   d5e88:	2003e720 	.word	0x2003e720

000d5e8c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5e8c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5e8e:	4d0b      	ldr	r5, [pc, #44]	; (d5ebc <_Z19__fetch_global_Wirev+0x30>)
   d5e90:	6829      	ldr	r1, [r5, #0]
   d5e92:	f011 0401 	ands.w	r4, r1, #1
   d5e96:	d10f      	bne.n	d5eb8 <_Z19__fetch_global_Wirev+0x2c>
   d5e98:	4628      	mov	r0, r5
   d5e9a:	f7fe f904 	bl	d40a6 <__cxa_guard_acquire>
   d5e9e:	b158      	cbz	r0, d5eb8 <_Z19__fetch_global_Wirev+0x2c>
   d5ea0:	4621      	mov	r1, r4
   d5ea2:	4807      	ldr	r0, [pc, #28]	; (d5ec0 <_Z19__fetch_global_Wirev+0x34>)
   d5ea4:	f7ff fbbe 	bl	d5624 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5ea8:	4628      	mov	r0, r5
   d5eaa:	f7fe f901 	bl	d40b0 <__cxa_guard_release>
   d5eae:	4a05      	ldr	r2, [pc, #20]	; (d5ec4 <_Z19__fetch_global_Wirev+0x38>)
   d5eb0:	4905      	ldr	r1, [pc, #20]	; (d5ec8 <_Z19__fetch_global_Wirev+0x3c>)
   d5eb2:	4803      	ldr	r0, [pc, #12]	; (d5ec0 <_Z19__fetch_global_Wirev+0x34>)
   d5eb4:	f000 f80a 	bl	d5ecc <__aeabi_atexit>
	return wire;
}
   d5eb8:	4801      	ldr	r0, [pc, #4]	; (d5ec0 <_Z19__fetch_global_Wirev+0x34>)
   d5eba:	bd38      	pop	{r3, r4, r5, pc}
   d5ebc:	2003e734 	.word	0x2003e734
   d5ec0:	2003e738 	.word	0x2003e738
   d5ec4:	2003e35c 	.word	0x2003e35c
   d5ec8:	000d55cd 	.word	0x000d55cd

000d5ecc <__aeabi_atexit>:
   d5ecc:	460b      	mov	r3, r1
   d5ece:	4601      	mov	r1, r0
   d5ed0:	4618      	mov	r0, r3
   d5ed2:	f000 b965 	b.w	d61a0 <__cxa_atexit>
	...

000d5ed8 <_ZSt15get_new_handlerv>:
   d5ed8:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <_ZSt15get_new_handlerv+0xc>)
   d5eda:	6818      	ldr	r0, [r3, #0]
   d5edc:	f3bf 8f5f 	dmb	sy
   d5ee0:	4770      	bx	lr
   d5ee2:	bf00      	nop
   d5ee4:	2003e74c 	.word	0x2003e74c

000d5ee8 <_ZnajRKSt9nothrow_t>:
   d5ee8:	f000 b800 	b.w	d5eec <_ZnwjRKSt9nothrow_t>

000d5eec <_ZnwjRKSt9nothrow_t>:
   d5eec:	b510      	push	{r4, lr}
   d5eee:	2800      	cmp	r0, #0
   d5ef0:	bf14      	ite	ne
   d5ef2:	4604      	movne	r4, r0
   d5ef4:	2401      	moveq	r4, #1
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	f7fe fc9c 	bl	d4834 <malloc>
   d5efc:	b920      	cbnz	r0, d5f08 <_ZnwjRKSt9nothrow_t+0x1c>
   d5efe:	f7ff ffeb 	bl	d5ed8 <_ZSt15get_new_handlerv>
   d5f02:	b108      	cbz	r0, d5f08 <_ZnwjRKSt9nothrow_t+0x1c>
   d5f04:	4780      	blx	r0
   d5f06:	e7f6      	b.n	d5ef6 <_ZnwjRKSt9nothrow_t+0xa>
   d5f08:	bd10      	pop	{r4, pc}

000d5f0a <_ZSt25__throw_bad_function_callv>:
   d5f0a:	b508      	push	{r3, lr}
   d5f0c:	f7fe fcaa 	bl	d4864 <abort>

000d5f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f10:	4b18      	ldr	r3, [pc, #96]	; (d5f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f12:	681a      	ldr	r2, [r3, #0]
   d5f14:	07d1      	lsls	r1, r2, #31
   d5f16:	bf5c      	itt	pl
   d5f18:	2201      	movpl	r2, #1
   d5f1a:	601a      	strpl	r2, [r3, #0]
   d5f1c:	4b16      	ldr	r3, [pc, #88]	; (d5f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f1e:	681a      	ldr	r2, [r3, #0]
   d5f20:	07d2      	lsls	r2, r2, #31
   d5f22:	bf5c      	itt	pl
   d5f24:	2201      	movpl	r2, #1
   d5f26:	601a      	strpl	r2, [r3, #0]
   d5f28:	4b14      	ldr	r3, [pc, #80]	; (d5f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f2a:	681a      	ldr	r2, [r3, #0]
   d5f2c:	07d0      	lsls	r0, r2, #31
   d5f2e:	bf5c      	itt	pl
   d5f30:	2201      	movpl	r2, #1
   d5f32:	601a      	strpl	r2, [r3, #0]
   d5f34:	4b12      	ldr	r3, [pc, #72]	; (d5f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f36:	681a      	ldr	r2, [r3, #0]
   d5f38:	07d1      	lsls	r1, r2, #31
   d5f3a:	bf5c      	itt	pl
   d5f3c:	2201      	movpl	r2, #1
   d5f3e:	601a      	strpl	r2, [r3, #0]
   d5f40:	4b10      	ldr	r3, [pc, #64]	; (d5f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f42:	681a      	ldr	r2, [r3, #0]
   d5f44:	07d2      	lsls	r2, r2, #31
   d5f46:	bf5c      	itt	pl
   d5f48:	2201      	movpl	r2, #1
   d5f4a:	601a      	strpl	r2, [r3, #0]
   d5f4c:	4b0e      	ldr	r3, [pc, #56]	; (d5f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f4e:	681a      	ldr	r2, [r3, #0]
   d5f50:	07d0      	lsls	r0, r2, #31
   d5f52:	bf5c      	itt	pl
   d5f54:	2201      	movpl	r2, #1
   d5f56:	601a      	strpl	r2, [r3, #0]
   d5f58:	4b0c      	ldr	r3, [pc, #48]	; (d5f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5f5a:	681a      	ldr	r2, [r3, #0]
   d5f5c:	07d1      	lsls	r1, r2, #31
   d5f5e:	bf5c      	itt	pl
   d5f60:	2201      	movpl	r2, #1
   d5f62:	601a      	strpl	r2, [r3, #0]
   d5f64:	4b0a      	ldr	r3, [pc, #40]	; (d5f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5f66:	681a      	ldr	r2, [r3, #0]
   d5f68:	07d2      	lsls	r2, r2, #31
   d5f6a:	bf5c      	itt	pl
   d5f6c:	2201      	movpl	r2, #1
   d5f6e:	601a      	strpl	r2, [r3, #0]
   d5f70:	4770      	bx	lr
   d5f72:	bf00      	nop
   d5f74:	2003e76c 	.word	0x2003e76c
   d5f78:	2003e768 	.word	0x2003e768
   d5f7c:	2003e764 	.word	0x2003e764
   d5f80:	2003e760 	.word	0x2003e760
   d5f84:	2003e75c 	.word	0x2003e75c
   d5f88:	2003e758 	.word	0x2003e758
   d5f8c:	2003e754 	.word	0x2003e754
   d5f90:	2003e750 	.word	0x2003e750

000d5f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5f94:	4b24      	ldr	r3, [pc, #144]	; (d6028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5f96:	681a      	ldr	r2, [r3, #0]
   d5f98:	07d0      	lsls	r0, r2, #31
   d5f9a:	bf5c      	itt	pl
   d5f9c:	2201      	movpl	r2, #1
   d5f9e:	601a      	strpl	r2, [r3, #0]
   d5fa0:	4b22      	ldr	r3, [pc, #136]	; (d602c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5fa2:	681a      	ldr	r2, [r3, #0]
   d5fa4:	07d1      	lsls	r1, r2, #31
   d5fa6:	bf5c      	itt	pl
   d5fa8:	2201      	movpl	r2, #1
   d5faa:	601a      	strpl	r2, [r3, #0]
   d5fac:	4b20      	ldr	r3, [pc, #128]	; (d6030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5fae:	681a      	ldr	r2, [r3, #0]
   d5fb0:	07d2      	lsls	r2, r2, #31
   d5fb2:	bf5c      	itt	pl
   d5fb4:	2201      	movpl	r2, #1
   d5fb6:	601a      	strpl	r2, [r3, #0]
   d5fb8:	4b1e      	ldr	r3, [pc, #120]	; (d6034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5fba:	681a      	ldr	r2, [r3, #0]
   d5fbc:	07d0      	lsls	r0, r2, #31
   d5fbe:	bf5c      	itt	pl
   d5fc0:	2201      	movpl	r2, #1
   d5fc2:	601a      	strpl	r2, [r3, #0]
   d5fc4:	4b1c      	ldr	r3, [pc, #112]	; (d6038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5fc6:	681a      	ldr	r2, [r3, #0]
   d5fc8:	07d1      	lsls	r1, r2, #31
   d5fca:	bf5c      	itt	pl
   d5fcc:	2201      	movpl	r2, #1
   d5fce:	601a      	strpl	r2, [r3, #0]
   d5fd0:	4b1a      	ldr	r3, [pc, #104]	; (d603c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5fd2:	681a      	ldr	r2, [r3, #0]
   d5fd4:	07d2      	lsls	r2, r2, #31
   d5fd6:	bf5c      	itt	pl
   d5fd8:	2201      	movpl	r2, #1
   d5fda:	601a      	strpl	r2, [r3, #0]
   d5fdc:	4b18      	ldr	r3, [pc, #96]	; (d6040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5fde:	681a      	ldr	r2, [r3, #0]
   d5fe0:	07d0      	lsls	r0, r2, #31
   d5fe2:	bf5c      	itt	pl
   d5fe4:	2201      	movpl	r2, #1
   d5fe6:	601a      	strpl	r2, [r3, #0]
   d5fe8:	4b16      	ldr	r3, [pc, #88]	; (d6044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5fea:	681a      	ldr	r2, [r3, #0]
   d5fec:	07d1      	lsls	r1, r2, #31
   d5fee:	bf5c      	itt	pl
   d5ff0:	2201      	movpl	r2, #1
   d5ff2:	601a      	strpl	r2, [r3, #0]
   d5ff4:	4b14      	ldr	r3, [pc, #80]	; (d6048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5ff6:	681a      	ldr	r2, [r3, #0]
   d5ff8:	07d2      	lsls	r2, r2, #31
   d5ffa:	bf5c      	itt	pl
   d5ffc:	2201      	movpl	r2, #1
   d5ffe:	601a      	strpl	r2, [r3, #0]
   d6000:	4b12      	ldr	r3, [pc, #72]	; (d604c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6002:	681a      	ldr	r2, [r3, #0]
   d6004:	07d0      	lsls	r0, r2, #31
   d6006:	bf5c      	itt	pl
   d6008:	2201      	movpl	r2, #1
   d600a:	601a      	strpl	r2, [r3, #0]
   d600c:	4b10      	ldr	r3, [pc, #64]	; (d6050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d600e:	681a      	ldr	r2, [r3, #0]
   d6010:	07d1      	lsls	r1, r2, #31
   d6012:	bf5c      	itt	pl
   d6014:	2201      	movpl	r2, #1
   d6016:	601a      	strpl	r2, [r3, #0]
   d6018:	4b0e      	ldr	r3, [pc, #56]	; (d6054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d601a:	681a      	ldr	r2, [r3, #0]
   d601c:	07d2      	lsls	r2, r2, #31
   d601e:	bf5c      	itt	pl
   d6020:	2201      	movpl	r2, #1
   d6022:	601a      	strpl	r2, [r3, #0]
   d6024:	4770      	bx	lr
   d6026:	bf00      	nop
   d6028:	2003e79c 	.word	0x2003e79c
   d602c:	2003e798 	.word	0x2003e798
   d6030:	2003e794 	.word	0x2003e794
   d6034:	2003e790 	.word	0x2003e790
   d6038:	2003e78c 	.word	0x2003e78c
   d603c:	2003e788 	.word	0x2003e788
   d6040:	2003e784 	.word	0x2003e784
   d6044:	2003e780 	.word	0x2003e780
   d6048:	2003e77c 	.word	0x2003e77c
   d604c:	2003e778 	.word	0x2003e778
   d6050:	2003e774 	.word	0x2003e774
   d6054:	2003e770 	.word	0x2003e770

000d6058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6058:	4b24      	ldr	r3, [pc, #144]	; (d60ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d0      	lsls	r0, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b22      	ldr	r3, [pc, #136]	; (d60f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d1      	lsls	r1, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4b20      	ldr	r3, [pc, #128]	; (d60f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	07d2      	lsls	r2, r2, #31
   d6076:	bf5c      	itt	pl
   d6078:	2201      	movpl	r2, #1
   d607a:	601a      	strpl	r2, [r3, #0]
   d607c:	4b1e      	ldr	r3, [pc, #120]	; (d60f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d607e:	681a      	ldr	r2, [r3, #0]
   d6080:	07d0      	lsls	r0, r2, #31
   d6082:	bf5c      	itt	pl
   d6084:	2201      	movpl	r2, #1
   d6086:	601a      	strpl	r2, [r3, #0]
   d6088:	4b1c      	ldr	r3, [pc, #112]	; (d60fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d608a:	681a      	ldr	r2, [r3, #0]
   d608c:	07d1      	lsls	r1, r2, #31
   d608e:	bf5c      	itt	pl
   d6090:	2201      	movpl	r2, #1
   d6092:	601a      	strpl	r2, [r3, #0]
   d6094:	4b1a      	ldr	r3, [pc, #104]	; (d6100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6096:	681a      	ldr	r2, [r3, #0]
   d6098:	07d2      	lsls	r2, r2, #31
   d609a:	bf5c      	itt	pl
   d609c:	2201      	movpl	r2, #1
   d609e:	601a      	strpl	r2, [r3, #0]
   d60a0:	4b18      	ldr	r3, [pc, #96]	; (d6104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d60a2:	681a      	ldr	r2, [r3, #0]
   d60a4:	07d0      	lsls	r0, r2, #31
   d60a6:	bf5c      	itt	pl
   d60a8:	2201      	movpl	r2, #1
   d60aa:	601a      	strpl	r2, [r3, #0]
   d60ac:	4b16      	ldr	r3, [pc, #88]	; (d6108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d60ae:	681a      	ldr	r2, [r3, #0]
   d60b0:	07d1      	lsls	r1, r2, #31
   d60b2:	bf5c      	itt	pl
   d60b4:	2201      	movpl	r2, #1
   d60b6:	601a      	strpl	r2, [r3, #0]
   d60b8:	4b14      	ldr	r3, [pc, #80]	; (d610c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d60ba:	681a      	ldr	r2, [r3, #0]
   d60bc:	07d2      	lsls	r2, r2, #31
   d60be:	bf5c      	itt	pl
   d60c0:	2201      	movpl	r2, #1
   d60c2:	601a      	strpl	r2, [r3, #0]
   d60c4:	4b12      	ldr	r3, [pc, #72]	; (d6110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d60c6:	681a      	ldr	r2, [r3, #0]
   d60c8:	07d0      	lsls	r0, r2, #31
   d60ca:	bf5c      	itt	pl
   d60cc:	2201      	movpl	r2, #1
   d60ce:	601a      	strpl	r2, [r3, #0]
   d60d0:	4b10      	ldr	r3, [pc, #64]	; (d6114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d60d2:	681a      	ldr	r2, [r3, #0]
   d60d4:	07d1      	lsls	r1, r2, #31
   d60d6:	bf5c      	itt	pl
   d60d8:	2201      	movpl	r2, #1
   d60da:	601a      	strpl	r2, [r3, #0]
   d60dc:	4b0e      	ldr	r3, [pc, #56]	; (d6118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d60de:	681a      	ldr	r2, [r3, #0]
   d60e0:	07d2      	lsls	r2, r2, #31
   d60e2:	bf5c      	itt	pl
   d60e4:	2201      	movpl	r2, #1
   d60e6:	601a      	strpl	r2, [r3, #0]
   d60e8:	4770      	bx	lr
   d60ea:	bf00      	nop
   d60ec:	2003e7cc 	.word	0x2003e7cc
   d60f0:	2003e7c8 	.word	0x2003e7c8
   d60f4:	2003e7c4 	.word	0x2003e7c4
   d60f8:	2003e7c0 	.word	0x2003e7c0
   d60fc:	2003e7bc 	.word	0x2003e7bc
   d6100:	2003e7b8 	.word	0x2003e7b8
   d6104:	2003e7b4 	.word	0x2003e7b4
   d6108:	2003e7b0 	.word	0x2003e7b0
   d610c:	2003e7ac 	.word	0x2003e7ac
   d6110:	2003e7a8 	.word	0x2003e7a8
   d6114:	2003e7a4 	.word	0x2003e7a4
   d6118:	2003e7a0 	.word	0x2003e7a0

000d611c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d611c:	4b18      	ldr	r3, [pc, #96]	; (d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d611e:	681a      	ldr	r2, [r3, #0]
   d6120:	07d1      	lsls	r1, r2, #31
   d6122:	bf5c      	itt	pl
   d6124:	2201      	movpl	r2, #1
   d6126:	601a      	strpl	r2, [r3, #0]
   d6128:	4b16      	ldr	r3, [pc, #88]	; (d6184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d612a:	681a      	ldr	r2, [r3, #0]
   d612c:	07d2      	lsls	r2, r2, #31
   d612e:	bf5c      	itt	pl
   d6130:	2201      	movpl	r2, #1
   d6132:	601a      	strpl	r2, [r3, #0]
   d6134:	4b14      	ldr	r3, [pc, #80]	; (d6188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6136:	681a      	ldr	r2, [r3, #0]
   d6138:	07d0      	lsls	r0, r2, #31
   d613a:	bf5c      	itt	pl
   d613c:	2201      	movpl	r2, #1
   d613e:	601a      	strpl	r2, [r3, #0]
   d6140:	4b12      	ldr	r3, [pc, #72]	; (d618c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6142:	681a      	ldr	r2, [r3, #0]
   d6144:	07d1      	lsls	r1, r2, #31
   d6146:	bf5c      	itt	pl
   d6148:	2201      	movpl	r2, #1
   d614a:	601a      	strpl	r2, [r3, #0]
   d614c:	4b10      	ldr	r3, [pc, #64]	; (d6190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d614e:	681a      	ldr	r2, [r3, #0]
   d6150:	07d2      	lsls	r2, r2, #31
   d6152:	bf5c      	itt	pl
   d6154:	2201      	movpl	r2, #1
   d6156:	601a      	strpl	r2, [r3, #0]
   d6158:	4b0e      	ldr	r3, [pc, #56]	; (d6194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d615a:	681a      	ldr	r2, [r3, #0]
   d615c:	07d0      	lsls	r0, r2, #31
   d615e:	bf5c      	itt	pl
   d6160:	2201      	movpl	r2, #1
   d6162:	601a      	strpl	r2, [r3, #0]
   d6164:	4b0c      	ldr	r3, [pc, #48]	; (d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6166:	681a      	ldr	r2, [r3, #0]
   d6168:	07d1      	lsls	r1, r2, #31
   d616a:	bf5c      	itt	pl
   d616c:	2201      	movpl	r2, #1
   d616e:	601a      	strpl	r2, [r3, #0]
   d6170:	4b0a      	ldr	r3, [pc, #40]	; (d619c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d2      	lsls	r2, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4770      	bx	lr
   d617e:	bf00      	nop
   d6180:	2003e7ec 	.word	0x2003e7ec
   d6184:	2003e7e8 	.word	0x2003e7e8
   d6188:	2003e7e4 	.word	0x2003e7e4
   d618c:	2003e7e0 	.word	0x2003e7e0
   d6190:	2003e7dc 	.word	0x2003e7dc
   d6194:	2003e7d8 	.word	0x2003e7d8
   d6198:	2003e7d4 	.word	0x2003e7d4
   d619c:	2003e7d0 	.word	0x2003e7d0

000d61a0 <__cxa_atexit>:
   d61a0:	b510      	push	{r4, lr}
   d61a2:	4c05      	ldr	r4, [pc, #20]	; (d61b8 <__cxa_atexit+0x18>)
   d61a4:	4613      	mov	r3, r2
   d61a6:	b12c      	cbz	r4, d61b4 <__cxa_atexit+0x14>
   d61a8:	460a      	mov	r2, r1
   d61aa:	4601      	mov	r1, r0
   d61ac:	2002      	movs	r0, #2
   d61ae:	f3af 8000 	nop.w
   d61b2:	bd10      	pop	{r4, pc}
   d61b4:	4620      	mov	r0, r4
   d61b6:	bd10      	pop	{r4, pc}
   d61b8:	00000000 	.word	0x00000000

000d61bc <memcmp>:
   d61bc:	b510      	push	{r4, lr}
   d61be:	3901      	subs	r1, #1
   d61c0:	4402      	add	r2, r0
   d61c2:	4290      	cmp	r0, r2
   d61c4:	d007      	beq.n	d61d6 <memcmp+0x1a>
   d61c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d61ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d61ce:	42a3      	cmp	r3, r4
   d61d0:	d0f7      	beq.n	d61c2 <memcmp+0x6>
   d61d2:	1b18      	subs	r0, r3, r4
   d61d4:	bd10      	pop	{r4, pc}
   d61d6:	2000      	movs	r0, #0
   d61d8:	bd10      	pop	{r4, pc}

000d61da <memcpy>:
   d61da:	b510      	push	{r4, lr}
   d61dc:	1e43      	subs	r3, r0, #1
   d61de:	440a      	add	r2, r1
   d61e0:	4291      	cmp	r1, r2
   d61e2:	d004      	beq.n	d61ee <memcpy+0x14>
   d61e4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d61e8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d61ec:	e7f8      	b.n	d61e0 <memcpy+0x6>
   d61ee:	bd10      	pop	{r4, pc}

000d61f0 <memset>:
   d61f0:	4402      	add	r2, r0
   d61f2:	4603      	mov	r3, r0
   d61f4:	4293      	cmp	r3, r2
   d61f6:	d002      	beq.n	d61fe <memset+0xe>
   d61f8:	f803 1b01 	strb.w	r1, [r3], #1
   d61fc:	e7fa      	b.n	d61f4 <memset+0x4>
   d61fe:	4770      	bx	lr

000d6200 <srand>:
   d6200:	b538      	push	{r3, r4, r5, lr}
   d6202:	4b12      	ldr	r3, [pc, #72]	; (d624c <srand+0x4c>)
   d6204:	681c      	ldr	r4, [r3, #0]
   d6206:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6208:	4605      	mov	r5, r0
   d620a:	b9d3      	cbnz	r3, d6242 <srand+0x42>
   d620c:	2018      	movs	r0, #24
   d620e:	f7fe fb11 	bl	d4834 <malloc>
   d6212:	f243 330e 	movw	r3, #13070	; 0x330e
   d6216:	63a0      	str	r0, [r4, #56]	; 0x38
   d6218:	8003      	strh	r3, [r0, #0]
   d621a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d621e:	8043      	strh	r3, [r0, #2]
   d6220:	f241 2334 	movw	r3, #4660	; 0x1234
   d6224:	8083      	strh	r3, [r0, #4]
   d6226:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d622a:	80c3      	strh	r3, [r0, #6]
   d622c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6230:	8103      	strh	r3, [r0, #8]
   d6232:	2305      	movs	r3, #5
   d6234:	8143      	strh	r3, [r0, #10]
   d6236:	230b      	movs	r3, #11
   d6238:	8183      	strh	r3, [r0, #12]
   d623a:	2201      	movs	r2, #1
   d623c:	2300      	movs	r3, #0
   d623e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6242:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6244:	2200      	movs	r2, #0
   d6246:	611d      	str	r5, [r3, #16]
   d6248:	615a      	str	r2, [r3, #20]
   d624a:	bd38      	pop	{r3, r4, r5, pc}
   d624c:	2003e358 	.word	0x2003e358

000d6250 <strcmp>:
   d6250:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6254:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6258:	2a01      	cmp	r2, #1
   d625a:	bf28      	it	cs
   d625c:	429a      	cmpcs	r2, r3
   d625e:	d0f7      	beq.n	d6250 <strcmp>
   d6260:	1ad0      	subs	r0, r2, r3
   d6262:	4770      	bx	lr

000d6264 <strcpy>:
   d6264:	4603      	mov	r3, r0
   d6266:	f811 2b01 	ldrb.w	r2, [r1], #1
   d626a:	f803 2b01 	strb.w	r2, [r3], #1
   d626e:	2a00      	cmp	r2, #0
   d6270:	d1f9      	bne.n	d6266 <strcpy+0x2>
   d6272:	4770      	bx	lr

000d6274 <strlen>:
   d6274:	4603      	mov	r3, r0
   d6276:	f813 2b01 	ldrb.w	r2, [r3], #1
   d627a:	2a00      	cmp	r2, #0
   d627c:	d1fb      	bne.n	d6276 <strlen+0x2>
   d627e:	1a18      	subs	r0, r3, r0
   d6280:	3801      	subs	r0, #1
   d6282:	4770      	bx	lr

000d6284 <strncmp>:
   d6284:	b530      	push	{r4, r5, lr}
   d6286:	b182      	cbz	r2, d62aa <strncmp+0x26>
   d6288:	1e45      	subs	r5, r0, #1
   d628a:	3901      	subs	r1, #1
   d628c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6290:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6294:	42a3      	cmp	r3, r4
   d6296:	d106      	bne.n	d62a6 <strncmp+0x22>
   d6298:	43ec      	mvns	r4, r5
   d629a:	4414      	add	r4, r2
   d629c:	42e0      	cmn	r0, r4
   d629e:	d001      	beq.n	d62a4 <strncmp+0x20>
   d62a0:	2b00      	cmp	r3, #0
   d62a2:	d1f3      	bne.n	d628c <strncmp+0x8>
   d62a4:	461c      	mov	r4, r3
   d62a6:	1b18      	subs	r0, r3, r4
   d62a8:	bd30      	pop	{r4, r5, pc}
   d62aa:	4610      	mov	r0, r2
   d62ac:	bd30      	pop	{r4, r5, pc}

000d62ae <strnlen>:
   d62ae:	b510      	push	{r4, lr}
   d62b0:	4603      	mov	r3, r0
   d62b2:	4401      	add	r1, r0
   d62b4:	428b      	cmp	r3, r1
   d62b6:	d004      	beq.n	d62c2 <strnlen+0x14>
   d62b8:	781a      	ldrb	r2, [r3, #0]
   d62ba:	1c5c      	adds	r4, r3, #1
   d62bc:	b10a      	cbz	r2, d62c2 <strnlen+0x14>
   d62be:	4623      	mov	r3, r4
   d62c0:	e7f8      	b.n	d62b4 <strnlen+0x6>
   d62c2:	1a18      	subs	r0, r3, r0
   d62c4:	bd10      	pop	{r4, pc}

000d62c6 <link_code_end>:
	...

000d62c8 <dynalib_user>:
   d62c8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d62d8:	0000 0000 554e 4c4c 6500 6576 746e 253d     ....NULL.event=%
   d62e8:	2073 6164 6174 253d 0073 6556 7372 6f69     s data=%s.Versio
   d62f8:	3a6e 2520 0073 6159 6472 4d20 6e6f 7469     n: %s.Yard Monit
   d6308:	726f 6920 696e 6974 6c61 7a69 6465 2e2e     or initialized..
   d6318:	2e2e 5200 6365 6569 6576 5f64 6f4e 6564     ...Recieved_Node
   d6328:	0073 6f4e 6564 4449 4700 5441 5745 5941     s.NodeID.GATEWAY
   d6338:	203a 6553 646e 6e69 2067 3c3c 473c 5445     : Sending <<<GET
   d6348:	4e20 444f 3e45 3e3e 7220 7165 6575 7473      NODE>>> request
   d6358:	4700 5445 4e5f 646f 7365 4500 706d 7974     .GET_Nodes.Empty
   d6368:	4e20 646f 2065 696c 7473 2121 0021 4f4e      Node list!!!.NO
   d6378:	4544 203a 6425 202c 4449 203a 7325 4d00          DE: %d, ID: %s.

000d6387 <_ZL7version>:
   d6387:	454d 4853 595f 5241 5f44 4f4d 494e 4f54     MESH_YARD_MONITO
   d6397:	5f52 3076 302e 312e 0000                         R_v0.0.1.

000d63a0 <_ZTVN5spark13EthernetClassE>:
	...
   d63a8:	48d3 000d 48c9 000d 48bf 000d 48b5 000d     .H...H...H...H..
   d63b8:	48a9 000d 489d 000d 4891 000d 4889 000d     .H...H...H...H..
   d63c8:	487f 000d 4875 000d 5d15 000d               .H..uH...]..

000d63d4 <_ZTV8SPIClass>:
	...
   d63dc:	48f1 000d 48f3 000d                         .H...H..

000d63e4 <_ZTV3UDP>:
	...
   d63ec:	4f85 000d 4fa9 000d 4969 000d 4a93 000d     .O...O..iI...J..
   d63fc:	4961 000d 497f 000d 499d 000d 49b7 000d     aI...I...I...I..
   d640c:	49db 000d 4a77 000d 4d79 000d 4b19 000d     .I..wJ..yM...K..
   d641c:	4c99 000d 4949 000d 4f1f 000d 4c1d 000d     .L..II...O...L..
   d642c:	4b51 000d 4f4d 000d 4abd 000d 4957 000d     QK..MO...J..WI..
   d643c:	4af9 000d 495d 000d 49b9 000d fff0 ffff     .J..]I...I......
   d644c:	0000 0000 49d3 000d 0066 6e6c 6600 006e     .....I..f.ln.fn.
   d645c:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d646c:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d647c:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d648c:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
   d649c:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d64ac:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d64bc:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d64cc:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d64dc:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d64ec:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d64fc:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d650c:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d651c:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d652c:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
   d653c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d654c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d655c <_ZTV9IPAddress>:
	...
   d6564:	5267 000d 5259 000d 525b 000d               gR..YR..[R..

000d6570 <_ZTV9USBSerial>:
	...
   d6578:	536d 000d 53b1 000d 538b 000d 4fd3 000d     mS...S...S...O..
   d6588:	5385 000d 536f 000d 5377 000d 53ab 000d     .S..oS..wS...S..
   d6598:	537f 000d 5369 000d                         .S..iS..

000d65a0 <_ZTVN5spark13CellularClassE>:
	...
   d65a8:	54af 000d 54a5 000d 549b 000d 5451 000d     .T...T...T..QT..
   d65b8:	548f 000d 5483 000d 5477 000d 546f 000d     .T...T..wT..oT..
   d65c8:	5465 000d 545b 000d 5d15 000d               eT..[T...]..

000d65d4 <_ZTV11USARTSerial>:
	...
   d65dc:	54f9 000d 551d 000d 5529 000d 4fd3 000d     .T...U..)U...O..
   d65ec:	5505 000d 5511 000d 550b 000d 5517 000d     .U...U...U...U..
   d65fc:	54fb 000d 54ff 000d                         .T...T..

000d6604 <_ZTV7TwoWire>:
	...
   d660c:	55cd 000d 5617 000d 55ef 000d 55cf 000d     .U...V...U...U..
   d661c:	55f7 000d 55ff 000d 5607 000d 560f 000d     .U...U...V...V..

000d662c <_ZTVN5spark9MeshClassE>:
	...
   d6634:	56d9 000d 56cf 000d 56c5 000d 56bb 000d     .V...V...V...V..
   d6644:	56af 000d 56a3 000d 5697 000d 568f 000d     .V...V...V...V..
   d6654:	5685 000d 567b 000d 5d15 000d 6666 3330     .V..{V...]..ff03
   d6664:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d6674:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d6684:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d6690 <_ZTVN5spark12NetworkClassE>:
	...
   d6698:	5cad 000d 5cb7 000d 5cc1 000d 5ccb 000d     .\...\...\...\..
   d66a8:	5cd5 000d 5ce1 000d 5ced 000d 5cf9 000d     .\...\...\...\..
   d66b8:	5d01 000d 5d0b 000d 5d15 000d               .]...]...]..

000d66c4 <_ZSt7nothrow>:
   d66c4:	0000 0000                                   ....

000d66c8 <__sf_fake_stdin>:
	...

000d66e8 <__sf_fake_stdout>:
	...

000d6708 <__sf_fake_stderr>:
	...
   d6728:	0043                                        C.

000d672a <link_const_variable_data_end>:
	...

000d672c <link_constructors_location>:
   d672c:	000d4321 	.word	0x000d4321
   d6730:	000d48dd 	.word	0x000d48dd
   d6734:	000d4931 	.word	0x000d4931
   d6738:	000d5125 	.word	0x000d5125
   d673c:	000d5135 	.word	0x000d5135
   d6740:	000d5169 	.word	0x000d5169
   d6744:	000d54b9 	.word	0x000d54b9
   d6748:	000d5c61 	.word	0x000d5c61
   d674c:	000d5d99 	.word	0x000d5d99
   d6750:	000d5e49 	.word	0x000d5e49
   d6754:	000d5f11 	.word	0x000d5f11
   d6758:	000d5f95 	.word	0x000d5f95
   d675c:	000d6059 	.word	0x000d6059
   d6760:	000d611d 	.word	0x000d611d

000d6764 <link_constructors_end>:
	...

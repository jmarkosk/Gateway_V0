
c:/Users/jasonma.Vecima/Documents/particle/boron/GATEWAY_V0/Gateway_V0/target/Gateway_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000166d8  2**0
                  CONTENTS
  3 .data         0000006c  2003e2f8  000d6640  0000e2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000048c  2003e364  2003e364  0001e364  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d66ac  000d66ac  000166ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d66d4  000d66d4  000166d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0008a4f7  00000000  00000000  000166d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d6ba  00000000  00000000  000a0bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010074  00000000  00000000  000ae289  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d58  00000000  00000000  000be2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002c90  00000000  00000000  000c0055  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00030b57  00000000  00000000  000c2ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002091b  00000000  00000000  000f383c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000cf7cc  00000000  00000000  00114157  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b1d8  00000000  00000000  001e3924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	cc 61 0d 00                                         .a..

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f868 	bl	d6102 <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f86d 	bl	d6118 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2f8 	.word	0x2003e2f8
   d4048:	000d6640 	.word	0x000d6640
   d404c:	2003e364 	.word	0x2003e364
   d4050:	2003e364 	.word	0x2003e364
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	f001 f877 	bl	d514c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6640 	.word	0x000d6640
   d4080:	000d6608 	.word	0x000d6608

000d4084 <module_user_setup>:
   d4084:	f000 b82e 	b.w	d40e4 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 f877 	bl	d417c <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f001 b829 	b.w	d50e8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb61 	b.w	d475c <malloc>

000d409a <_Znaj>:
   d409a:	f000 bb5f 	b.w	d475c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bb65 	b.w	d476c <free>

000d40a2 <_ZdaPv>:
   d40a2:	f000 bb63 	b.w	d476c <free>

000d40a6 <__cxa_guard_acquire>:
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z12ProcessNodesPKcS0_>:
  }

}

void ProcessNodes(const char *event, const char *data)
{
   d40b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ba:	4605      	mov	r5, r0
   d40bc:	460c      	mov	r4, r1
  Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
   d40be:	f001 f935 	bl	d532c <_Z16_fetch_usbserialv>
   d40c2:	4906      	ldr	r1, [pc, #24]	; (d40dc <_Z12ProcessNodesPKcS0_+0x24>)
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40c4:	4a06      	ldr	r2, [pc, #24]	; (d40e0 <_Z12ProcessNodesPKcS0_+0x28>)
   d40c6:	2c00      	cmp	r4, #0
   d40c8:	bf08      	it	eq
   d40ca:	460c      	moveq	r4, r1
   d40cc:	9400      	str	r4, [sp, #0]
   d40ce:	462b      	mov	r3, r5
   d40d0:	2101      	movs	r1, #1
   d40d2:	f000 ff80 	bl	d4fd6 <_ZN5Print11printf_implEbPKcz>
   d40d6:	b003      	add	sp, #12
   d40d8:	bd30      	pop	{r4, r5, pc}
   d40da:	bf00      	nop
   d40dc:	000d61e0 	.word	0x000d61e0
   d40e0:	000d61e5 	.word	0x000d61e5

000d40e4 <setup>:





void setup() {
   d40e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Put initialization like pinMode and begin functions here.
    Serial.begin(9600);
   d40e6:	f001 f921 	bl	d532c <_Z16_fetch_usbserialv>
   d40ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ee:	f001 f90d 	bl	d530c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d40f2:	2000      	movs	r0, #0
   d40f4:	f000 f93c 	bl	d4370 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d40f8:	2500      	movs	r5, #0
   d40fa:	4604      	mov	r4, r0
   d40fc:	f247 562f 	movw	r6, #29999	; 0x752f
   d4100:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4102:	2000      	movs	r0, #0
   d4104:	f000 f934 	bl	d4370 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4108:	1b00      	subs	r0, r0, r4
   d410a:	eb61 0105 	sbc.w	r1, r1, r5
   d410e:	428f      	cmp	r7, r1
   d4110:	bf08      	it	eq
   d4112:	4286      	cmpeq	r6, r0
   d4114:	d307      	bcc.n	d4126 <setup+0x42>
    waitFor(Serial.isConnected, 30000);
   d4116:	f001 f909 	bl	d532c <_Z16_fetch_usbserialv>
   d411a:	f001 f8fb 	bl	d5314 <_ZN9USBSerial11isConnectedEv>
   d411e:	b910      	cbnz	r0, d4126 <setup+0x42>
            spark_process();
   d4120:	f000 fb0c 	bl	d473c <spark_process>
   d4124:	e7ed      	b.n	d4102 <setup+0x1e>
   d4126:	f001 f901 	bl	d532c <_Z16_fetch_usbserialv>
   d412a:	f001 f8f3 	bl	d5314 <_ZN9USBSerial11isConnectedEv>
    Serial.printlnf("Version: %s", version);
   d412e:	f001 f8fd 	bl	d532c <_Z16_fetch_usbserialv>
   d4132:	4b0c      	ldr	r3, [pc, #48]	; (d4164 <setup+0x80>)
   d4134:	4a0c      	ldr	r2, [pc, #48]	; (d4168 <setup+0x84>)
   d4136:	2101      	movs	r1, #1
   d4138:	f000 ff4d 	bl	d4fd6 <_ZN5Print11printf_implEbPKcz>
    Serial.println("Yard Monitor initialized....");
   d413c:	f001 f8f6 	bl	d532c <_Z16_fetch_usbserialv>
   d4140:	490a      	ldr	r1, [pc, #40]	; (d416c <setup+0x88>)
   d4142:	f000 ff0f 	bl	d4f64 <_ZN5Print7printlnEPKc>
    pinMode(HB_LED, OUTPUT);
   d4146:	2101      	movs	r1, #1
   d4148:	2007      	movs	r0, #7
   d414a:	f001 fde7 	bl	d5d1c <pinMode>
    pinMode(MESH_STATS_LED, OUTPUT);
   d414e:	2101      	movs	r1, #1
   d4150:	2006      	movs	r0, #6
   d4152:	f001 fde3 	bl	d5d1c <pinMode>
    
    Mesh.subscribe("Recieved_Nodes", ProcessNodes);
   d4156:	4a06      	ldr	r2, [pc, #24]	; (d4170 <setup+0x8c>)
   d4158:	4906      	ldr	r1, [pc, #24]	; (d4174 <setup+0x90>)
   d415a:	4807      	ldr	r0, [pc, #28]	; (d4178 <setup+0x94>)
    //Mesh.publish("GET_Nodes");
    



}
   d415c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.printlnf("Version: %s", version);
    Serial.println("Yard Monitor initialized....");
    pinMode(HB_LED, OUTPUT);
    pinMode(MESH_STATS_LED, OUTPUT);
    
    Mesh.subscribe("Recieved_Nodes", ProcessNodes);
   d4160:	f001 bc3a 	b.w	d59d8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d4164:	000d6260 	.word	0x000d6260
   d4168:	000d61f6 	.word	0x000d61f6
   d416c:	000d6202 	.word	0x000d6202
   d4170:	000d40b9 	.word	0x000d40b9
   d4174:	000d621f 	.word	0x000d621f
   d4178:	2003e540 	.word	0x2003e540

000d417c <loop>:
}

void ProcessNodes(const char *, const char *);

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
   d417e:	4c27      	ldr	r4, [pc, #156]	; (d421c <loop+0xa0>)
   d4180:	4e27      	ldr	r6, [pc, #156]	; (d4220 <loop+0xa4>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4182:	f000 f8ed 	bl	d4360 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastTime >= TIME_INTERVAL){
    lastTime = millis();
    heartbeat = 1;
  }
*/
  if(timeElapsed > TIME_INTERVAL)
   d4186:	6823      	ldr	r3, [r4, #0]
   d4188:	1ac0      	subs	r0, r0, r3
   d418a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d418e:	d904      	bls.n	d419a <loop+0x1e>
  {
     heartbeat = 1;
   d4190:	2301      	movs	r3, #1
   d4192:	7033      	strb	r3, [r6, #0]
   d4194:	f000 f8e4 	bl	d4360 <HAL_Timer_Get_Milli_Seconds>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
   d4198:	6020      	str	r0, [r4, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
   d419a:	4d22      	ldr	r5, [pc, #136]	; (d4224 <loop+0xa8>)
   d419c:	4c22      	ldr	r4, [pc, #136]	; (d4228 <loop+0xac>)
   d419e:	f000 f8df 	bl	d4360 <HAL_Timer_Get_Milli_Seconds>
     timeElapsed = 0;
  }
  
  if(timeElapsed2 > TIME_INTERVAL2)
   d41a2:	682b      	ldr	r3, [r5, #0]
   d41a4:	1ac0      	subs	r0, r0, r3
   d41a6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d41aa:	d904      	bls.n	d41b6 <loop+0x3a>
  {
     heartbeat2 = 1;
   d41ac:	2301      	movs	r3, #1
   d41ae:	7023      	strb	r3, [r4, #0]
   d41b0:	f000 f8d6 	bl	d4360 <HAL_Timer_Get_Milli_Seconds>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
   d41b4:	6028      	str	r0, [r5, #0]
     timeElapsed2 = 0;
  }



  if(heartbeat2 && heartbeat_blocking2){
   d41b6:	7823      	ldrb	r3, [r4, #0]
   d41b8:	b1db      	cbz	r3, d41f2 <loop+0x76>
   d41ba:	4d1c      	ldr	r5, [pc, #112]	; (d422c <loop+0xb0>)
   d41bc:	782b      	ldrb	r3, [r5, #0]
   d41be:	b1c3      	cbz	r3, d41f2 <loop+0x76>
    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
   d41c0:	4b1b      	ldr	r3, [pc, #108]	; (d4230 <loop+0xb4>)
   d41c2:	7819      	ldrb	r1, [r3, #0]
  }



  if(heartbeat2 && heartbeat_blocking2){
    heartbeat_blocking2 = 0;
   d41c4:	2400      	movs	r4, #0
    gLedstate2 = !gLedstate2;   
   d41c6:	f081 0101 	eor.w	r1, r1, #1
    digitalWrite(MESH_STATS_LED,gLedstate2);
   d41ca:	2006      	movs	r0, #6



  if(heartbeat2 && heartbeat_blocking2){
    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
   d41cc:	7019      	strb	r1, [r3, #0]
  }



  if(heartbeat2 && heartbeat_blocking2){
    heartbeat_blocking2 = 0;
   d41ce:	702c      	strb	r4, [r5, #0]
    gLedstate2 = !gLedstate2;   
    digitalWrite(MESH_STATS_LED,gLedstate2);
   d41d0:	f001 fdb5 	bl	d5d3e <digitalWrite>
    heartbeat_blocking2 = 1;
    heartbeat2 = 0;
   d41d4:	4b14      	ldr	r3, [pc, #80]	; (d4228 <loop+0xac>)

  if(heartbeat2 && heartbeat_blocking2){
    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
    digitalWrite(MESH_STATS_LED,gLedstate2);
    heartbeat_blocking2 = 1;
   d41d6:	2701      	movs	r7, #1
    heartbeat2 = 0;
   d41d8:	701c      	strb	r4, [r3, #0]

  if(heartbeat2 && heartbeat_blocking2){
    heartbeat_blocking2 = 0;
    gLedstate2 = !gLedstate2;   
    digitalWrite(MESH_STATS_LED,gLedstate2);
    heartbeat_blocking2 = 1;
   d41da:	702f      	strb	r7, [r5, #0]
    heartbeat2 = 0;
    Serial.printlnf("GATEWAY: Sending <<<GET NODE>>> request");
   d41dc:	f001 f8a6 	bl	d532c <_Z16_fetch_usbserialv>
   d41e0:	4a14      	ldr	r2, [pc, #80]	; (d4234 <loop+0xb8>)
   d41e2:	4639      	mov	r1, r7
   d41e4:	f000 fef7 	bl	d4fd6 <_ZN5Print11printf_implEbPKcz>
    Mesh.publish("GET_Nodes");
   d41e8:	4622      	mov	r2, r4
   d41ea:	4913      	ldr	r1, [pc, #76]	; (d4238 <loop+0xbc>)
   d41ec:	4813      	ldr	r0, [pc, #76]	; (d423c <loop+0xc0>)
   d41ee:	f001 fb7b 	bl	d58e8 <_ZN5spark11MeshPublish7publishEPKcS2_>
  }

    if(heartbeat && heartbeat_blocking){
   d41f2:	7833      	ldrb	r3, [r6, #0]
   d41f4:	b183      	cbz	r3, d4218 <loop+0x9c>
   d41f6:	4c12      	ldr	r4, [pc, #72]	; (d4240 <loop+0xc4>)
   d41f8:	7823      	ldrb	r3, [r4, #0]
   d41fa:	b16b      	cbz	r3, d4218 <loop+0x9c>
    heartbeat_blocking = 0;
    gLedstate = !gLedstate;
   d41fc:	4b11      	ldr	r3, [pc, #68]	; (d4244 <loop+0xc8>)
   d41fe:	7819      	ldrb	r1, [r3, #0]
    Serial.printlnf("GATEWAY: Sending <<<GET NODE>>> request");
    Mesh.publish("GET_Nodes");
  }

    if(heartbeat && heartbeat_blocking){
    heartbeat_blocking = 0;
   d4200:	2500      	movs	r5, #0
    gLedstate = !gLedstate;
   d4202:	f081 0101 	eor.w	r1, r1, #1
    digitalWrite(HB_LED,gLedstate);    
   d4206:	2007      	movs	r0, #7
    Mesh.publish("GET_Nodes");
  }

    if(heartbeat && heartbeat_blocking){
    heartbeat_blocking = 0;
    gLedstate = !gLedstate;
   d4208:	7019      	strb	r1, [r3, #0]
    Serial.printlnf("GATEWAY: Sending <<<GET NODE>>> request");
    Mesh.publish("GET_Nodes");
  }

    if(heartbeat && heartbeat_blocking){
    heartbeat_blocking = 0;
   d420a:	7025      	strb	r5, [r4, #0]
    gLedstate = !gLedstate;
    digitalWrite(HB_LED,gLedstate);    
   d420c:	f001 fd97 	bl	d5d3e <digitalWrite>
    heartbeat_blocking = 1;
   d4210:	2301      	movs	r3, #1
   d4212:	7023      	strb	r3, [r4, #0]
    heartbeat = 0;
   d4214:	4b02      	ldr	r3, [pc, #8]	; (d4220 <loop+0xa4>)
   d4216:	701d      	strb	r5, [r3, #0]
   d4218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d421a:	bf00      	nop
   d421c:	2003e374 	.word	0x2003e374
   d4220:	2003e369 	.word	0x2003e369
   d4224:	2003e36c 	.word	0x2003e36c
   d4228:	2003e370 	.word	0x2003e370
   d422c:	2003e2f9 	.word	0x2003e2f9
   d4230:	2003e368 	.word	0x2003e368
   d4234:	000d622e 	.word	0x000d622e
   d4238:	000d6256 	.word	0x000d6256
   d423c:	2003e540 	.word	0x2003e540
   d4240:	2003e2f8 	.word	0x2003e2f8
   d4244:	2003e378 	.word	0x2003e378

000d4248 <_GLOBAL__sub_I_gNumberofNodes>:
}

void ProcessNodes(const char *event, const char *data)
{
  Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
   d4248:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d424a:	f000 f821 	bl	d4290 <HAL_Pin_Map>
 * Author:
 * Date:
 */
#include "elapsedMillis.h"

SYSTEM_THREAD(ENABLED);
   d424e:	2100      	movs	r1, #0
   d4250:	2001      	movs	r0, #1
   d4252:	f000 f9fd 	bl	d4650 <system_thread_set_state>
   d4256:	f000 f883 	bl	d4360 <HAL_Timer_Get_Milli_Seconds>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
   d425a:	4b03      	ldr	r3, [pc, #12]	; (d4268 <_GLOBAL__sub_I_gNumberofNodes+0x20>)
   d425c:	6018      	str	r0, [r3, #0]
   d425e:	f000 f87f 	bl	d4360 <HAL_Timer_Get_Milli_Seconds>
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <_GLOBAL__sub_I_gNumberofNodes+0x24>)
   d4264:	6018      	str	r0, [r3, #0]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	2003e374 	.word	0x2003e374
   d426c:	2003e36c 	.word	0x2003e36c

000d4270 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <netdb_freeaddrinfo+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	689b      	ldr	r3, [r3, #8]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	00030268 	.word	0x00030268

000d4280 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <netdb_getaddrinfo+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	68db      	ldr	r3, [r3, #12]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	00030268 	.word	0x00030268

000d4290 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <HAL_Pin_Map+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	681b      	ldr	r3, [r3, #0]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	0003022c 	.word	0x0003022c

000d42a0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <HAL_Pin_Mode+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	689b      	ldr	r3, [r3, #8]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	0003022c 	.word	0x0003022c

000d42b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_Get_Pin_Mode+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	68db      	ldr	r3, [r3, #12]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	0003022c 	.word	0x0003022c

000d42c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_GPIO_Write+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	691b      	ldr	r3, [r3, #16]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003022c 	.word	0x0003022c

000d42d0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <HAL_SPI_Init+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	69db      	ldr	r3, [r3, #28]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030230 	.word	0x00030230

000d42e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <HAL_SPI_Is_Enabled+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	6a1b      	ldr	r3, [r3, #32]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030230 	.word	0x00030230

000d42f0 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <if_name_to_index+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	691b      	ldr	r3, [r3, #16]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	0003026c 	.word	0x0003026c

000d4300 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <if_index_to_name+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	695b      	ldr	r3, [r3, #20]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	0003026c 	.word	0x0003026c

000d4310 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <if_get_by_index+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	699b      	ldr	r3, [r3, #24]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003026c 	.word	0x0003026c

000d4320 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <if_get_addrs+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003026c 	.word	0x0003026c

000d4330 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <if_free_if_addrs+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003026c 	.word	0x0003026c

000d4340 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_RNG_GetRandomNumber+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	685b      	ldr	r3, [r3, #4]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030218 	.word	0x00030218

000d4350 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_Delay_Milliseconds+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	689b      	ldr	r3, [r3, #8]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030218 	.word	0x00030218

000d4360 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	695b      	ldr	r3, [r3, #20]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030218 	.word	0x00030218

000d4370 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <hal_timer_millis+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	00030218 	.word	0x00030218

000d4380 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <os_thread_create+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	685b      	ldr	r3, [r3, #4]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030248 	.word	0x00030248

000d4390 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <os_thread_is_current+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	689b      	ldr	r3, [r3, #8]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030248 	.word	0x00030248

000d43a0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <os_thread_join+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	691b      	ldr	r3, [r3, #16]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030248 	.word	0x00030248

000d43b0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <os_thread_cleanup+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	695b      	ldr	r3, [r3, #20]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030248 	.word	0x00030248

000d43c0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <os_mutex_create+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030248 	.word	0x00030248

000d43d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <os_mutex_recursive_create+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030248 	.word	0x00030248

000d43e0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <os_mutex_recursive_lock+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030248 	.word	0x00030248

000d43f0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <os_mutex_recursive_unlock+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030248 	.word	0x00030248

000d4400 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <os_thread_exit+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030248 	.word	0x00030248

000d4410 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <inet_inet_ntop+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	695b      	ldr	r3, [r3, #20]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030264 	.word	0x00030264

000d4420 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <inet_inet_pton+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	699b      	ldr	r3, [r3, #24]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030264 	.word	0x00030264

000d4430 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <inet_htonl+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	6a1b      	ldr	r3, [r3, #32]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030264 	.word	0x00030264

000d4440 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <inet_ntohs+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030264 	.word	0x00030264

000d4450 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <inet_htons+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	00030264 	.word	0x00030264

000d4460 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USART_Init+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	681b      	ldr	r3, [r3, #0]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_USART_Write_Data+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	68db      	ldr	r3, [r3, #12]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003023c 	.word	0x0003023c

000d4480 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USART_Available_Data+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	691b      	ldr	r3, [r3, #16]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003023c 	.word	0x0003023c

000d4490 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USART_Read_Data+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	695b      	ldr	r3, [r3, #20]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003023c 	.word	0x0003023c

000d44a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USART_Peek_Data+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	699b      	ldr	r3, [r3, #24]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003023c 	.word	0x0003023c

000d44b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_USART_Flush_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	69db      	ldr	r3, [r3, #28]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003023c 	.word	0x0003023c

000d44c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_USART_Is_Enabled+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6a1b      	ldr	r3, [r3, #32]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	0003023c 	.word	0x0003023c

000d44d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_USART_Available_Data_For_Write+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	0003023c 	.word	0x0003023c

000d44e0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_I2C_Write_Data+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	6a1b      	ldr	r3, [r3, #32]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030228 	.word	0x00030228

000d44f0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_I2C_Available_Data+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030228 	.word	0x00030228

000d4500 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_I2C_Read_Data+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030228 	.word	0x00030228

000d4510 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_I2C_Peek_Data+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030228 	.word	0x00030228

000d4520 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_I2C_Flush_Data+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030228 	.word	0x00030228

000d4530 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_I2C_Is_Enabled+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030228 	.word	0x00030228

000d4540 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_I2C_Init+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030228 	.word	0x00030228

000d4550 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <sock_bind+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	685b      	ldr	r3, [r3, #4]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030238 	.word	0x00030238

000d4560 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <sock_setsockopt+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	699b      	ldr	r3, [r3, #24]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030238 	.word	0x00030238

000d4570 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <sock_close+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	69db      	ldr	r3, [r3, #28]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030238 	.word	0x00030238

000d4580 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <sock_recvfrom+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030238 	.word	0x00030238

000d4590 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <sock_sendto+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030238 	.word	0x00030238

000d45a0 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <sock_socket+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030238 	.word	0x00030238

000d45b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_USB_USART_Init+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	681b      	ldr	r3, [r3, #0]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003024c 	.word	0x0003024c

000d45c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_USB_USART_Begin+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	685b      	ldr	r3, [r3, #4]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003024c 	.word	0x0003024c

000d45d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_USB_USART_Available_Data+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	691b      	ldr	r3, [r3, #16]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003024c 	.word	0x0003024c

000d45e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	695b      	ldr	r3, [r3, #20]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003024c 	.word	0x0003024c

000d45f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USB_USART_Receive_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	699b      	ldr	r3, [r3, #24]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003024c 	.word	0x0003024c

000d4600 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_USB_USART_Send_Data+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	69db      	ldr	r3, [r3, #28]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003024c 	.word	0x0003024c

000d4610 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_USB_USART_Flush_Data+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6a1b      	ldr	r3, [r3, #32]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003024c 	.word	0x0003024c

000d4620 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_USB_USART_Is_Connected+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	0003024c 	.word	0x0003024c

000d4630 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <log_message+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030260 	.word	0x00030260

000d4640 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <set_system_mode+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	685b      	ldr	r3, [r3, #4]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030220 	.word	0x00030220

000d4650 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <system_thread_set_state+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030220 	.word	0x00030220

000d4660 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b03      	ldr	r3, [pc, #12]	; (d4670 <system_ctrl_set_app_request_handler+0x10>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d466a:	9301      	str	r3, [sp, #4]
   d466c:	bd08      	pop	{r3, pc}
   d466e:	0000      	.short	0x0000
   d4670:	00030220 	.word	0x00030220

000d4674 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b03      	ldr	r3, [pc, #12]	; (d4684 <system_ctrl_set_result+0x10>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d467e:	9301      	str	r3, [sp, #4]
   d4680:	bd08      	pop	{r3, pc}
   d4682:	0000      	.short	0x0000
   d4684:	00030220 	.word	0x00030220

000d4688 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b03      	ldr	r3, [pc, #12]	; (d4698 <system_invoke_event_handler+0x10>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4692:	9301      	str	r3, [sp, #4]
   d4694:	bd08      	pop	{r3, pc}
   d4696:	0000      	.short	0x0000
   d4698:	00030220 	.word	0x00030220

000d469c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <network_connect+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	685b      	ldr	r3, [r3, #4]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030240 	.word	0x00030240

000d46ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <network_connecting+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	689b      	ldr	r3, [r3, #8]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030240 	.word	0x00030240

000d46bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <network_disconnect+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	68db      	ldr	r3, [r3, #12]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030240 	.word	0x00030240

000d46cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <network_ready+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	691b      	ldr	r3, [r3, #16]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030240 	.word	0x00030240

000d46dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <network_on+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	695b      	ldr	r3, [r3, #20]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030240 	.word	0x00030240

000d46ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <network_off+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	699b      	ldr	r3, [r3, #24]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030240 	.word	0x00030240

000d46fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <network_listen+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	69db      	ldr	r3, [r3, #28]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030240 	.word	0x00030240

000d470c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <network_listening+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	6a1b      	ldr	r3, [r3, #32]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030240 	.word	0x00030240

000d471c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <network_set_listen_timeout+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030240 	.word	0x00030240

000d472c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <network_get_listen_timeout+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030240 	.word	0x00030240

000d473c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <spark_process+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	689b      	ldr	r3, [r3, #8]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030244 	.word	0x00030244

000d474c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030244 	.word	0x00030244

000d475c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <malloc+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	681b      	ldr	r3, [r3, #0]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003021c 	.word	0x0003021c

000d476c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <free+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	685b      	ldr	r3, [r3, #4]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003021c 	.word	0x0003021c

000d477c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <vsnprintf+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003021c 	.word	0x0003021c

000d478c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <abort+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003021c 	.word	0x0003021c

000d479c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d479c:	2200      	movs	r2, #0
   d479e:	4611      	mov	r1, r2
   d47a0:	6840      	ldr	r0, [r0, #4]
   d47a2:	f7ff bfb3 	b.w	d470c <network_listening>

000d47a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d47a6:	2200      	movs	r2, #0
   d47a8:	4611      	mov	r1, r2
   d47aa:	6840      	ldr	r0, [r0, #4]
   d47ac:	f7ff bfbe 	b.w	d472c <network_get_listen_timeout>

000d47b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d47b0:	2200      	movs	r2, #0
   d47b2:	6840      	ldr	r0, [r0, #4]
   d47b4:	f7ff bfb2 	b.w	d471c <network_set_listen_timeout>

000d47b8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d47b8:	2200      	movs	r2, #0
   d47ba:	f081 0101 	eor.w	r1, r1, #1
   d47be:	6840      	ldr	r0, [r0, #4]
   d47c0:	f7ff bf9c 	b.w	d46fc <network_listen>

000d47c4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d47c4:	2300      	movs	r3, #0
   d47c6:	461a      	mov	r2, r3
   d47c8:	4619      	mov	r1, r3
   d47ca:	6840      	ldr	r0, [r0, #4]
   d47cc:	f7ff bf8e 	b.w	d46ec <network_off>

000d47d0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d47d0:	2300      	movs	r3, #0
   d47d2:	461a      	mov	r2, r3
   d47d4:	4619      	mov	r1, r3
   d47d6:	6840      	ldr	r0, [r0, #4]
   d47d8:	f7ff bf80 	b.w	d46dc <network_on>

000d47dc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47dc:	2200      	movs	r2, #0
   d47de:	4611      	mov	r1, r2
   d47e0:	6840      	ldr	r0, [r0, #4]
   d47e2:	f7ff bf73 	b.w	d46cc <network_ready>

000d47e6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d47e6:	2200      	movs	r2, #0
   d47e8:	4611      	mov	r1, r2
   d47ea:	6840      	ldr	r0, [r0, #4]
   d47ec:	f7ff bf5e 	b.w	d46ac <network_connecting>

000d47f0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47f0:	2200      	movs	r2, #0
   d47f2:	2102      	movs	r1, #2
   d47f4:	6840      	ldr	r0, [r0, #4]
   d47f6:	f7ff bf61 	b.w	d46bc <network_disconnect>

000d47fa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d47fa:	2300      	movs	r3, #0
   d47fc:	461a      	mov	r2, r3
   d47fe:	6840      	ldr	r0, [r0, #4]
   d4800:	f7ff bf4c 	b.w	d469c <network_connect>

000d4804 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4804:	4b02      	ldr	r3, [pc, #8]	; (d4810 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4806:	2203      	movs	r2, #3
   d4808:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d480a:	4a02      	ldr	r2, [pc, #8]	; (d4814 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d480c:	601a      	str	r2, [r3, #0]
   d480e:	4770      	bx	lr
   d4810:	2003e37c 	.word	0x2003e37c
   d4814:	000d6284 	.word	0x000d6284

000d4818 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4818:	4770      	bx	lr

000d481a <_ZN8SPIClassD0Ev>:
   d481a:	b510      	push	{r4, lr}
   d481c:	4604      	mov	r4, r0
   d481e:	f7ff fc3e 	bl	d409e <_ZdlPv>
   d4822:	4620      	mov	r0, r4
   d4824:	bd10      	pop	{r4, pc}
	...

000d4828 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4828:	b570      	push	{r4, r5, r6, lr}
   d482a:	4b08      	ldr	r3, [pc, #32]	; (d484c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d482c:	6003      	str	r3, [r0, #0]
   d482e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4830:	2500      	movs	r5, #0
   d4832:	460e      	mov	r6, r1
   d4834:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4838:	f7ff fdc2 	bl	d43c0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d483c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d483e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4840:	f7ff fd46 	bl	d42d0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4844:	60a5      	str	r5, [r4, #8]
}
   d4846:	4620      	mov	r0, r4
   d4848:	bd70      	pop	{r4, r5, r6, pc}
   d484a:	bf00      	nop
   d484c:	000d62b8 	.word	0x000d62b8

000d4850 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4850:	7900      	ldrb	r0, [r0, #4]
   d4852:	f7ff bd45 	b.w	d42e0 <HAL_SPI_Is_Enabled>
	...

000d4858 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4858:	4b04      	ldr	r3, [pc, #16]	; (d486c <_GLOBAL__sub_I_System+0x14>)
   d485a:	2000      	movs	r0, #0
   d485c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4860:	7018      	strb	r0, [r3, #0]
   d4862:	8058      	strh	r0, [r3, #2]
   d4864:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4866:	f7ff beeb 	b.w	d4640 <set_system_mode>
   d486a:	bf00      	nop
   d486c:	2003e384 	.word	0x2003e384

000d4870 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4870:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4872:	6804      	ldr	r4, [r0, #0]
   d4874:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4876:	46a4      	mov	ip, r4
    }
   d4878:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d487c:	4760      	bx	ip

000d487e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d487e:	6803      	ldr	r3, [r0, #0]
   d4880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4882:	4718      	bx	r3

000d4884 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4884:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4886:	4770      	bx	lr

000d4888 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4888:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d488a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d488c:	1a10      	subs	r0, r2, r0
   d488e:	4770      	bx	lr

000d4890 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4890:	b513      	push	{r0, r1, r4, lr}
   d4892:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4894:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4896:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d489a:	68d4      	ldr	r4, [r2, #12]
   d489c:	4619      	mov	r1, r3
   d489e:	2201      	movs	r2, #1
   d48a0:	47a0      	blx	r4
}
   d48a2:	b002      	add	sp, #8
   d48a4:	bd10      	pop	{r4, pc}

000d48a6 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d48a6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d48a8:	6803      	ldr	r3, [r0, #0]
   d48aa:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d48ac:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d48ae:	4798      	blx	r3
   d48b0:	b128      	cbz	r0, d48be <_ZN3UDP4readEv+0x18>
   d48b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d48b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d48b6:	1c59      	adds	r1, r3, #1
   d48b8:	86e1      	strh	r1, [r4, #54]	; 0x36
   d48ba:	5cd0      	ldrb	r0, [r2, r3]
   d48bc:	bd10      	pop	{r4, pc}
   d48be:	f04f 30ff 	mov.w	r0, #4294967295
}
   d48c2:	bd10      	pop	{r4, pc}

000d48c4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d48c4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d48c6:	6803      	ldr	r3, [r0, #0]
   d48c8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d48ca:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d48cc:	4798      	blx	r3
   d48ce:	b118      	cbz	r0, d48d8 <_ZN3UDP4peekEv+0x14>
   d48d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d48d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d48d4:	5cd0      	ldrb	r0, [r2, r3]
   d48d6:	bd10      	pop	{r4, pc}
   d48d8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d48dc:	bd10      	pop	{r4, pc}

000d48de <_ZN3UDP5flushEv>:

void UDP::flush() {
   d48de:	4770      	bx	lr

000d48e0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d48e0:	b410      	push	{r4}
   d48e2:	4603      	mov	r3, r0
   d48e4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d48e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d48e8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d48ea:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d48ec:	6803      	ldr	r3, [r0, #0]
   d48ee:	1a52      	subs	r2, r2, r1
   d48f0:	68db      	ldr	r3, [r3, #12]
   d48f2:	4421      	add	r1, r4
}
   d48f4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d48f8:	4718      	bx	r3

000d48fa <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d48fa:	f1a0 0010 	sub.w	r0, r0, #16
   d48fe:	f7ff bfef 	b.w	d48e0 <_ZNK3UDP7printToER5Print>

000d4902 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4902:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4904:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4906:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4908:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d490c:	4604      	mov	r4, r0
   d490e:	460f      	mov	r7, r1
   d4910:	4615      	mov	r5, r2
    stop();
   d4912:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d4914:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4916:	4632      	mov	r2, r6
   d4918:	2100      	movs	r1, #0
   d491a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d491c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d491e:	f001 fbfb 	bl	d6118 <memset>
    saddr.sin6_len = sizeof(saddr);
   d4922:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4926:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4928:	260a      	movs	r6, #10
   d492a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d492e:	f7ff fd8f 	bl	d4450 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4932:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4934:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4938:	2102      	movs	r1, #2
   d493a:	4630      	mov	r0, r6
   d493c:	f7ff fe30 	bl	d45a0 <sock_socket>

    if (_sock < 0) {
   d4940:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4942:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d4944:	db24      	blt.n	d4990 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4946:	2204      	movs	r2, #4
   d4948:	9200      	str	r2, [sp, #0]
   d494a:	ab02      	add	r3, sp, #8
   d494c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4950:	f7ff fe06 	bl	d4560 <sock_setsockopt>
   d4954:	b9e0      	cbnz	r0, d4990 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d4956:	b195      	cbz	r5, d497e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d4958:	9003      	str	r0, [sp, #12]
   d495a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d495e:	a903      	add	r1, sp, #12
   d4960:	b2e8      	uxtb	r0, r5
   d4962:	f7ff fccd 	bl	d4300 <if_index_to_name>
   d4966:	b998      	cbnz	r0, d4990 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4968:	2306      	movs	r3, #6
   d496a:	9300      	str	r3, [sp, #0]
   d496c:	f241 020b 	movw	r2, #4107	; 0x100b
   d4970:	ab03      	add	r3, sp, #12
   d4972:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4976:	6960      	ldr	r0, [r4, #20]
   d4978:	f7ff fdf2 	bl	d4560 <sock_setsockopt>
   d497c:	b940      	cbnz	r0, d4990 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d497e:	221c      	movs	r2, #28
   d4980:	a905      	add	r1, sp, #20
   d4982:	6960      	ldr	r0, [r4, #20]
   d4984:	f7ff fde4 	bl	d4550 <sock_bind>
   d4988:	b910      	cbnz	r0, d4990 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d498a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d498c:	2001      	movs	r0, #1
   d498e:	e004      	b.n	d499a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d4990:	6823      	ldr	r3, [r4, #0]
   d4992:	4620      	mov	r0, r4
   d4994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4996:	4798      	blx	r3
   d4998:	2000      	movs	r0, #0
    }
    return bound;
}
   d499a:	b00d      	add	sp, #52	; 0x34
   d499c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d499e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d499e:	b510      	push	{r4, lr}
   d49a0:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d49a2:	6940      	ldr	r0, [r0, #20]
   d49a4:	2800      	cmp	r0, #0
   d49a6:	db01      	blt.n	d49ac <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d49a8:	f7ff fde2 	bl	d4570 <sock_close>
    }

    _sock = -1;
   d49ac:	f04f 33ff 	mov.w	r3, #4294967295
   d49b0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d49b2:	2300      	movs	r3, #0
   d49b4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d49b6:	8723      	strh	r3, [r4, #56]	; 0x38
   d49b8:	bd10      	pop	{r4, pc}

000d49ba <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d49ba:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d49bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d49be:	4605      	mov	r5, r0
   d49c0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d49c2:	b113      	cbz	r3, d49ca <_ZN3UDP5writeEPKhj+0x10>
   d49c4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d49c6:	1a24      	subs	r4, r4, r0
   d49c8:	e000      	b.n	d49cc <_ZN3UDP5writeEPKhj+0x12>
   d49ca:	461c      	mov	r4, r3
   d49cc:	4294      	cmp	r4, r2
   d49ce:	bf28      	it	cs
   d49d0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d49d2:	4622      	mov	r2, r4
   d49d4:	4418      	add	r0, r3
   d49d6:	f001 fb94 	bl	d6102 <memcpy>
    _offset += size;
   d49da:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d49dc:	4423      	add	r3, r4
   d49de:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d49e0:	4620      	mov	r0, r4
   d49e2:	bd38      	pop	{r3, r4, r5, pc}

000d49e4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d49e4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d49e6:	6803      	ldr	r3, [r0, #0]
   d49e8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d49ea:	4604      	mov	r4, r0
   d49ec:	460e      	mov	r6, r1
   d49ee:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d49f0:	4798      	blx	r3
   d49f2:	b188      	cbz	r0, d4a18 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d49f4:	6823      	ldr	r3, [r4, #0]
   d49f6:	4620      	mov	r0, r4
   d49f8:	691b      	ldr	r3, [r3, #16]
   d49fa:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d49fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d49fe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4a00:	4285      	cmp	r5, r0
   d4a02:	bfa8      	it	ge
   d4a04:	4605      	movge	r5, r0
   d4a06:	4419      	add	r1, r3
   d4a08:	462a      	mov	r2, r5
   d4a0a:	4630      	mov	r0, r6
   d4a0c:	f001 fb79 	bl	d6102 <memcpy>
        _offset += read;
   d4a10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4a12:	442b      	add	r3, r5
   d4a14:	86e3      	strh	r3, [r4, #54]	; 0x36
   d4a16:	e001      	b.n	d4a1c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d4a18:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d4a1c:	4628      	mov	r0, r5
   d4a1e:	bd70      	pop	{r4, r5, r6, pc}

000d4a20 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d4a20:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4a22:	4604      	mov	r4, r0
   d4a24:	4b05      	ldr	r3, [pc, #20]	; (d4a3c <_ZN3UDP8remoteIPEv+0x1c>)
   d4a26:	f844 3b04 	str.w	r3, [r4], #4
   d4a2a:	f101 0520 	add.w	r5, r1, #32
   d4a2e:	4606      	mov	r6, r0
   d4a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a34:	682b      	ldr	r3, [r5, #0]
   d4a36:	7023      	strb	r3, [r4, #0]
   d4a38:	4630      	mov	r0, r6
   d4a3a:	bd70      	pop	{r4, r5, r6, pc}
   d4a3c:	000d6440 	.word	0x000d6440

000d4a40 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4a42:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4a44:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4a46:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4a48:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d4a4a:	4a0a      	ldr	r2, [pc, #40]	; (d4a74 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d4a4c:	9202      	str	r2, [sp, #8]
   d4a4e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4a50:	468e      	mov	lr, r1
   d4a52:	4606      	mov	r6, r0
   d4a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a56:	ac03      	add	r4, sp, #12
   d4a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a5a:	682b      	ldr	r3, [r5, #0]
   d4a5c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4a5e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4a62:	9300      	str	r3, [sp, #0]
   d4a64:	4662      	mov	r2, ip
   d4a66:	ab02      	add	r3, sp, #8
   d4a68:	4671      	mov	r1, lr
   d4a6a:	4630      	mov	r0, r6
   d4a6c:	47b8      	blx	r7
    }
   d4a6e:	b009      	add	sp, #36	; 0x24
   d4a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a72:	bf00      	nop
   d4a74:	000d6440 	.word	0x000d6440

000d4a78 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4a7a:	6803      	ldr	r3, [r0, #0]
   d4a7c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d4a80:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4a82:	4b0d      	ldr	r3, [pc, #52]	; (d4ab8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4a84:	b089      	sub	sp, #36	; 0x24
   d4a86:	f100 0620 	add.w	r6, r0, #32
   d4a8a:	4604      	mov	r4, r0
   d4a8c:	9302      	str	r3, [sp, #8]
   d4a8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4a90:	ad03      	add	r5, sp, #12
   d4a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4a94:	6833      	ldr	r3, [r6, #0]
   d4a96:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4a98:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d4a9a:	9300      	str	r3, [sp, #0]
   d4a9c:	4672      	mov	r2, lr
   d4a9e:	ab02      	add	r3, sp, #8
   d4aa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	47b8      	blx	r7
    flush(); // wait for send to complete
   d4aa6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4aa8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d4aaa:	69db      	ldr	r3, [r3, #28]
   d4aac:	4620      	mov	r0, r4
   d4aae:	4798      	blx	r3
    return result;
}
   d4ab0:	4628      	mov	r0, r5
   d4ab2:	b009      	add	sp, #36	; 0x24
   d4ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ab6:	bf00      	nop
   d4ab8:	000d6440 	.word	0x000d6440

000d4abc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d4abe:	7843      	ldrb	r3, [r0, #1]
   d4ac0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4ac2:	b08d      	sub	sp, #52	; 0x34
   d4ac4:	4605      	mov	r5, r0
   d4ac6:	460c      	mov	r4, r1
   d4ac8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d4aca:	d101      	bne.n	d4ad0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d4acc:	1d01      	adds	r1, r0, #4
   d4ace:	e033      	b.n	d4b38 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d4ad0:	2b0a      	cmp	r3, #10
   d4ad2:	d135      	bne.n	d4b40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d4ad4:	2211      	movs	r2, #17
   d4ad6:	2100      	movs	r1, #0
   d4ad8:	a801      	add	r0, sp, #4
   d4ada:	f001 fb1d 	bl	d6118 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d4ade:	68ab      	ldr	r3, [r5, #8]
   d4ae0:	b943      	cbnz	r3, d4af4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4ae2:	68eb      	ldr	r3, [r5, #12]
   d4ae4:	b933      	cbnz	r3, d4af4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4ae6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d4aea:	692e      	ldr	r6, [r5, #16]
   d4aec:	f7ff fca0 	bl	d4430 <inet_htonl>
   d4af0:	4286      	cmp	r6, r0
   d4af2:	d01f      	beq.n	d4b34 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4af4:	f105 0308 	add.w	r3, r5, #8
   d4af8:	ae01      	add	r6, sp, #4
   d4afa:	f105 0e18 	add.w	lr, r5, #24
   d4afe:	6818      	ldr	r0, [r3, #0]
   d4b00:	6859      	ldr	r1, [r3, #4]
   d4b02:	4632      	mov	r2, r6
   d4b04:	c203      	stmia	r2!, {r0, r1}
   d4b06:	3308      	adds	r3, #8
   d4b08:	4573      	cmp	r3, lr
   d4b0a:	4616      	mov	r6, r2
   d4b0c:	d1f7      	bne.n	d4afe <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d4b0e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d4b10:	a901      	add	r1, sp, #4
   d4b12:	a806      	add	r0, sp, #24
   d4b14:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d4b16:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d4b1a:	f000 fb79 	bl	d5210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4b1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4b20:	3404      	adds	r4, #4
   d4b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b24:	6833      	ldr	r3, [r6, #0]
   d4b26:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d4b28:	b157      	cbz	r7, d4b40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d4b2a:	8868      	ldrh	r0, [r5, #2]
   d4b2c:	f7ff fc88 	bl	d4440 <inet_ntohs>
   d4b30:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d4b32:	e005      	b.n	d4b40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d4b34:	f105 0114 	add.w	r1, r5, #20
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f000 fb9e 	bl	d527a <_ZN9IPAddressaSEPKh>
   d4b3e:	e7f3      	b.n	d4b28 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d4b40:	b00d      	add	sp, #52	; 0x34
   d4b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b44 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b48:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d4b4a:	ab0e      	add	r3, sp, #56	; 0x38
   d4b4c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4b4e:	4606      	mov	r6, r0
   d4b50:	4617      	mov	r7, r2
   d4b52:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d4b54:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d4b58:	462a      	mov	r2, r5
   d4b5a:	4629      	mov	r1, r5
   d4b5c:	f7ff fb90 	bl	d4280 <netdb_getaddrinfo>
   d4b60:	2800      	cmp	r0, #0
   d4b62:	db1f      	blt.n	d4ba4 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d4b64:	9b01      	ldr	r3, [sp, #4]
   d4b66:	b1fb      	cbz	r3, d4ba8 <_ZN3UDP11beginPacketEPKct+0x64>
   d4b68:	695b      	ldr	r3, [r3, #20]
   d4b6a:	b1eb      	cbz	r3, d4ba8 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d4b6c:	a802      	add	r0, sp, #8
   d4b6e:	f000 fb41 	bl	d51f4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d4b72:	9b01      	ldr	r3, [sp, #4]
   d4b74:	462a      	mov	r2, r5
   d4b76:	6958      	ldr	r0, [r3, #20]
   d4b78:	a902      	add	r1, sp, #8
   d4b7a:	f7ff ff9f 	bl	d4abc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d4b7e:	a802      	add	r0, sp, #8
   d4b80:	f000 fb58 	bl	d5234 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d4b84:	b180      	cbz	r0, d4ba8 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d4b86:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4b88:	ad03      	add	r5, sp, #12
   d4b8a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d4b8e:	4b0b      	ldr	r3, [pc, #44]	; (d4bbc <_ZN3UDP11beginPacketEPKct+0x78>)
   d4b90:	9308      	str	r3, [sp, #32]
   d4b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b94:	ac09      	add	r4, sp, #36	; 0x24
   d4b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b98:	682b      	ldr	r3, [r5, #0]
   d4b9a:	7023      	strb	r3, [r4, #0]
   d4b9c:	463a      	mov	r2, r7
   d4b9e:	a908      	add	r1, sp, #32
   d4ba0:	4630      	mov	r0, r6
   d4ba2:	47c0      	blx	r8
   d4ba4:	4604      	mov	r4, r0
   d4ba6:	e001      	b.n	d4bac <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d4ba8:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d4bac:	9801      	ldr	r0, [sp, #4]
   d4bae:	f7ff fb5f 	bl	d4270 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	b00e      	add	sp, #56	; 0x38
   d4bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4bba:	bf00      	nop
   d4bbc:	000d6440 	.word	0x000d6440

000d4bc0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4bc4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d4bc8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4bcc:	b08c      	sub	sp, #48	; 0x30
   d4bce:	4605      	mov	r5, r0
   d4bd0:	460c      	mov	r4, r1
   d4bd2:	4617      	mov	r7, r2
   d4bd4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4bd6:	db00      	blt.n	d4bda <_ZN3UDP13receivePacketEPhjm+0x1a>
   d4bd8:	b911      	cbnz	r1, d4be0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d4bda:	f04f 30ff 	mov.w	r0, #4294967295
   d4bde:	e035      	b.n	d4c4c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d4be0:	f04f 0a1c 	mov.w	sl, #28
   d4be4:	ae05      	add	r6, sp, #20
   d4be6:	4652      	mov	r2, sl
   d4be8:	2100      	movs	r1, #0
   d4bea:	4630      	mov	r0, r6
   d4bec:	f001 fa94 	bl	d6118 <memset>
        socklen_t slen = sizeof(saddr);
   d4bf0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d4bf4:	f1b9 0f00 	cmp.w	r9, #0
   d4bf8:	d014      	beq.n	d4c24 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d4bfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4bfe:	fbb9 f1f2 	udiv	r1, r9, r2
   d4c02:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d4c04:	fb02 9111 	mls	r1, r2, r1, r9
   d4c08:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4c0a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d4c0c:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4c0e:	9300      	str	r3, [sp, #0]
   d4c10:	f241 0206 	movw	r2, #4102	; 0x1006
   d4c14:	ab03      	add	r3, sp, #12
   d4c16:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4c1a:	4640      	mov	r0, r8
   d4c1c:	f7ff fca0 	bl	d4560 <sock_setsockopt>
            if (ret) {
   d4c20:	b108      	cbz	r0, d4c26 <_ZN3UDP13receivePacketEPhjm+0x66>
   d4c22:	e013      	b.n	d4c4c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d4c24:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4c26:	ab02      	add	r3, sp, #8
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	4621      	mov	r1, r4
   d4c2c:	4603      	mov	r3, r0
   d4c2e:	9600      	str	r6, [sp, #0]
   d4c30:	463a      	mov	r2, r7
   d4c32:	6968      	ldr	r0, [r5, #20]
   d4c34:	f7ff fca4 	bl	d4580 <sock_recvfrom>
        if (ret >= 0) {
   d4c38:	1e04      	subs	r4, r0, #0
   d4c3a:	db06      	blt.n	d4c4a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d4c3c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d4c40:	f105 011c 	add.w	r1, r5, #28
   d4c44:	4630      	mov	r0, r6
   d4c46:	f7ff ff39 	bl	d4abc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4c4a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d4c4c:	b00c      	add	sp, #48	; 0x30
   d4c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4c52 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4c52:	b538      	push	{r3, r4, r5, lr}
   d4c54:	4605      	mov	r5, r0
   d4c56:	4614      	mov	r4, r2
   d4c58:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d4c5a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4c5c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d4c5e:	d111      	bne.n	d4c84 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d4c60:	231c      	movs	r3, #28
   d4c62:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d4c64:	230a      	movs	r3, #10
   d4c66:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d4c68:	f7ff fbf2 	bl	d4450 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4c6c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d4c6e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4c72:	1d2b      	adds	r3, r5, #4
   d4c74:	3514      	adds	r5, #20
   d4c76:	f853 2b04 	ldr.w	r2, [r3], #4
   d4c7a:	f844 2b04 	str.w	r2, [r4], #4
   d4c7e:	42ab      	cmp	r3, r5
   d4c80:	d1f9      	bne.n	d4c76 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d4c82:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d4c84:	2b04      	cmp	r3, #4
   d4c86:	d10a      	bne.n	d4c9e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d4c88:	2310      	movs	r3, #16
   d4c8a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d4c8c:	2302      	movs	r3, #2
   d4c8e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d4c90:	f7ff fbde 	bl	d4450 <inet_htons>
   d4c94:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d4c96:	6868      	ldr	r0, [r5, #4]
   d4c98:	f7ff fbca 	bl	d4430 <inet_htonl>
   d4c9c:	6060      	str	r0, [r4, #4]
   d4c9e:	bd38      	pop	{r3, r4, r5, pc}

000d4ca0 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ca4:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4ca6:	ac03      	add	r4, sp, #12
   d4ca8:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4caa:	4699      	mov	r9, r3
   d4cac:	4606      	mov	r6, r0
   d4cae:	460f      	mov	r7, r1
   d4cb0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4cb2:	2100      	movs	r1, #0
   d4cb4:	462a      	mov	r2, r5
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	f001 fa2e 	bl	d6118 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d4cbc:	4622      	mov	r2, r4
   d4cbe:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d4cc2:	4648      	mov	r0, r9
   d4cc4:	f7ff ffc5 	bl	d4c52 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d4cc8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4ccc:	b143      	cbz	r3, d4ce0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d4cce:	e88d 0030 	stmia.w	sp, {r4, r5}
   d4cd2:	2300      	movs	r3, #0
   d4cd4:	4642      	mov	r2, r8
   d4cd6:	4639      	mov	r1, r7
   d4cd8:	6970      	ldr	r0, [r6, #20]
   d4cda:	f7ff fc59 	bl	d4590 <sock_sendto>
   d4cde:	e001      	b.n	d4ce4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d4ce0:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d4ce4:	b00b      	add	sp, #44	; 0x2c
   d4ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4cea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4cea:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cec:	b091      	sub	sp, #68	; 0x44
   d4cee:	460c      	mov	r4, r1
   d4cf0:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d4cf2:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4cf4:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d4cf6:	a809      	add	r0, sp, #36	; 0x24
   d4cf8:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4cfa:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d4cfc:	f001 fa0c 	bl	d6118 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d4d00:	aa09      	add	r2, sp, #36	; 0x24
   d4d02:	2100      	movs	r1, #0
   d4d04:	4620      	mov	r0, r4
   d4d06:	f7ff ffa4 	bl	d4c52 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d4d0a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4d0e:	2b02      	cmp	r3, #2
   d4d10:	d12e      	bne.n	d4d70 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d4d12:	2300      	movs	r3, #0
   d4d14:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d4d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4d18:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d4d1a:	b1dd      	cbz	r5, d4d54 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d4d1c:	a902      	add	r1, sp, #8
   d4d1e:	4628      	mov	r0, r5
   d4d20:	f7ff faf6 	bl	d4310 <if_get_by_index>
   d4d24:	b9b0      	cbnz	r0, d4d54 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d4d26:	a910      	add	r1, sp, #64	; 0x40
   d4d28:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d4d2c:	9802      	ldr	r0, [sp, #8]
   d4d2e:	f7ff faf7 	bl	d4320 <if_get_addrs>
   d4d32:	b960      	cbnz	r0, d4d4e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d4d34:	9b03      	ldr	r3, [sp, #12]
   d4d36:	b153      	cbz	r3, d4d4e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d4d38:	68da      	ldr	r2, [r3, #12]
   d4d3a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d4d3c:	7851      	ldrb	r1, [r2, #1]
   d4d3e:	2902      	cmp	r1, #2
   d4d40:	d103      	bne.n	d4d4a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d4d42:	6852      	ldr	r2, [r2, #4]
   d4d44:	b10a      	cbz	r2, d4d4a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d4d46:	9205      	str	r2, [sp, #20]
   d4d48:	e001      	b.n	d4d4e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d4d4a:	681b      	ldr	r3, [r3, #0]
   d4d4c:	e7f3      	b.n	d4d36 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d4d4e:	9803      	ldr	r0, [sp, #12]
   d4d50:	f7ff faee 	bl	d4330 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d4d54:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d4d56:	f04f 0308 	mov.w	r3, #8
   d4d5a:	9300      	str	r3, [sp, #0]
   d4d5c:	bf18      	it	ne
   d4d5e:	2203      	movne	r2, #3
   d4d60:	ab04      	add	r3, sp, #16
   d4d62:	bf08      	it	eq
   d4d64:	2204      	moveq	r2, #4
   d4d66:	2100      	movs	r1, #0
   d4d68:	4630      	mov	r0, r6
   d4d6a:	f7ff fbf9 	bl	d4560 <sock_setsockopt>
   d4d6e:	e01e      	b.n	d4dae <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d4d70:	2b0a      	cmp	r3, #10
   d4d72:	d11a      	bne.n	d4daa <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d4d74:	ac04      	add	r4, sp, #16
   d4d76:	2214      	movs	r2, #20
   d4d78:	2100      	movs	r1, #0
   d4d7a:	4620      	mov	r0, r4
   d4d7c:	f001 f9cc 	bl	d6118 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d4d80:	ab0b      	add	r3, sp, #44	; 0x2c
   d4d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4d84:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d4d86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4d8a:	f04f 0314 	mov.w	r3, #20
   d4d8e:	9300      	str	r3, [sp, #0]
   d4d90:	bf18      	it	ne
   d4d92:	220c      	movne	r2, #12
   d4d94:	4623      	mov	r3, r4
   d4d96:	bf08      	it	eq
   d4d98:	220d      	moveq	r2, #13
   d4d9a:	2129      	movs	r1, #41	; 0x29
   d4d9c:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d4d9e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4da0:	f7ff fbde 	bl	d4560 <sock_setsockopt>
   d4da4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d4da8:	e001      	b.n	d4dae <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d4daa:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4dae:	b011      	add	sp, #68	; 0x44
   d4db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4db4 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d4db4:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4dba:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d4dbc:	4b0b      	ldr	r3, [pc, #44]	; (d4dec <_ZN3UDPC1Ev+0x38>)
   d4dbe:	f103 0208 	add.w	r2, r3, #8
   d4dc2:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4dc4:	2500      	movs	r5, #0
   d4dc6:	6103      	str	r3, [r0, #16]
   d4dc8:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d4dcc:	4604      	mov	r4, r0
   d4dce:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d4dd0:	6002      	str	r2, [r0, #0]
   d4dd2:	6143      	str	r3, [r0, #20]
   d4dd4:	301c      	adds	r0, #28
   d4dd6:	f000 fa0d 	bl	d51f4 <_ZN9IPAddressC1Ev>
   d4dda:	f44f 7300 	mov.w	r3, #512	; 0x200
   d4dde:	86e5      	strh	r5, [r4, #54]	; 0x36
   d4de0:	8725      	strh	r5, [r4, #56]	; 0x38
   d4de2:	63e5      	str	r5, [r4, #60]	; 0x3c
   d4de4:	6423      	str	r3, [r4, #64]	; 0x40
   d4de6:	6465      	str	r5, [r4, #68]	; 0x44
}
   d4de8:	4620      	mov	r0, r4
   d4dea:	bd38      	pop	{r3, r4, r5, pc}
   d4dec:	000d62c0 	.word	0x000d62c0

000d4df0 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d4df0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d4df2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d4df6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d4df8:	b11b      	cbz	r3, d4e02 <_ZN3UDP13releaseBufferEv+0x12>
   d4dfa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d4dfc:	b108      	cbz	r0, d4e02 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d4dfe:	f7ff f94e 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d4e02:	2300      	movs	r3, #0
   d4e04:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d4e06:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d4e0a:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4e0c:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4e0e:	8723      	strh	r3, [r4, #56]	; 0x38
   d4e10:	bd10      	pop	{r4, pc}

000d4e12 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d4e12:	b570      	push	{r4, r5, r6, lr}
   d4e14:	4604      	mov	r4, r0
   d4e16:	4616      	mov	r6, r2
   d4e18:	460d      	mov	r5, r1
    releaseBuffer();
   d4e1a:	f7ff ffe9 	bl	d4df0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d4e1e:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d4e20:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d4e22:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d4e24:	b93e      	cbnz	r6, d4e36 <_ZN3UDP9setBufferEjPh+0x24>
   d4e26:	b135      	cbz	r5, d4e36 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d4e28:	4628      	mov	r0, r5
   d4e2a:	f7ff f936 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d4e2e:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d4e30:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d4e32:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d4e36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d4e38:	b103      	cbz	r3, d4e3c <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d4e3a:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d4e3c:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d4e3e:	3000      	adds	r0, #0
   d4e40:	bf18      	it	ne
   d4e42:	2001      	movne	r0, #1
   d4e44:	bd70      	pop	{r4, r5, r6, pc}

000d4e46 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d4e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e48:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d4e4a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d4e4c:	4605      	mov	r5, r0
   d4e4e:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d4e50:	b91a      	cbnz	r2, d4e5a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d4e52:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d4e54:	b109      	cbz	r1, d4e5a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d4e56:	f7ff ffdc 	bl	d4e12 <_ZN3UDP9setBufferEjPh>
   d4e5a:	3404      	adds	r4, #4
   d4e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4e5e:	f105 0620 	add.w	r6, r5, #32
   d4e62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4e64:	6823      	ldr	r3, [r4, #0]
   d4e66:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4e68:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d4e6a:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4e6c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d4e6e:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d4e70:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d4e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e74 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d4e74:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d4e76:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d4e78:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d4e7a:	b91a      	cbnz	r2, d4e84 <_ZN3UDP11parsePacketEm+0x10>
   d4e7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d4e7e:	b109      	cbz	r1, d4e84 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d4e80:	f7ff ffc7 	bl	d4e12 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d4e84:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4e86:	2300      	movs	r3, #0
   d4e88:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4e8a:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d4e8c:	b141      	cbz	r1, d4ea0 <_ZN3UDP11parsePacketEm+0x2c>
   d4e8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d4e90:	b132      	cbz	r2, d4ea0 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d4e92:	6820      	ldr	r0, [r4, #0]
   d4e94:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d4e96:	4620      	mov	r0, r4
   d4e98:	47a8      	blx	r5
        if (result > 0) {
   d4e9a:	2800      	cmp	r0, #0
            _total = result;
   d4e9c:	bfc8      	it	gt
   d4e9e:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d4ea0:	6823      	ldr	r3, [r4, #0]
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	691b      	ldr	r3, [r3, #16]
}
   d4ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d4eaa:	4718      	bx	r3

000d4eac <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d4eac:	b510      	push	{r4, lr}
   d4eae:	4b07      	ldr	r3, [pc, #28]	; (d4ecc <_ZN3UDPD1Ev+0x20>)
   d4eb0:	f103 0208 	add.w	r2, r3, #8
   d4eb4:	336c      	adds	r3, #108	; 0x6c
   d4eb6:	4604      	mov	r4, r0
   d4eb8:	6002      	str	r2, [r0, #0]
   d4eba:	6103      	str	r3, [r0, #16]
   d4ebc:	f7ff fd6f 	bl	d499e <_ZN3UDP4stopEv>
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	f7ff ff95 	bl	d4df0 <_ZN3UDP13releaseBufferEv>
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	bd10      	pop	{r4, pc}
   d4eca:	bf00      	nop
   d4ecc:	000d62c0 	.word	0x000d62c0

000d4ed0 <_ZN3UDPD0Ev>:
   d4ed0:	b510      	push	{r4, lr}
   d4ed2:	4604      	mov	r4, r0
   d4ed4:	f7ff ffea 	bl	d4eac <_ZN3UDPD1Ev>
   d4ed8:	4620      	mov	r0, r4
   d4eda:	f7ff f8e0 	bl	d409e <_ZdlPv>
   d4ede:	4620      	mov	r0, r4
   d4ee0:	bd10      	pop	{r4, pc}

000d4ee2 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d4ee2:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d4ee4:	6940      	ldr	r0, [r0, #20]
   d4ee6:	2800      	cmp	r0, #0
   d4ee8:	db04      	blt.n	d4ef4 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d4eea:	2301      	movs	r3, #1
   d4eec:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d4ef0:	f7ff befb 	b.w	d4cea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d4ef4:	f04f 30ff 	mov.w	r0, #4294967295
   d4ef8:	4770      	bx	lr

000d4efa <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4efc:	4606      	mov	r6, r0
   d4efe:	460d      	mov	r5, r1
   d4f00:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4f02:	2400      	movs	r4, #0
  while (size--) {
   d4f04:	42bd      	cmp	r5, r7
   d4f06:	d00c      	beq.n	d4f22 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4f08:	6833      	ldr	r3, [r6, #0]
   d4f0a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f0e:	689b      	ldr	r3, [r3, #8]
   d4f10:	4630      	mov	r0, r6
   d4f12:	4798      	blx	r3
     if (chunk>=0)
   d4f14:	2800      	cmp	r0, #0
   d4f16:	db01      	blt.n	d4f1c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4f18:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4f1a:	e7f3      	b.n	d4f04 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4f1c:	2c00      	cmp	r4, #0
   d4f1e:	bf08      	it	eq
   d4f20:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f22:	4620      	mov	r0, r4
   d4f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f26 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f26:	b570      	push	{r4, r5, r6, lr}
   d4f28:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4f2a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4f2c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4f2e:	b149      	cbz	r1, d4f44 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4f30:	f001 f922 	bl	d6178 <strlen>
   d4f34:	682b      	ldr	r3, [r5, #0]
   d4f36:	4602      	mov	r2, r0
   d4f38:	4621      	mov	r1, r4
   d4f3a:	4628      	mov	r0, r5
   d4f3c:	68db      	ldr	r3, [r3, #12]
    }
   d4f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4f42:	4718      	bx	r3
    }
   d4f44:	bd70      	pop	{r4, r5, r6, pc}

000d4f46 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4f46:	6803      	ldr	r3, [r0, #0]
   d4f48:	689b      	ldr	r3, [r3, #8]
   d4f4a:	4718      	bx	r3

000d4f4c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4f4c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4f4e:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4f50:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4f52:	f7ff fff8 	bl	d4f46 <_ZN5Print5printEc>
  n += print('\n');
   d4f56:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4f58:	4604      	mov	r4, r0
  n += print('\n');
   d4f5a:	4628      	mov	r0, r5
   d4f5c:	f7ff fff3 	bl	d4f46 <_ZN5Print5printEc>
  return n;
}
   d4f60:	4420      	add	r0, r4
   d4f62:	bd38      	pop	{r3, r4, r5, pc}

000d4f64 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4f64:	b538      	push	{r3, r4, r5, lr}
   d4f66:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f68:	f7ff ffdd 	bl	d4f26 <_ZN5Print5writeEPKc>
   d4f6c:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4f6e:	4628      	mov	r0, r5
   d4f70:	f7ff ffec 	bl	d4f4c <_ZN5Print7printlnEv>
  return n;
}
   d4f74:	4420      	add	r0, r4
   d4f76:	bd38      	pop	{r3, r4, r5, pc}

000d4f78 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4f78:	b530      	push	{r4, r5, lr}
   d4f7a:	b08b      	sub	sp, #44	; 0x2c
   d4f7c:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4f7e:	2100      	movs	r1, #0
   d4f80:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4f84:	2a01      	cmp	r2, #1
   d4f86:	bf98      	it	ls
   d4f88:	220a      	movls	r2, #10
   d4f8a:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4f8e:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4f92:	fb05 3312 	mls	r3, r5, r2, r3
   d4f96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f9a:	2b09      	cmp	r3, #9
   d4f9c:	bf94      	ite	ls
   d4f9e:	3330      	addls	r3, #48	; 0x30
   d4fa0:	3337      	addhi	r3, #55	; 0x37
   d4fa2:	b2db      	uxtb	r3, r3
   d4fa4:	4621      	mov	r1, r4
   d4fa6:	f804 3901 	strb.w	r3, [r4], #-1
   d4faa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4fac:	2d00      	cmp	r5, #0
   d4fae:	d1ee      	bne.n	d4f8e <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4fb0:	f7ff ffb9 	bl	d4f26 <_ZN5Print5writeEPKc>
}
   d4fb4:	b00b      	add	sp, #44	; 0x2c
   d4fb6:	bd30      	pop	{r4, r5, pc}

000d4fb8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4fb8:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4fba:	b92a      	cbnz	r2, d4fc8 <_ZN5Print5printEmi+0x10>
   d4fbc:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4fc2:	689b      	ldr	r3, [r3, #8]
   d4fc4:	b2c9      	uxtb	r1, r1
   d4fc6:	4718      	bx	r3
  else return printNumber(n, base);
   d4fc8:	b2d2      	uxtb	r2, r2
}
   d4fca:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4fce:	f7ff bfd3 	b.w	d4f78 <_ZN5Print11printNumberEmh>

000d4fd2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4fd2:	f7ff bff1 	b.w	d4fb8 <_ZN5Print5printEmi>

000d4fd6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4fd6:	b40c      	push	{r2, r3}
   d4fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4fdc:	b087      	sub	sp, #28
   d4fde:	af00      	add	r7, sp, #0
   d4fe0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4fe4:	4605      	mov	r5, r0
   d4fe6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4fea:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4fec:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4fee:	4623      	mov	r3, r4
   d4ff0:	464a      	mov	r2, r9
   d4ff2:	2114      	movs	r1, #20
   d4ff4:	1d38      	adds	r0, r7, #4
   d4ff6:	f7ff fbc1 	bl	d477c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4ffa:	2813      	cmp	r0, #19
   d4ffc:	d805      	bhi.n	d500a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ffe:	1d39      	adds	r1, r7, #4
   d5000:	4628      	mov	r0, r5
   d5002:	f7ff ff90 	bl	d4f26 <_ZN5Print5writeEPKc>
   d5006:	4604      	mov	r4, r0
   d5008:	e013      	b.n	d5032 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d500a:	f100 0308 	add.w	r3, r0, #8
   d500e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5012:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5014:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5018:	1c41      	adds	r1, r0, #1
   d501a:	4623      	mov	r3, r4
   d501c:	464a      	mov	r2, r9
   d501e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5020:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5022:	f7ff fbab 	bl	d477c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5026:	4669      	mov	r1, sp
   d5028:	4628      	mov	r0, r5
   d502a:	f7ff ff7c 	bl	d4f26 <_ZN5Print5writeEPKc>
   d502e:	4604      	mov	r4, r0
   d5030:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5032:	b11e      	cbz	r6, d503c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5034:	4628      	mov	r0, r5
   d5036:	f7ff ff89 	bl	d4f4c <_ZN5Print7printlnEv>
   d503a:	4404      	add	r4, r0
    return n;
}
   d503c:	4620      	mov	r0, r4
   d503e:	371c      	adds	r7, #28
   d5040:	46bd      	mov	sp, r7
   d5042:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5046:	b002      	add	sp, #8
   d5048:	4770      	bx	lr
	...

000d504c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d504c:	4b01      	ldr	r3, [pc, #4]	; (d5054 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d504e:	4a02      	ldr	r2, [pc, #8]	; (d5058 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5050:	601a      	str	r2, [r3, #0]
   d5052:	4770      	bx	lr
   d5054:	2003e38c 	.word	0x2003e38c
   d5058:	000d63e5 	.word	0x000d63e5

000d505c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d505c:	4b02      	ldr	r3, [pc, #8]	; (d5068 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d505e:	681a      	ldr	r2, [r3, #0]
   d5060:	4b02      	ldr	r3, [pc, #8]	; (d506c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5062:	601a      	str	r2, [r3, #0]
   d5064:	4770      	bx	lr
   d5066:	bf00      	nop
   d5068:	2003e2fc 	.word	0x2003e2fc
   d506c:	2003e390 	.word	0x2003e390

000d5070 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5070:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5072:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5074:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5076:	b113      	cbz	r3, d507e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5078:	2203      	movs	r2, #3
   d507a:	4601      	mov	r1, r0
   d507c:	4798      	blx	r3
    }
   d507e:	4620      	mov	r0, r4
   d5080:	bd10      	pop	{r4, pc}

000d5082 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5082:	b510      	push	{r4, lr}
   d5084:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5086:	f7ff fff3 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
   d508a:	4620      	mov	r0, r4
   d508c:	bd10      	pop	{r4, pc}
	...

000d5090 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5090:	4803      	ldr	r0, [pc, #12]	; (d50a0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5092:	4a04      	ldr	r2, [pc, #16]	; (d50a4 <_GLOBAL__sub_I_RGB+0x14>)
   d5094:	4904      	ldr	r1, [pc, #16]	; (d50a8 <_GLOBAL__sub_I_RGB+0x18>)
   d5096:	2300      	movs	r3, #0
   d5098:	6083      	str	r3, [r0, #8]
   d509a:	f000 beab 	b.w	d5df4 <__aeabi_atexit>
   d509e:	bf00      	nop
   d50a0:	2003e394 	.word	0x2003e394
   d50a4:	2003e364 	.word	0x2003e364
   d50a8:	000d5083 	.word	0x000d5083

000d50ac <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d50ac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d50ae:	4b0c      	ldr	r3, [pc, #48]	; (d50e0 <serialEventRun+0x34>)
   d50b0:	b133      	cbz	r3, d50c0 <serialEventRun+0x14>
   d50b2:	f000 f93b 	bl	d532c <_Z16_fetch_usbserialv>
   d50b6:	6803      	ldr	r3, [r0, #0]
   d50b8:	691b      	ldr	r3, [r3, #16]
   d50ba:	4798      	blx	r3
   d50bc:	2800      	cmp	r0, #0
   d50be:	dc09      	bgt.n	d50d4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d50c0:	4b08      	ldr	r3, [pc, #32]	; (d50e4 <serialEventRun+0x38>)
   d50c2:	b163      	cbz	r3, d50de <serialEventRun+0x32>
   d50c4:	f000 f9f0 	bl	d54a8 <_Z22__fetch_global_Serial1v>
   d50c8:	6803      	ldr	r3, [r0, #0]
   d50ca:	691b      	ldr	r3, [r3, #16]
   d50cc:	4798      	blx	r3
   d50ce:	2800      	cmp	r0, #0
   d50d0:	dc03      	bgt.n	d50da <serialEventRun+0x2e>
   d50d2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d50d4:	f3af 8000 	nop.w
   d50d8:	e7f2      	b.n	d50c0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d50da:	f3af 8000 	nop.w
   d50de:	bd08      	pop	{r3, pc}
	...

000d50e8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d50e8:	b508      	push	{r3, lr}
	serialEventRun();
   d50ea:	f7ff ffdf 	bl	d50ac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d50ee:	f7ff f937 	bl	d4360 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d50f2:	4b01      	ldr	r3, [pc, #4]	; (d50f8 <_post_loop+0x10>)
   d50f4:	6018      	str	r0, [r3, #0]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	2003e730 	.word	0x2003e730

000d50fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d50fc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d50fe:	2300      	movs	r3, #0
   d5100:	9300      	str	r3, [sp, #0]
   d5102:	461a      	mov	r2, r3
   d5104:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5108:	f7ff fab4 	bl	d4674 <system_ctrl_set_result>
}
   d510c:	b003      	add	sp, #12
   d510e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5114 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5114:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5116:	8843      	ldrh	r3, [r0, #2]
   d5118:	2b0a      	cmp	r3, #10
   d511a:	d008      	beq.n	d512e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d511c:	2b50      	cmp	r3, #80	; 0x50
   d511e:	d109      	bne.n	d5134 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5120:	4b09      	ldr	r3, [pc, #36]	; (d5148 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5122:	681b      	ldr	r3, [r3, #0]
   d5124:	b13b      	cbz	r3, d5136 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5126:	b003      	add	sp, #12
   d5128:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d512c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d512e:	f7ff ffe5 	bl	d50fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5132:	e006      	b.n	d5142 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5134:	2300      	movs	r3, #0
   d5136:	9300      	str	r3, [sp, #0]
   d5138:	461a      	mov	r2, r3
   d513a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d513e:	f7ff fa99 	bl	d4674 <system_ctrl_set_result>
        break;
    }
}
   d5142:	b003      	add	sp, #12
   d5144:	f85d fb04 	ldr.w	pc, [sp], #4
   d5148:	2003e3a4 	.word	0x2003e3a4

000d514c <module_user_init_hook>:

void module_user_init_hook()
{
   d514c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d514e:	f7ff f8f7 	bl	d4340 <HAL_RNG_GetRandomNumber>
   d5152:	4604      	mov	r4, r0
    srand(seed);
   d5154:	f000 ffe8 	bl	d6128 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5158:	4b07      	ldr	r3, [pc, #28]	; (d5178 <module_user_init_hook+0x2c>)
   d515a:	b113      	cbz	r3, d5162 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d515c:	4620      	mov	r0, r4
   d515e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5162:	2100      	movs	r1, #0
   d5164:	4804      	ldr	r0, [pc, #16]	; (d5178 <module_user_init_hook+0x2c>)
   d5166:	f7ff faf1 	bl	d474c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d516a:	2100      	movs	r1, #0
   d516c:	4803      	ldr	r0, [pc, #12]	; (d517c <module_user_init_hook+0x30>)
}
   d516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5172:	f7ff ba75 	b.w	d4660 <system_ctrl_set_app_request_handler>
   d5176:	bf00      	nop
   d5178:	00000000 	.word	0x00000000
   d517c:	000d5115 	.word	0x000d5115

000d5180 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5180:	4770      	bx	lr

000d5182 <_ZN9IPAddressD0Ev>:
   d5182:	b510      	push	{r4, lr}
   d5184:	4604      	mov	r4, r0
   d5186:	f7fe ff8a 	bl	d409e <_ZdlPv>
   d518a:	4620      	mov	r0, r4
   d518c:	bd10      	pop	{r4, pc}

000d518e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d518e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5190:	7d03      	ldrb	r3, [r0, #20]
   d5192:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5194:	b08d      	sub	sp, #52	; 0x34
   d5196:	460e      	mov	r6, r1
   d5198:	f100 0704 	add.w	r7, r0, #4
   d519c:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d51a0:	d002      	beq.n	d51a8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d51a2:	f100 0508 	add.w	r5, r0, #8
   d51a6:	e018      	b.n	d51da <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d51a8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d51aa:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d51ac:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d51b0:	232f      	movs	r3, #47	; 0x2f
   d51b2:	462a      	mov	r2, r5
   d51b4:	200a      	movs	r0, #10
   d51b6:	f7ff f92b 	bl	d4410 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d51ba:	4628      	mov	r0, r5
   d51bc:	f000 ffdc 	bl	d6178 <strlen>
   d51c0:	6833      	ldr	r3, [r6, #0]
   d51c2:	4602      	mov	r2, r0
   d51c4:	68db      	ldr	r3, [r3, #12]
   d51c6:	4629      	mov	r1, r5
   d51c8:	4630      	mov	r0, r6
   d51ca:	4798      	blx	r3
   d51cc:	e00f      	b.n	d51ee <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d51ce:	b124      	cbz	r4, d51da <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d51d0:	212e      	movs	r1, #46	; 0x2e
   d51d2:	4630      	mov	r0, r6
   d51d4:	f7ff feb7 	bl	d4f46 <_ZN5Print5printEc>
   d51d8:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d51da:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d51de:	220a      	movs	r2, #10
   d51e0:	4630      	mov	r0, r6
   d51e2:	f7ff fef6 	bl	d4fd2 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d51e6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d51e8:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d51ea:	d1f0      	bne.n	d51ce <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d51ec:	4620      	mov	r0, r4
    }
    return n;
}
   d51ee:	b00d      	add	sp, #52	; 0x34
   d51f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d51f4 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d51f4:	b510      	push	{r4, lr}
   d51f6:	4b05      	ldr	r3, [pc, #20]	; (d520c <_ZN9IPAddressC1Ev+0x18>)
   d51f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d51fa:	2211      	movs	r2, #17
   d51fc:	f840 3b04 	str.w	r3, [r0], #4
   d5200:	2100      	movs	r1, #0
   d5202:	f000 ff89 	bl	d6118 <memset>
{
    clear();
}
   d5206:	4620      	mov	r0, r4
   d5208:	bd10      	pop	{r4, pc}
   d520a:	bf00      	nop
   d520c:	000d6440 	.word	0x000d6440

000d5210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5210:	4603      	mov	r3, r0
   d5212:	4a07      	ldr	r2, [pc, #28]	; (d5230 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5214:	b510      	push	{r4, lr}
   d5216:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d521a:	f101 0210 	add.w	r2, r1, #16
   d521e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5222:	f843 4b04 	str.w	r4, [r3], #4
   d5226:	4291      	cmp	r1, r2
   d5228:	d1f9      	bne.n	d521e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d522a:	780a      	ldrb	r2, [r1, #0]
   d522c:	701a      	strb	r2, [r3, #0]
}
   d522e:	bd10      	pop	{r4, pc}
   d5230:	000d6440 	.word	0x000d6440

000d5234 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5234:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5236:	2b04      	cmp	r3, #4
   d5238:	d101      	bne.n	d523e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d523a:	6840      	ldr	r0, [r0, #4]
   d523c:	e008      	b.n	d5250 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d523e:	2b06      	cmp	r3, #6
   d5240:	d10a      	bne.n	d5258 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5242:	6843      	ldr	r3, [r0, #4]
   d5244:	b153      	cbz	r3, d525c <_ZNK9IPAddresscvbEv+0x28>
   d5246:	6883      	ldr	r3, [r0, #8]
   d5248:	b143      	cbz	r3, d525c <_ZNK9IPAddresscvbEv+0x28>
   d524a:	68c3      	ldr	r3, [r0, #12]
   d524c:	b133      	cbz	r3, d525c <_ZNK9IPAddresscvbEv+0x28>
   d524e:	6900      	ldr	r0, [r0, #16]
   d5250:	3000      	adds	r0, #0
   d5252:	bf18      	it	ne
   d5254:	2001      	movne	r0, #1
   d5256:	4770      	bx	lr
   d5258:	2000      	movs	r0, #0
   d525a:	4770      	bx	lr
   d525c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d525e:	4770      	bx	lr

000d5260 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5260:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5262:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5266:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d526a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d526e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5272:	2304      	movs	r3, #4
   d5274:	6041      	str	r1, [r0, #4]
   d5276:	7503      	strb	r3, [r0, #20]
   d5278:	bd10      	pop	{r4, pc}

000d527a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d527a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d527c:	780d      	ldrb	r5, [r1, #0]
   d527e:	788b      	ldrb	r3, [r1, #2]
   d5280:	784a      	ldrb	r2, [r1, #1]
   d5282:	78c9      	ldrb	r1, [r1, #3]
   d5284:	9100      	str	r1, [sp, #0]
   d5286:	4629      	mov	r1, r5
   d5288:	f7ff ffea 	bl	d5260 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d528c:	b003      	add	sp, #12
   d528e:	bd30      	pop	{r4, r5, pc}

000d5290 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5290:	7441      	strb	r1, [r0, #17]
   d5292:	4770      	bx	lr

000d5294 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5294:	4770      	bx	lr

000d5296 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5296:	2100      	movs	r1, #0
   d5298:	7c00      	ldrb	r0, [r0, #16]
   d529a:	f7ff b9a9 	b.w	d45f0 <HAL_USB_USART_Receive_Data>

000d529e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d529e:	2101      	movs	r1, #1
   d52a0:	7c00      	ldrb	r0, [r0, #16]
   d52a2:	f7ff b9a5 	b.w	d45f0 <HAL_USB_USART_Receive_Data>

000d52a6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d52a6:	7c00      	ldrb	r0, [r0, #16]
   d52a8:	f7ff b99a 	b.w	d45e0 <HAL_USB_USART_Available_Data_For_Write>

000d52ac <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d52ac:	7c00      	ldrb	r0, [r0, #16]
   d52ae:	f7ff b98f 	b.w	d45d0 <HAL_USB_USART_Available_Data>

000d52b2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d52b2:	b538      	push	{r3, r4, r5, lr}
   d52b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52b6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d52b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52ba:	f7ff f991 	bl	d45e0 <HAL_USB_USART_Available_Data_For_Write>
   d52be:	2800      	cmp	r0, #0
   d52c0:	dc01      	bgt.n	d52c6 <_ZN9USBSerial5writeEh+0x14>
   d52c2:	7c60      	ldrb	r0, [r4, #17]
   d52c4:	b120      	cbz	r0, d52d0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d52c6:	4629      	mov	r1, r5
   d52c8:	7c20      	ldrb	r0, [r4, #16]
   d52ca:	f7ff f999 	bl	d4600 <HAL_USB_USART_Send_Data>
    return 1;
   d52ce:	2001      	movs	r0, #1
  }
  return 0;
}
   d52d0:	bd38      	pop	{r3, r4, r5, pc}

000d52d2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d52d2:	7c00      	ldrb	r0, [r0, #16]
   d52d4:	f7ff b99c 	b.w	d4610 <HAL_USB_USART_Flush_Data>

000d52d8 <_ZN9USBSerialD0Ev>:
   d52d8:	b510      	push	{r4, lr}
   d52da:	4604      	mov	r4, r0
   d52dc:	f7fe fedf 	bl	d409e <_ZdlPv>
   d52e0:	4620      	mov	r0, r4
   d52e2:	bd10      	pop	{r4, pc}

000d52e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d52e4:	b510      	push	{r4, lr}
   d52e6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d52e8:	2300      	movs	r3, #0
   d52ea:	6063      	str	r3, [r4, #4]
   d52ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d52f0:	60a3      	str	r3, [r4, #8]
   d52f2:	4b05      	ldr	r3, [pc, #20]	; (d5308 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d52f4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d52f6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d52f8:	4608      	mov	r0, r1
{
  _serial = serial;
   d52fa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d52fc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d52fe:	4611      	mov	r1, r2
   d5300:	f7ff f956 	bl	d45b0 <HAL_USB_USART_Init>
}
   d5304:	4620      	mov	r0, r4
   d5306:	bd10      	pop	{r4, pc}
   d5308:	000d6454 	.word	0x000d6454

000d530c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d530c:	2200      	movs	r2, #0
   d530e:	7c00      	ldrb	r0, [r0, #16]
   d5310:	f7ff b956 	b.w	d45c0 <HAL_USB_USART_Begin>

000d5314 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d5314:	7c00      	ldrb	r0, [r0, #16]
   d5316:	f7ff b983 	b.w	d4620 <HAL_USB_USART_Is_Connected>

000d531a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d531a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d531c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d531e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5320:	2100      	movs	r1, #0
   d5322:	f000 fef9 	bl	d6118 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5326:	4620      	mov	r0, r4
   d5328:	bd10      	pop	{r4, pc}
	...

000d532c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d532c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d532e:	4d0e      	ldr	r5, [pc, #56]	; (d5368 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5330:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5332:	a801      	add	r0, sp, #4
   d5334:	f7ff fff1 	bl	d531a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5338:	6829      	ldr	r1, [r5, #0]
   d533a:	f011 0401 	ands.w	r4, r1, #1
   d533e:	d110      	bne.n	d5362 <_Z16_fetch_usbserialv+0x36>
   d5340:	4628      	mov	r0, r5
   d5342:	f7fe feb0 	bl	d40a6 <__cxa_guard_acquire>
   d5346:	b160      	cbz	r0, d5362 <_Z16_fetch_usbserialv+0x36>
   d5348:	aa01      	add	r2, sp, #4
   d534a:	4621      	mov	r1, r4
   d534c:	4807      	ldr	r0, [pc, #28]	; (d536c <_Z16_fetch_usbserialv+0x40>)
   d534e:	f7ff ffc9 	bl	d52e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5352:	4628      	mov	r0, r5
   d5354:	f7fe feac 	bl	d40b0 <__cxa_guard_release>
   d5358:	4a05      	ldr	r2, [pc, #20]	; (d5370 <_Z16_fetch_usbserialv+0x44>)
   d535a:	4906      	ldr	r1, [pc, #24]	; (d5374 <_Z16_fetch_usbserialv+0x48>)
   d535c:	4803      	ldr	r0, [pc, #12]	; (d536c <_Z16_fetch_usbserialv+0x40>)
   d535e:	f000 fd49 	bl	d5df4 <__aeabi_atexit>
	return _usbserial;
}
   d5362:	4802      	ldr	r0, [pc, #8]	; (d536c <_Z16_fetch_usbserialv+0x40>)
   d5364:	b007      	add	sp, #28
   d5366:	bd30      	pop	{r4, r5, pc}
   d5368:	2003e3a8 	.word	0x2003e3a8
   d536c:	2003e3ac 	.word	0x2003e3ac
   d5370:	2003e364 	.word	0x2003e364
   d5374:	000d5295 	.word	0x000d5295

000d5378 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5378:	2200      	movs	r2, #0
   d537a:	4611      	mov	r1, r2
   d537c:	6840      	ldr	r0, [r0, #4]
   d537e:	f7ff b9a5 	b.w	d46cc <network_ready>

000d5382 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5382:	2200      	movs	r2, #0
   d5384:	4611      	mov	r1, r2
   d5386:	6840      	ldr	r0, [r0, #4]
   d5388:	f7ff b9c0 	b.w	d470c <network_listening>

000d538c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d538c:	2200      	movs	r2, #0
   d538e:	4611      	mov	r1, r2
   d5390:	6840      	ldr	r0, [r0, #4]
   d5392:	f7ff b9cb 	b.w	d472c <network_get_listen_timeout>

000d5396 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5396:	2200      	movs	r2, #0
   d5398:	6840      	ldr	r0, [r0, #4]
   d539a:	f7ff b9bf 	b.w	d471c <network_set_listen_timeout>

000d539e <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d539e:	2200      	movs	r2, #0
   d53a0:	f081 0101 	eor.w	r1, r1, #1
   d53a4:	6840      	ldr	r0, [r0, #4]
   d53a6:	f7ff b9a9 	b.w	d46fc <network_listen>

000d53aa <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d53aa:	2300      	movs	r3, #0
   d53ac:	461a      	mov	r2, r3
   d53ae:	4619      	mov	r1, r3
   d53b0:	6840      	ldr	r0, [r0, #4]
   d53b2:	f7ff b99b 	b.w	d46ec <network_off>

000d53b6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d53b6:	2300      	movs	r3, #0
   d53b8:	461a      	mov	r2, r3
   d53ba:	4619      	mov	r1, r3
   d53bc:	6840      	ldr	r0, [r0, #4]
   d53be:	f7ff b98d 	b.w	d46dc <network_on>

000d53c2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d53c2:	2200      	movs	r2, #0
   d53c4:	4611      	mov	r1, r2
   d53c6:	6840      	ldr	r0, [r0, #4]
   d53c8:	f7ff b970 	b.w	d46ac <network_connecting>

000d53cc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d53cc:	2200      	movs	r2, #0
   d53ce:	2102      	movs	r1, #2
   d53d0:	6840      	ldr	r0, [r0, #4]
   d53d2:	f7ff b973 	b.w	d46bc <network_disconnect>

000d53d6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d53d6:	2300      	movs	r3, #0
   d53d8:	461a      	mov	r2, r3
   d53da:	6840      	ldr	r0, [r0, #4]
   d53dc:	f7ff b95e 	b.w	d469c <network_connect>

000d53e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d53e0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d53e2:	4d0c      	ldr	r5, [pc, #48]	; (d5414 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d53e4:	2428      	movs	r4, #40	; 0x28
   d53e6:	4622      	mov	r2, r4
   d53e8:	2100      	movs	r1, #0
   d53ea:	4628      	mov	r0, r5
   d53ec:	f000 fe94 	bl	d6118 <memset>
        cid = -1;
   d53f0:	f04f 33ff 	mov.w	r3, #4294967295
   d53f4:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d53f6:	802c      	strh	r4, [r5, #0]
   d53f8:	4d07      	ldr	r5, [pc, #28]	; (d5418 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d53fa:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d53fc:	4628      	mov	r0, r5
   d53fe:	606b      	str	r3, [r5, #4]
   d5400:	4b06      	ldr	r3, [pc, #24]	; (d541c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d5402:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d5406:	4622      	mov	r2, r4
   d5408:	2100      	movs	r1, #0
   d540a:	f000 fe85 	bl	d6118 <memset>
        size = sizeof(*this);
   d540e:	812c      	strh	r4, [r5, #8]
   d5410:	bd38      	pop	{r3, r4, r5, pc}
   d5412:	bf00      	nop
   d5414:	2003e3f0 	.word	0x2003e3f0
   d5418:	2003e3c0 	.word	0x2003e3c0
   d541c:	000d6484 	.word	0x000d6484

000d5420 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5420:	4770      	bx	lr

000d5422 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5422:	7441      	strb	r1, [r0, #17]
   d5424:	4770      	bx	lr

000d5426 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5426:	7c00      	ldrb	r0, [r0, #16]
   d5428:	f7ff b852 	b.w	d44d0 <HAL_USART_Available_Data_For_Write>

000d542c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d542c:	7c00      	ldrb	r0, [r0, #16]
   d542e:	f7ff b827 	b.w	d4480 <HAL_USART_Available_Data>

000d5432 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5432:	7c00      	ldrb	r0, [r0, #16]
   d5434:	f7ff b834 	b.w	d44a0 <HAL_USART_Peek_Data>

000d5438 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5438:	7c00      	ldrb	r0, [r0, #16]
   d543a:	f7ff b829 	b.w	d4490 <HAL_USART_Read_Data>

000d543e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d543e:	7c00      	ldrb	r0, [r0, #16]
   d5440:	f7ff b836 	b.w	d44b0 <HAL_USART_Flush_Data>

000d5444 <_ZN11USARTSerialD0Ev>:
   d5444:	b510      	push	{r4, lr}
   d5446:	4604      	mov	r4, r0
   d5448:	f7fe fe29 	bl	d409e <_ZdlPv>
   d544c:	4620      	mov	r0, r4
   d544e:	bd10      	pop	{r4, pc}

000d5450 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5450:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5452:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5454:	4604      	mov	r4, r0
   d5456:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5458:	b925      	cbnz	r5, d5464 <_ZN11USARTSerial5writeEh+0x14>
   d545a:	7c00      	ldrb	r0, [r0, #16]
   d545c:	f7ff f838 	bl	d44d0 <HAL_USART_Available_Data_For_Write>
   d5460:	2800      	cmp	r0, #0
   d5462:	dd05      	ble.n	d5470 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5464:	4631      	mov	r1, r6
   d5466:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d546c:	f7ff b800 	b.w	d4470 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5470:	4628      	mov	r0, r5
   d5472:	bd70      	pop	{r4, r5, r6, pc}

000d5474 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5474:	b510      	push	{r4, lr}
   d5476:	4604      	mov	r4, r0
   d5478:	4608      	mov	r0, r1
   d547a:	4611      	mov	r1, r2
   d547c:	2200      	movs	r2, #0
   d547e:	6062      	str	r2, [r4, #4]
   d5480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5484:	60a2      	str	r2, [r4, #8]
   d5486:	4a05      	ldr	r2, [pc, #20]	; (d549c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5488:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d548a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d548c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d548e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5490:	461a      	mov	r2, r3
   d5492:	f7fe ffe5 	bl	d4460 <HAL_USART_Init>
}
   d5496:	4620      	mov	r0, r4
   d5498:	bd10      	pop	{r4, pc}
   d549a:	bf00      	nop
   d549c:	000d64b8 	.word	0x000d64b8

000d54a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d54a0:	7c00      	ldrb	r0, [r0, #16]
   d54a2:	f7ff b80d 	b.w	d44c0 <HAL_USART_Is_Enabled>
	...

000d54a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54aa:	4d0c      	ldr	r5, [pc, #48]	; (d54dc <_Z22__fetch_global_Serial1v+0x34>)
   d54ac:	6829      	ldr	r1, [r5, #0]
   d54ae:	f011 0401 	ands.w	r4, r1, #1
   d54b2:	d111      	bne.n	d54d8 <_Z22__fetch_global_Serial1v+0x30>
   d54b4:	4628      	mov	r0, r5
   d54b6:	f7fe fdf6 	bl	d40a6 <__cxa_guard_acquire>
   d54ba:	b168      	cbz	r0, d54d8 <_Z22__fetch_global_Serial1v+0x30>
   d54bc:	4a08      	ldr	r2, [pc, #32]	; (d54e0 <_Z22__fetch_global_Serial1v+0x38>)
   d54be:	4b09      	ldr	r3, [pc, #36]	; (d54e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d54c0:	4809      	ldr	r0, [pc, #36]	; (d54e8 <_Z22__fetch_global_Serial1v+0x40>)
   d54c2:	4621      	mov	r1, r4
   d54c4:	f7ff ffd6 	bl	d5474 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d54c8:	4628      	mov	r0, r5
   d54ca:	f7fe fdf1 	bl	d40b0 <__cxa_guard_release>
   d54ce:	4a07      	ldr	r2, [pc, #28]	; (d54ec <_Z22__fetch_global_Serial1v+0x44>)
   d54d0:	4907      	ldr	r1, [pc, #28]	; (d54f0 <_Z22__fetch_global_Serial1v+0x48>)
   d54d2:	4805      	ldr	r0, [pc, #20]	; (d54e8 <_Z22__fetch_global_Serial1v+0x40>)
   d54d4:	f000 fc8e 	bl	d5df4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d54d8:	4803      	ldr	r0, [pc, #12]	; (d54e8 <_Z22__fetch_global_Serial1v+0x40>)
   d54da:	bd38      	pop	{r3, r4, r5, pc}
   d54dc:	2003e4b0 	.word	0x2003e4b0
   d54e0:	2003e4b4 	.word	0x2003e4b4
   d54e4:	2003e42c 	.word	0x2003e42c
   d54e8:	2003e418 	.word	0x2003e418
   d54ec:	2003e364 	.word	0x2003e364
   d54f0:	000d5421 	.word	0x000d5421

000d54f4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d54f4:	4770      	bx	lr

000d54f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d54f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54f8:	4606      	mov	r6, r0
   d54fa:	4615      	mov	r5, r2
   d54fc:	460c      	mov	r4, r1
   d54fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5500:	42bc      	cmp	r4, r7
   d5502:	d006      	beq.n	d5512 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5504:	6833      	ldr	r3, [r6, #0]
   d5506:	f814 1b01 	ldrb.w	r1, [r4], #1
   d550a:	689b      	ldr	r3, [r3, #8]
   d550c:	4630      	mov	r0, r6
   d550e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5510:	e7f6      	b.n	d5500 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5512:	4628      	mov	r0, r5
   d5514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5516 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5516:	2200      	movs	r2, #0
   d5518:	7c00      	ldrb	r0, [r0, #16]
   d551a:	f7fe bfe1 	b.w	d44e0 <HAL_I2C_Write_Data>

000d551e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d551e:	2100      	movs	r1, #0
   d5520:	7c00      	ldrb	r0, [r0, #16]
   d5522:	f7fe bfe5 	b.w	d44f0 <HAL_I2C_Available_Data>

000d5526 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5526:	2100      	movs	r1, #0
   d5528:	7c00      	ldrb	r0, [r0, #16]
   d552a:	f7fe bfe9 	b.w	d4500 <HAL_I2C_Read_Data>

000d552e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d552e:	2100      	movs	r1, #0
   d5530:	7c00      	ldrb	r0, [r0, #16]
   d5532:	f7fe bfed 	b.w	d4510 <HAL_I2C_Peek_Data>

000d5536 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5536:	2100      	movs	r1, #0
   d5538:	7c00      	ldrb	r0, [r0, #16]
   d553a:	f7fe bff1 	b.w	d4520 <HAL_I2C_Flush_Data>

000d553e <_ZN7TwoWireD0Ev>:
   d553e:	b510      	push	{r4, lr}
   d5540:	4604      	mov	r4, r0
   d5542:	f7fe fdac 	bl	d409e <_ZdlPv>
   d5546:	4620      	mov	r0, r4
   d5548:	bd10      	pop	{r4, pc}
	...

000d554c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d554c:	b510      	push	{r4, lr}
   d554e:	4604      	mov	r4, r0
   d5550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5554:	4608      	mov	r0, r1
   d5556:	60a3      	str	r3, [r4, #8]
   d5558:	2100      	movs	r1, #0
   d555a:	4b04      	ldr	r3, [pc, #16]	; (d556c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d555c:	7420      	strb	r0, [r4, #16]
   d555e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5560:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5562:	f7fe ffed 	bl	d4540 <HAL_I2C_Init>

}
   d5566:	4620      	mov	r0, r4
   d5568:	bd10      	pop	{r4, pc}
   d556a:	bf00      	nop
   d556c:	000d64e8 	.word	0x000d64e8

000d5570 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5570:	2100      	movs	r1, #0
   d5572:	7c00      	ldrb	r0, [r0, #16]
   d5574:	f7fe bfdc 	b.w	d4530 <HAL_I2C_Is_Enabled>

000d5578 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5578:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d557a:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d557c:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d557e:	b10b      	cbz	r3, d5584 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d5580:	68c0      	ldr	r0, [r0, #12]
   d5582:	e006      	b.n	d5592 <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d5584:	6840      	ldr	r0, [r0, #4]
   d5586:	b128      	cbz	r0, d5594 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5588:	6883      	ldr	r3, [r0, #8]
   d558a:	b90b      	cbnz	r3, d5590 <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d558c:	f000 fc51 	bl	d5e32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5590:	68c3      	ldr	r3, [r0, #12]
   d5592:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d5594:	2301      	movs	r3, #1
   d5596:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d5598:	2000      	movs	r0, #0
    }
   d559a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d559e:	f7fe bf2f 	b.w	d4400 <os_thread_exit>

000d55a2 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55a2:	2200      	movs	r2, #0
   d55a4:	4611      	mov	r1, r2
   d55a6:	6840      	ldr	r0, [r0, #4]
   d55a8:	f7ff b8b0 	b.w	d470c <network_listening>

000d55ac <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55ac:	2200      	movs	r2, #0
   d55ae:	4611      	mov	r1, r2
   d55b0:	6840      	ldr	r0, [r0, #4]
   d55b2:	f7ff b8bb 	b.w	d472c <network_get_listen_timeout>

000d55b6 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55b6:	2200      	movs	r2, #0
   d55b8:	6840      	ldr	r0, [r0, #4]
   d55ba:	f7ff b8af 	b.w	d471c <network_set_listen_timeout>

000d55be <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55be:	2200      	movs	r2, #0
   d55c0:	f081 0101 	eor.w	r1, r1, #1
   d55c4:	6840      	ldr	r0, [r0, #4]
   d55c6:	f7ff b899 	b.w	d46fc <network_listen>

000d55ca <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d55ca:	2300      	movs	r3, #0
   d55cc:	461a      	mov	r2, r3
   d55ce:	4619      	mov	r1, r3
   d55d0:	6840      	ldr	r0, [r0, #4]
   d55d2:	f7ff b88b 	b.w	d46ec <network_off>

000d55d6 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55d6:	2300      	movs	r3, #0
   d55d8:	461a      	mov	r2, r3
   d55da:	4619      	mov	r1, r3
   d55dc:	6840      	ldr	r0, [r0, #4]
   d55de:	f7ff b87d 	b.w	d46dc <network_on>

000d55e2 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55e2:	2200      	movs	r2, #0
   d55e4:	4611      	mov	r1, r2
   d55e6:	6840      	ldr	r0, [r0, #4]
   d55e8:	f7ff b870 	b.w	d46cc <network_ready>

000d55ec <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55ec:	2200      	movs	r2, #0
   d55ee:	4611      	mov	r1, r2
   d55f0:	6840      	ldr	r0, [r0, #4]
   d55f2:	f7ff b85b 	b.w	d46ac <network_connecting>

000d55f6 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55f6:	2200      	movs	r2, #0
   d55f8:	2102      	movs	r1, #2
   d55fa:	6840      	ldr	r0, [r0, #4]
   d55fc:	f7ff b85e 	b.w	d46bc <network_disconnect>

000d5600 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5600:	2300      	movs	r3, #0
   d5602:	461a      	mov	r2, r3
   d5604:	6840      	ldr	r0, [r0, #4]
   d5606:	f7ff b849 	b.w	d469c <network_connect>

000d560a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d560a:	b110      	cbz	r0, d5612 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d560c:	6803      	ldr	r3, [r0, #0]
   d560e:	685b      	ldr	r3, [r3, #4]
   d5610:	4718      	bx	r3
   d5612:	4770      	bx	lr

000d5614 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5614:	b538      	push	{r3, r4, r5, lr}
   d5616:	4604      	mov	r4, r0
   d5618:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d561a:	b1d0      	cbz	r0, d5652 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d561c:	f7fe feb8 	bl	d4390 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d5620:	b9b8      	cbnz	r0, d5652 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5622:	7c23      	ldrb	r3, [r4, #16]
   d5624:	b91b      	cbnz	r3, d562e <_ZN6Thread7disposeEv+0x1a>
   d5626:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5628:	b108      	cbz	r0, d562e <_ZN6Thread7disposeEv+0x1a>
   d562a:	f7fe feb9 	bl	d43a0 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d562e:	6865      	ldr	r5, [r4, #4]
   d5630:	b155      	cbz	r5, d5648 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5632:	68ab      	ldr	r3, [r5, #8]
   d5634:	b11b      	cbz	r3, d563e <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5636:	2203      	movs	r2, #3
   d5638:	4629      	mov	r1, r5
   d563a:	4628      	mov	r0, r5
   d563c:	4798      	blx	r3
            delete wrapper;
   d563e:	4628      	mov	r0, r5
   d5640:	f7fe fd2d 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d5644:	2300      	movs	r3, #0
   d5646:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5648:	6820      	ldr	r0, [r4, #0]
   d564a:	f7fe feb1 	bl	d43b0 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d564e:	2300      	movs	r3, #0
   d5650:	6023      	str	r3, [r4, #0]
   d5652:	bd38      	pop	{r3, r4, r5, pc}

000d5654 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5654:	b538      	push	{r3, r4, r5, lr}
   d5656:	4b0b      	ldr	r3, [pc, #44]	; (d5684 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5658:	6003      	str	r3, [r0, #0]
   d565a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d565c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5660:	b108      	cbz	r0, d5666 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5662:	f7fe fd1e 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5666:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d566a:	b12d      	cbz	r5, d5678 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d566c:	4628      	mov	r0, r5
   d566e:	f7ff ffd1 	bl	d5614 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5672:	4628      	mov	r0, r5
   d5674:	f7fe fd13 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5678:	68a0      	ldr	r0, [r4, #8]
   d567a:	b108      	cbz	r0, d5680 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d567c:	f7ff ffc5 	bl	d560a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5680:	4620      	mov	r0, r4
   d5682:	bd38      	pop	{r3, r4, r5, pc}
   d5684:	000d6510 	.word	0x000d6510

000d5688 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5688:	6800      	ldr	r0, [r0, #0]
   d568a:	f7fe bea9 	b.w	d43e0 <os_mutex_recursive_lock>

000d568e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d568e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5692:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d5694:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d5698:	4606      	mov	r6, r0
   d569a:	4688      	mov	r8, r1
   d569c:	4691      	mov	r9, r2
   d569e:	469a      	mov	sl, r3
   d56a0:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d56a2:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d56a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d56a6:	454b      	cmp	r3, r9
   d56a8:	d129      	bne.n	d56fe <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d56aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d56ac:	4553      	cmp	r3, sl
   d56ae:	d126      	bne.n	d56fe <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d56b0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d56b4:	455b      	cmp	r3, fp
   d56b6:	d122      	bne.n	d56fe <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d56b8:	2140      	movs	r1, #64	; 0x40
   d56ba:	4640      	mov	r0, r8
   d56bc:	f000 fd79 	bl	d61b2 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d56c0:	4641      	mov	r1, r8
   d56c2:	4602      	mov	r2, r0
   d56c4:	4620      	mov	r0, r4
   d56c6:	f000 fd5f 	bl	d6188 <strncmp>
   d56ca:	b9c0      	cbnz	r0, d56fe <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d56cc:	b16f      	cbz	r7, d56ea <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d56ce:	210c      	movs	r1, #12
   d56d0:	4638      	mov	r0, r7
   d56d2:	f000 fd6e 	bl	d61b2 <strnlen>
                if (id_len)
   d56d6:	4602      	mov	r2, r0
   d56d8:	b138      	cbz	r0, d56ea <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d56da:	2358      	movs	r3, #88	; 0x58
   d56dc:	fb03 6005 	mla	r0, r3, r5, r6
   d56e0:	4639      	mov	r1, r7
   d56e2:	3049      	adds	r0, #73	; 0x49
   d56e4:	f000 fd50 	bl	d6188 <strncmp>
   d56e8:	e004      	b.n	d56f4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d56ea:	2058      	movs	r0, #88	; 0x58
   d56ec:	fb00 6505 	mla	r5, r0, r5, r6
   d56f0:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d56f4:	fab0 f080 	clz	r0, r0
   d56f8:	0940      	lsrs	r0, r0, #5
   d56fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d56fe:	3501      	adds	r5, #1
   d5700:	2d05      	cmp	r5, #5
   d5702:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d5706:	d1cd      	bne.n	d56a4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d5708:	2000      	movs	r0, #0
}
   d570a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5710 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5714:	b085      	sub	sp, #20
   d5716:	4607      	mov	r7, r0
   d5718:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d571c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d571e:	9601      	str	r6, [sp, #4]
   d5720:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5724:	4689      	mov	r9, r1
   d5726:	9202      	str	r2, [sp, #8]
   d5728:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d572a:	f7ff ffb0 	bl	d568e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d572e:	2800      	cmp	r0, #0
   d5730:	d13c      	bne.n	d57ac <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d5732:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5734:	2358      	movs	r3, #88	; 0x58
   d5736:	fb03 7504 	mla	r5, r3, r4, r7
   d573a:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d573e:	f1b8 0f00 	cmp.w	r8, #0
   d5742:	d12e      	bne.n	d57a2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5744:	2140      	movs	r1, #64	; 0x40
   d5746:	4648      	mov	r0, r9
   d5748:	f000 fd33 	bl	d61b2 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d574c:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d574e:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5750:	4602      	mov	r2, r0
   d5752:	4628      	mov	r0, r5
   d5754:	f000 fcd5 	bl	d6102 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d5758:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d575c:	4641      	mov	r1, r8
   d575e:	eb05 000b 	add.w	r0, r5, fp
   d5762:	f000 fcd9 	bl	d6118 <memset>
            event_handlers[i].handler = handler;
   d5766:	9b02      	ldr	r3, [sp, #8]
   d5768:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d576a:	9b03      	ldr	r3, [sp, #12]
   d576c:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d576e:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d5772:	b12e      	cbz	r6, d5780 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d5774:	210c      	movs	r1, #12
   d5776:	4630      	mov	r0, r6
   d5778:	f000 fd1b 	bl	d61b2 <strnlen>
   d577c:	4605      	mov	r5, r0
   d577e:	e000      	b.n	d5782 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d5780:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d5782:	2058      	movs	r0, #88	; 0x58
   d5784:	4344      	muls	r4, r0
   d5786:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d5788:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d578a:	462a      	mov	r2, r5
   d578c:	4631      	mov	r1, r6
   d578e:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d5790:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d5792:	f000 fcb6 	bl	d6102 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d5796:	2000      	movs	r0, #0
   d5798:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d579c:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d57a0:	e005      	b.n	d57ae <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d57a2:	3401      	adds	r4, #1
   d57a4:	2c05      	cmp	r4, #5
   d57a6:	d1c6      	bne.n	d5736 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d57a8:	4802      	ldr	r0, [pc, #8]	; (d57b4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d57aa:	e000      	b.n	d57ae <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d57ac:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d57ae:	b005      	add	sp, #20
   d57b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57b4:	fffffefc 	.word	0xfffffefc

000d57b8 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d57b8:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d57ba:	2300      	movs	r3, #0
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	9300      	str	r3, [sp, #0]
   d57c0:	f7ff ffa6 	bl	d5710 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d57c4:	b003      	add	sp, #12
   d57c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d57ca <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d57ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d57ce:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d57d0:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d57d2:	460d      	mov	r5, r1
   d57d4:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d57d6:	f000 fccf 	bl	d6178 <strlen>
   d57da:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d57de:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d57e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d57e2:	b1ab      	cbz	r3, d5810 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d57e4:	2140      	movs	r1, #64	; 0x40
   d57e6:	4620      	mov	r0, r4
   d57e8:	f000 fce3 	bl	d61b2 <strnlen>

        if (event_name_length < filter_length)
   d57ec:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d57ee:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d57f0:	d30b      	bcc.n	d580a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d57f2:	4629      	mov	r1, r5
   d57f4:	4620      	mov	r0, r4
   d57f6:	f000 fc75 	bl	d60e4 <memcmp>
        if (0 == cmp)
   d57fa:	b930      	cbnz	r0, d580a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d57fc:	9000      	str	r0, [sp, #0]
   d57fe:	4643      	mov	r3, r8
   d5800:	462a      	mov	r2, r5
   d5802:	4621      	mov	r1, r4
   d5804:	2058      	movs	r0, #88	; 0x58
   d5806:	f7fe ff3f 	bl	d4688 <system_invoke_event_handler>
   d580a:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d580c:	42b4      	cmp	r4, r6
   d580e:	d1e7      	bne.n	d57e0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d5810:	b002      	add	sp, #8
   d5812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5818 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5818:	b530      	push	{r4, r5, lr}
   d581a:	b08d      	sub	sp, #52	; 0x34
   d581c:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d581e:	2211      	movs	r2, #17
   d5820:	2100      	movs	r1, #0
   d5822:	a801      	add	r0, sp, #4
   d5824:	f000 fc78 	bl	d6118 <memset>
    addr.v = 6;
   d5828:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d582a:	aa01      	add	r2, sp, #4
   d582c:	4909      	ldr	r1, [pc, #36]	; (d5854 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d582e:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5832:	200a      	movs	r0, #10
   d5834:	f7fe fdf4 	bl	d4420 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5838:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d583a:	a901      	add	r1, sp, #4
   d583c:	a806      	add	r0, sp, #24
   d583e:	f7ff fce7 	bl	d5210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5844:	3404      	adds	r4, #4
   d5846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5848:	682b      	ldr	r3, [r5, #0]
   d584a:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d584c:	2000      	movs	r0, #0
   d584e:	b00d      	add	sp, #52	; 0x34
   d5850:	bd30      	pop	{r4, r5, pc}
   d5852:	bf00      	nop
   d5854:	000d653c 	.word	0x000d653c

000d5858 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5858:	b530      	push	{r4, r5, lr}
   d585a:	4604      	mov	r4, r0
   d585c:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d585e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5862:	f7ff ff11 	bl	d5688 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d5866:	6823      	ldr	r3, [r4, #0]
   d5868:	bb83      	cbnz	r3, d58cc <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d586a:	204c      	movs	r0, #76	; 0x4c
   d586c:	f7fe fc13 	bl	d4096 <_Znwj>
   d5870:	4605      	mov	r5, r0
   d5872:	b108      	cbz	r0, d5878 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d5874:	f7ff fa9e 	bl	d4db4 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5878:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d587a:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d587c:	b108      	cbz	r0, d5882 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d587e:	f7ff fec4 	bl	d560a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5882:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d5884:	b320      	cbz	r0, d58d0 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d5886:	2200      	movs	r2, #0
   d5888:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d588c:	f7ff fac1 	bl	d4e12 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5890:	a908      	add	r1, sp, #32
   d5892:	2500      	movs	r5, #0
   d5894:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d5898:	4811      	ldr	r0, [pc, #68]	; (d58e0 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d589a:	f7fe fd29 	bl	d42f0 <if_name_to_index>
   d589e:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d58a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d58a4:	6803      	ldr	r3, [r0, #0]
   d58a6:	f249 0169 	movw	r1, #36969	; 0x9069
   d58aa:	6a1b      	ldr	r3, [r3, #32]
   d58ac:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d58ae:	a802      	add	r0, sp, #8
   d58b0:	f7ff fca0 	bl	d51f4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d58b4:	a802      	add	r0, sp, #8
   d58b6:	f7ff ffaf 	bl	d5818 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d58ba:	2800      	cmp	r0, #0
   d58bc:	db04      	blt.n	d58c8 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d58be:	a902      	add	r1, sp, #8
   d58c0:	6820      	ldr	r0, [r4, #0]
   d58c2:	f7ff fb0e 	bl	d4ee2 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d58c6:	e004      	b.n	d58d2 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d58c8:	4605      	mov	r5, r0
   d58ca:	e002      	b.n	d58d2 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d58cc:	2500      	movs	r5, #0
   d58ce:	e000      	b.n	d58d2 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d58d0:	4d04      	ldr	r5, [pc, #16]	; (d58e4 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d58d2:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d58d6:	f7fe fd8b 	bl	d43f0 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d58da:	4628      	mov	r0, r5
   d58dc:	b009      	add	sp, #36	; 0x24
   d58de:	bd30      	pop	{r4, r5, pc}
   d58e0:	000d6549 	.word	0x000d6549
   d58e4:	fffffefc 	.word	0xfffffefc

000d58e8 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d58e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d58ec:	4605      	mov	r5, r0
   d58ee:	b08c      	sub	sp, #48	; 0x30
   d58f0:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d58f2:	460f      	mov	r7, r1
   d58f4:	b109      	cbz	r1, d58fa <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d58f6:	780b      	ldrb	r3, [r1, #0]
   d58f8:	b90b      	cbnz	r3, d58fe <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d58fa:	4c35      	ldr	r4, [pc, #212]	; (d59d0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d58fc:	e064      	b.n	d59c8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d58fe:	4608      	mov	r0, r1
   d5900:	f000 fc3a 	bl	d6178 <strlen>
   d5904:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5906:	2e00      	cmp	r6, #0
   d5908:	d05c      	beq.n	d59c4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d590a:	4630      	mov	r0, r6
   d590c:	f000 fc34 	bl	d6178 <strlen>
   d5910:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5912:	f108 0302 	add.w	r3, r8, #2
   d5916:	4423      	add	r3, r4
   d5918:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d591c:	d84f      	bhi.n	d59be <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d591e:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d5922:	f7ff feb1 	bl	d5688 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d5926:	4628      	mov	r0, r5
   d5928:	f7ff ff96 	bl	d5858 <_ZN5spark11MeshPublish14initialize_udpEv>
   d592c:	2800      	cmp	r0, #0
   d592e:	db40      	blt.n	d59b2 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d5930:	4668      	mov	r0, sp
   d5932:	f7ff fc5f 	bl	d51f4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5936:	4668      	mov	r0, sp
   d5938:	f7ff ff6e 	bl	d5818 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d593c:	2800      	cmp	r0, #0
   d593e:	db38      	blt.n	d59b2 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d5940:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d5944:	f8da 3000 	ldr.w	r3, [sl]
   d5948:	f10d 0c04 	add.w	ip, sp, #4
   d594c:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d5950:	4b20      	ldr	r3, [pc, #128]	; (d59d4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d5952:	9306      	str	r3, [sp, #24]
   d5954:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5958:	f10d 0e1c 	add.w	lr, sp, #28
   d595c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5960:	f8dc 3000 	ldr.w	r3, [ip]
   d5964:	f88e 3000 	strb.w	r3, [lr]
   d5968:	f249 0269 	movw	r2, #36969	; 0x9069
   d596c:	a906      	add	r1, sp, #24
   d596e:	4650      	mov	r0, sl
   d5970:	47c8      	blx	r9
   d5972:	2800      	cmp	r0, #0
   d5974:	db1d      	blt.n	d59b2 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d5976:	2300      	movs	r3, #0
   d5978:	6828      	ldr	r0, [r5, #0]
   d597a:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d597e:	6803      	ldr	r3, [r0, #0]
   d5980:	2201      	movs	r2, #1
   d5982:	68db      	ldr	r3, [r3, #12]
   d5984:	a906      	add	r1, sp, #24
   d5986:	4798      	blx	r3
   d5988:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d598a:	6803      	ldr	r3, [r0, #0]
   d598c:	f108 0201 	add.w	r2, r8, #1
   d5990:	68db      	ldr	r3, [r3, #12]
   d5992:	4639      	mov	r1, r7
   d5994:	4798      	blx	r3
    if (dataLen > 0) {
   d5996:	b12c      	cbz	r4, d59a4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d5998:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d599a:	6803      	ldr	r3, [r0, #0]
   d599c:	4622      	mov	r2, r4
   d599e:	68db      	ldr	r3, [r3, #12]
   d59a0:	4631      	mov	r1, r6
   d59a2:	4798      	blx	r3
   d59a4:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d59a6:	6803      	ldr	r3, [r0, #0]
   d59a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d59aa:	4798      	blx	r3
   d59ac:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d59b0:	e000      	b.n	d59b4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d59b2:	4604      	mov	r4, r0
   d59b4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d59b8:	f7fe fd1a 	bl	d43f0 <os_mutex_recursive_unlock>
   d59bc:	e004      	b.n	d59c8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d59be:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d59c2:	e001      	b.n	d59c8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d59c4:	4634      	mov	r4, r6
   d59c6:	e7a4      	b.n	d5912 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d59c8:	4620      	mov	r0, r4
   d59ca:	b00c      	add	sp, #48	; 0x30
   d59cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d59d0:	fffffef2 	.word	0xfffffef2
   d59d4:	000d6440 	.word	0x000d6440

000d59d8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d59d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d59dc:	4604      	mov	r4, r0
   d59de:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d59e2:	460f      	mov	r7, r1
   d59e4:	4690      	mov	r8, r2
   d59e6:	f7ff fe4f 	bl	d5688 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d59ea:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d59ee:	b9fe      	cbnz	r6, d5a30 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d59f0:	491a      	ldr	r1, [pc, #104]	; (d5a5c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x84>)
   d59f2:	2014      	movs	r0, #20
   d59f4:	f000 fa0e 	bl	d5e14 <_ZnwjRKSt9nothrow_t>
   d59f8:	4605      	mov	r5, r0
   d59fa:	b170      	cbz	r0, d5a1a <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x42>

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d59fc:	4b18      	ldr	r3, [pc, #96]	; (d5a60 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x88>)
   d59fe:	6083      	str	r3, [r0, #8]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5a00:	f44f 6340 	mov.w	r3, #3072	; 0xc00

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d5a04:	6006      	str	r6, [r0, #0]
   d5a06:	6046      	str	r6, [r0, #4]
   d5a08:	60c4      	str	r4, [r0, #12]
   d5a0a:	7406      	strb	r6, [r0, #16]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5a0c:	2203      	movs	r2, #3
   d5a0e:	9301      	str	r3, [sp, #4]
   d5a10:	9000      	str	r0, [sp, #0]
   d5a12:	4b14      	ldr	r3, [pc, #80]	; (d5a64 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8c>)
   d5a14:	4914      	ldr	r1, [pc, #80]	; (d5a68 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x90>)
   d5a16:	f7fe fcb3 	bl	d4380 <os_thread_create>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a1a:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d5a1e:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5a22:	b12e      	cbz	r6, d5a30 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        }
    }

    ~Thread()
    {
        dispose();
   d5a24:	4630      	mov	r0, r6
   d5a26:	f7ff fdf5 	bl	d5614 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a2a:	4630      	mov	r0, r6
   d5a2c:	f7fe fb37 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d5a30:	4620      	mov	r0, r4
   d5a32:	f7ff ff11 	bl	d5858 <_ZN5spark11MeshPublish14initialize_udpEv>
   d5a36:	2800      	cmp	r0, #0
   d5a38:	db07      	blt.n	d5a4a <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x72>
    CHECK(subscriptions.add(prefix, handler));
   d5a3a:	4642      	mov	r2, r8
   d5a3c:	4639      	mov	r1, r7
   d5a3e:	1d20      	adds	r0, r4, #4
   d5a40:	f7ff feba 	bl	d57b8 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d5a44:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d5a48:	e000      	b.n	d5a4c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x74>
   d5a4a:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5a4c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5a50:	f7fe fcce 	bl	d43f0 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d5a54:	4628      	mov	r0, r5
   d5a56:	b002      	add	sp, #8
   d5a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a5c:	000d65a0 	.word	0x000d65a0
   d5a60:	000d5b7d 	.word	0x000d5b7d
   d5a64:	000d5579 	.word	0x000d5579
   d5a68:	000d654d 	.word	0x000d654d

000d5a6c <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a70:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d5a72:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5a76:	b08a      	sub	sp, #40	; 0x28
   d5a78:	4630      	mov	r0, r6
   d5a7a:	f7ff fe05 	bl	d5688 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a7e:	682c      	ldr	r4, [r5, #0]
   d5a80:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5a84:	f7fe fcb4 	bl	d43f0 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d5a88:	2c00      	cmp	r4, #0
   d5a8a:	d063      	beq.n	d5b54 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d5a8c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5a90:	b163      	cbz	r3, d5aac <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d5a92:	6823      	ldr	r3, [r4, #0]
   d5a94:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d5a98:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5aa0:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d5aa4:	47b8      	blx	r7
        if (len > 0) {
   d5aa6:	1e04      	subs	r4, r0, #0
   d5aa8:	dc13      	bgt.n	d5ad2 <_ZN5spark11MeshPublish4pollEv+0x66>
   d5aaa:	e056      	b.n	d5b5a <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d5aac:	492d      	ldr	r1, [pc, #180]	; (d5b64 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d5aae:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d5ab2:	f000 f9ad 	bl	d5e10 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ab6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d5aba:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d5abe:	b113      	cbz	r3, d5ac6 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5ac0:	4618      	mov	r0, r3
   d5ac2:	f7fe faee 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d5ac6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5aca:	2b00      	cmp	r3, #0
   d5acc:	d1e1      	bne.n	d5a92 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d5ace:	4826      	ldr	r0, [pc, #152]	; (d5b68 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d5ad0:	e044      	b.n	d5b5c <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d5ad2:	2320      	movs	r3, #32
   d5ad4:	4a25      	ldr	r2, [pc, #148]	; (d5b6c <_ZN5spark11MeshPublish4pollEv+0x100>)
   d5ad6:	9302      	str	r3, [sp, #8]
   d5ad8:	9200      	str	r2, [sp, #0]
   d5ada:	2300      	movs	r3, #0
   d5adc:	9401      	str	r4, [sp, #4]
   d5ade:	aa02      	add	r2, sp, #8
   d5ae0:	4923      	ldr	r1, [pc, #140]	; (d5b70 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d5ae2:	9303      	str	r3, [sp, #12]
   d5ae4:	2001      	movs	r0, #1
   d5ae6:	f7fe fda3 	bl	d4630 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5aea:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d5aee:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d5af0:	781b      	ldrb	r3, [r3, #0]
   d5af2:	bb6b      	cbnz	r3, d5b50 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d5af4:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d5af6:	4621      	mov	r1, r4
   d5af8:	4638      	mov	r0, r7
   d5afa:	f000 fb5a 	bl	d61b2 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d5afe:	b338      	cbz	r0, d5b50 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5b00:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5b02:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d5b04:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5b08:	dd22      	ble.n	d5b50 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5b0a:	5c3b      	ldrb	r3, [r7, r0]
   d5b0c:	bb03      	cbnz	r3, d5b50 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d5b0e:	3c01      	subs	r4, #1
   d5b10:	d00e      	beq.n	d5b30 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d5b12:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d5b16:	4621      	mov	r1, r4
   d5b18:	4640      	mov	r0, r8
   d5b1a:	f000 fb4a 	bl	d61b2 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d5b1e:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5b20:	2c00      	cmp	r4, #0
   d5b22:	dd15      	ble.n	d5b50 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5b24:	f818 3000 	ldrb.w	r3, [r8, r0]
   d5b28:	b993      	cbnz	r3, d5b50 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d5b2a:	2c01      	cmp	r4, #1
   d5b2c:	d002      	beq.n	d5b34 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d5b2e:	e00f      	b.n	d5b50 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5b30:	f8df 8044 	ldr.w	r8, [pc, #68]	; d5b78 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d5b34:	4630      	mov	r0, r6
   d5b36:	f7ff fda7 	bl	d5688 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d5b3a:	4642      	mov	r2, r8
   d5b3c:	4639      	mov	r1, r7
   d5b3e:	1d28      	adds	r0, r5, #4
   d5b40:	f7ff fe43 	bl	d57ca <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d5b44:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5b48:	f7fe fc52 	bl	d43f0 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5b4c:	2000      	movs	r0, #0
   d5b4e:	e005      	b.n	d5b5c <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d5b50:	4808      	ldr	r0, [pc, #32]	; (d5b74 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d5b52:	e003      	b.n	d5b5c <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d5b54:	2064      	movs	r0, #100	; 0x64
   d5b56:	f7fe fbfb 	bl	d4350 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5b5a:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d5b5c:	b00a      	add	sp, #40	; 0x28
   d5b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b62:	bf00      	nop
   d5b64:	000d65a0 	.word	0x000d65a0
   d5b68:	fffffefc 	.word	0xfffffefc
   d5b6c:	000d655c 	.word	0x000d655c
   d5b70:	000d6555 	.word	0x000d6555
   d5b74:	fffffee8 	.word	0xfffffee8
   d5b78:	000d6346 	.word	0x000d6346

000d5b7c <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d5b80:	4620      	mov	r0, r4
   d5b82:	f7ff ff73 	bl	d5a6c <_ZN5spark11MeshPublish4pollEv>
   d5b86:	e7fb      	b.n	d5b80 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d5b88 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5b88:	b538      	push	{r3, r4, r5, lr}
   d5b8a:	4c0d      	ldr	r4, [pc, #52]	; (d5bc0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5b8c:	4b0d      	ldr	r3, [pc, #52]	; (d5bc4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5b8e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5b90:	2500      	movs	r5, #0
   d5b92:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5b94:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5b98:	6063      	str	r3, [r4, #4]
   d5b9a:	60a5      	str	r5, [r4, #8]
   d5b9c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ba0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5ba4:	f7fe fc14 	bl	d43d0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5ba8:	4b07      	ldr	r3, [pc, #28]	; (d5bc8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5baa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5bae:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	4a06      	ldr	r2, [pc, #24]	; (d5bcc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5bb4:	4906      	ldr	r1, [pc, #24]	; (d5bd0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5bba:	f000 b91b 	b.w	d5df4 <__aeabi_atexit>
   d5bbe:	bf00      	nop
   d5bc0:	2003e538 	.word	0x2003e538
   d5bc4:	000d6574 	.word	0x000d6574
   d5bc8:	000d6510 	.word	0x000d6510
   d5bcc:	2003e364 	.word	0x2003e364
   d5bd0:	000d5655 	.word	0x000d5655

000d5bd4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5bd4:	2300      	movs	r3, #0
   d5bd6:	461a      	mov	r2, r3
   d5bd8:	6840      	ldr	r0, [r0, #4]
   d5bda:	f7fe bd5f 	b.w	d469c <network_connect>

000d5bde <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5bde:	2200      	movs	r2, #0
   d5be0:	2102      	movs	r1, #2
   d5be2:	6840      	ldr	r0, [r0, #4]
   d5be4:	f7fe bd6a 	b.w	d46bc <network_disconnect>

000d5be8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5be8:	2200      	movs	r2, #0
   d5bea:	4611      	mov	r1, r2
   d5bec:	6840      	ldr	r0, [r0, #4]
   d5bee:	f7fe bd5d 	b.w	d46ac <network_connecting>

000d5bf2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5bf2:	2200      	movs	r2, #0
   d5bf4:	4611      	mov	r1, r2
   d5bf6:	6840      	ldr	r0, [r0, #4]
   d5bf8:	f7fe bd68 	b.w	d46cc <network_ready>

000d5bfc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5bfc:	2300      	movs	r3, #0
   d5bfe:	461a      	mov	r2, r3
   d5c00:	4619      	mov	r1, r3
   d5c02:	6840      	ldr	r0, [r0, #4]
   d5c04:	f7fe bd6a 	b.w	d46dc <network_on>

000d5c08 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c08:	2300      	movs	r3, #0
   d5c0a:	461a      	mov	r2, r3
   d5c0c:	4619      	mov	r1, r3
   d5c0e:	6840      	ldr	r0, [r0, #4]
   d5c10:	f7fe bd6c 	b.w	d46ec <network_off>

000d5c14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c14:	2200      	movs	r2, #0
   d5c16:	f081 0101 	eor.w	r1, r1, #1
   d5c1a:	6840      	ldr	r0, [r0, #4]
   d5c1c:	f7fe bd6e 	b.w	d46fc <network_listen>

000d5c20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c20:	2200      	movs	r2, #0
   d5c22:	6840      	ldr	r0, [r0, #4]
   d5c24:	f7fe bd7a 	b.w	d471c <network_set_listen_timeout>

000d5c28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c28:	2200      	movs	r2, #0
   d5c2a:	4611      	mov	r1, r2
   d5c2c:	6840      	ldr	r0, [r0, #4]
   d5c2e:	f7fe bd7d 	b.w	d472c <network_get_listen_timeout>

000d5c32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5c32:	2200      	movs	r2, #0
   d5c34:	4611      	mov	r1, r2
   d5c36:	6840      	ldr	r0, [r0, #4]
   d5c38:	f7fe bd68 	b.w	d470c <network_listening>

000d5c3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c3c:	b570      	push	{r4, r5, r6, lr}
   d5c3e:	b08c      	sub	sp, #48	; 0x30
   d5c40:	4614      	mov	r4, r2
   d5c42:	4606      	mov	r6, r0
    IPAddress addr;
   d5c44:	f7ff fad6 	bl	d51f4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c48:	ab0c      	add	r3, sp, #48	; 0x30
   d5c4a:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5c4c:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c4e:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5c52:	4620      	mov	r0, r4
   d5c54:	f7fe fb14 	bl	d4280 <netdb_getaddrinfo>
    if (!r && ai) {
   d5c58:	4601      	mov	r1, r0
   d5c5a:	bb58      	cbnz	r0, d5cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5c5c:	9b00      	ldr	r3, [sp, #0]
   d5c5e:	b34b      	cbz	r3, d5cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5c60:	685a      	ldr	r2, [r3, #4]
   d5c62:	2a02      	cmp	r2, #2
   d5c64:	d00e      	beq.n	d5c84 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5c66:	2a0a      	cmp	r2, #10
   d5c68:	d124      	bne.n	d5cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5c6a:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5c6c:	2211      	movs	r2, #17
   d5c6e:	a801      	add	r0, sp, #4
   d5c70:	f000 fa52 	bl	d6118 <memset>
                a.v = 6;
   d5c74:	2306      	movs	r3, #6
   d5c76:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c7a:	ad01      	add	r5, sp, #4
   d5c7c:	f104 0308 	add.w	r3, r4, #8
   d5c80:	3418      	adds	r4, #24
   d5c82:	e005      	b.n	d5c90 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5c84:	6959      	ldr	r1, [r3, #20]
   d5c86:	4630      	mov	r0, r6
   d5c88:	3104      	adds	r1, #4
   d5c8a:	f7ff faf6 	bl	d527a <_ZN9IPAddressaSEPKh>
                break;
   d5c8e:	e011      	b.n	d5cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c90:	6818      	ldr	r0, [r3, #0]
   d5c92:	6859      	ldr	r1, [r3, #4]
   d5c94:	462a      	mov	r2, r5
   d5c96:	c203      	stmia	r2!, {r0, r1}
   d5c98:	3308      	adds	r3, #8
   d5c9a:	42a3      	cmp	r3, r4
   d5c9c:	4615      	mov	r5, r2
   d5c9e:	d1f7      	bne.n	d5c90 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5ca0:	a901      	add	r1, sp, #4
   d5ca2:	a806      	add	r0, sp, #24
   d5ca4:	ad07      	add	r5, sp, #28
   d5ca6:	f7ff fab3 	bl	d5210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cac:	1d34      	adds	r4, r6, #4
   d5cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5cb0:	682b      	ldr	r3, [r5, #0]
   d5cb2:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d5cb4:	9800      	ldr	r0, [sp, #0]
   d5cb6:	f7fe fadb 	bl	d4270 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5cba:	4630      	mov	r0, r6
   d5cbc:	b00c      	add	sp, #48	; 0x30
   d5cbe:	bd70      	pop	{r4, r5, r6, pc}

000d5cc0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5cc0:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5cc2:	4a03      	ldr	r2, [pc, #12]	; (d5cd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5cc4:	601a      	str	r2, [r3, #0]
   d5cc6:	2200      	movs	r2, #0
   d5cc8:	605a      	str	r2, [r3, #4]
   d5cca:	4770      	bx	lr
   d5ccc:	2003e708 	.word	0x2003e708
   d5cd0:	000d6574 	.word	0x000d6574

000d5cd4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5cd4:	b510      	push	{r4, lr}
   d5cd6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5cd8:	480f      	ldr	r0, [pc, #60]	; (d5d18 <pinAvailable+0x44>)
   d5cda:	f7fe fdb9 	bl	d4850 <_ZN8SPIClass9isEnabledEv>
   d5cde:	b128      	cbz	r0, d5cec <pinAvailable+0x18>
   d5ce0:	f1a4 030b 	sub.w	r3, r4, #11
   d5ce4:	2b02      	cmp	r3, #2
   d5ce6:	d801      	bhi.n	d5cec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5ce8:	2000      	movs	r0, #0
   d5cea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5cec:	f000 f862 	bl	d5db4 <_Z19__fetch_global_Wirev>
   d5cf0:	f7ff fc3e 	bl	d5570 <_ZN7TwoWire9isEnabledEv>
   d5cf4:	b108      	cbz	r0, d5cfa <pinAvailable+0x26>
   d5cf6:	2c01      	cmp	r4, #1
   d5cf8:	d9f6      	bls.n	d5ce8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5cfa:	f7ff fbd5 	bl	d54a8 <_Z22__fetch_global_Serial1v>
   d5cfe:	f7ff fbcf 	bl	d54a0 <_ZN11USARTSerial9isEnabledEv>
   d5d02:	b118      	cbz	r0, d5d0c <pinAvailable+0x38>
   d5d04:	f1a4 0309 	sub.w	r3, r4, #9
   d5d08:	2b01      	cmp	r3, #1
   d5d0a:	d9ed      	bls.n	d5ce8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5d0c:	2c23      	cmp	r4, #35	; 0x23
   d5d0e:	bf8c      	ite	hi
   d5d10:	2000      	movhi	r0, #0
   d5d12:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5d14:	bd10      	pop	{r4, pc}
   d5d16:	bf00      	nop
   d5d18:	2003e710 	.word	0x2003e710

000d5d1c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d1c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5d1e:	b538      	push	{r3, r4, r5, lr}
   d5d20:	4604      	mov	r4, r0
   d5d22:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d24:	d80a      	bhi.n	d5d3c <pinMode+0x20>
   d5d26:	29ff      	cmp	r1, #255	; 0xff
   d5d28:	d008      	beq.n	d5d3c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5d2a:	f7ff ffd3 	bl	d5cd4 <pinAvailable>
   d5d2e:	b128      	cbz	r0, d5d3c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5d30:	4629      	mov	r1, r5
   d5d32:	4620      	mov	r0, r4
}
   d5d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5d38:	f7fe bab2 	b.w	d42a0 <HAL_Pin_Mode>
   d5d3c:	bd38      	pop	{r3, r4, r5, pc}

000d5d3e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5d3e:	b538      	push	{r3, r4, r5, lr}
   d5d40:	4604      	mov	r4, r0
   d5d42:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5d44:	f7fe fab4 	bl	d42b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5d48:	28ff      	cmp	r0, #255	; 0xff
   d5d4a:	d010      	beq.n	d5d6e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5d4c:	2806      	cmp	r0, #6
   d5d4e:	d804      	bhi.n	d5d5a <digitalWrite+0x1c>
   d5d50:	234d      	movs	r3, #77	; 0x4d
   d5d52:	fa23 f000 	lsr.w	r0, r3, r0
   d5d56:	07c3      	lsls	r3, r0, #31
   d5d58:	d409      	bmi.n	d5d6e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5d5a:	4620      	mov	r0, r4
   d5d5c:	f7ff ffba 	bl	d5cd4 <pinAvailable>
   d5d60:	b128      	cbz	r0, d5d6e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d62:	4629      	mov	r1, r5
   d5d64:	4620      	mov	r0, r4
}
   d5d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d6a:	f7fe baa9 	b.w	d42c0 <HAL_GPIO_Write>
   d5d6e:	bd38      	pop	{r3, r4, r5, pc}

000d5d70 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5d70:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5d72:	4c0c      	ldr	r4, [pc, #48]	; (d5da4 <_GLOBAL__sub_I_SPI+0x34>)
   d5d74:	4e0c      	ldr	r6, [pc, #48]	; (d5da8 <_GLOBAL__sub_I_SPI+0x38>)
   d5d76:	4d0d      	ldr	r5, [pc, #52]	; (d5dac <_GLOBAL__sub_I_SPI+0x3c>)
   d5d78:	2100      	movs	r1, #0
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	f7fe fd54 	bl	d4828 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5d80:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5d82:	4c0b      	ldr	r4, [pc, #44]	; (d5db0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5d84:	4632      	mov	r2, r6
   d5d86:	4629      	mov	r1, r5
   d5d88:	f000 f834 	bl	d5df4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5d8c:	2101      	movs	r1, #1
   d5d8e:	4620      	mov	r0, r4
   d5d90:	f7fe fd4a 	bl	d4828 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5d94:	4632      	mov	r2, r6
   d5d96:	4629      	mov	r1, r5
   d5d98:	4620      	mov	r0, r4
   d5d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5d9e:	f000 b829 	b.w	d5df4 <__aeabi_atexit>
   d5da2:	bf00      	nop
   d5da4:	2003e710 	.word	0x2003e710
   d5da8:	2003e364 	.word	0x2003e364
   d5dac:	000d4819 	.word	0x000d4819
   d5db0:	2003e720 	.word	0x2003e720

000d5db4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5db4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5db6:	4d0b      	ldr	r5, [pc, #44]	; (d5de4 <_Z19__fetch_global_Wirev+0x30>)
   d5db8:	6829      	ldr	r1, [r5, #0]
   d5dba:	f011 0401 	ands.w	r4, r1, #1
   d5dbe:	d10f      	bne.n	d5de0 <_Z19__fetch_global_Wirev+0x2c>
   d5dc0:	4628      	mov	r0, r5
   d5dc2:	f7fe f970 	bl	d40a6 <__cxa_guard_acquire>
   d5dc6:	b158      	cbz	r0, d5de0 <_Z19__fetch_global_Wirev+0x2c>
   d5dc8:	4621      	mov	r1, r4
   d5dca:	4807      	ldr	r0, [pc, #28]	; (d5de8 <_Z19__fetch_global_Wirev+0x34>)
   d5dcc:	f7ff fbbe 	bl	d554c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5dd0:	4628      	mov	r0, r5
   d5dd2:	f7fe f96d 	bl	d40b0 <__cxa_guard_release>
   d5dd6:	4a05      	ldr	r2, [pc, #20]	; (d5dec <_Z19__fetch_global_Wirev+0x38>)
   d5dd8:	4905      	ldr	r1, [pc, #20]	; (d5df0 <_Z19__fetch_global_Wirev+0x3c>)
   d5dda:	4803      	ldr	r0, [pc, #12]	; (d5de8 <_Z19__fetch_global_Wirev+0x34>)
   d5ddc:	f000 f80a 	bl	d5df4 <__aeabi_atexit>
	return wire;
}
   d5de0:	4801      	ldr	r0, [pc, #4]	; (d5de8 <_Z19__fetch_global_Wirev+0x34>)
   d5de2:	bd38      	pop	{r3, r4, r5, pc}
   d5de4:	2003e734 	.word	0x2003e734
   d5de8:	2003e738 	.word	0x2003e738
   d5dec:	2003e364 	.word	0x2003e364
   d5df0:	000d54f5 	.word	0x000d54f5

000d5df4 <__aeabi_atexit>:
   d5df4:	460b      	mov	r3, r1
   d5df6:	4601      	mov	r1, r0
   d5df8:	4618      	mov	r0, r3
   d5dfa:	f000 b965 	b.w	d60c8 <__cxa_atexit>
	...

000d5e00 <_ZSt15get_new_handlerv>:
   d5e00:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <_ZSt15get_new_handlerv+0xc>)
   d5e02:	6818      	ldr	r0, [r3, #0]
   d5e04:	f3bf 8f5f 	dmb	sy
   d5e08:	4770      	bx	lr
   d5e0a:	bf00      	nop
   d5e0c:	2003e74c 	.word	0x2003e74c

000d5e10 <_ZnajRKSt9nothrow_t>:
   d5e10:	f000 b800 	b.w	d5e14 <_ZnwjRKSt9nothrow_t>

000d5e14 <_ZnwjRKSt9nothrow_t>:
   d5e14:	b510      	push	{r4, lr}
   d5e16:	2800      	cmp	r0, #0
   d5e18:	bf14      	ite	ne
   d5e1a:	4604      	movne	r4, r0
   d5e1c:	2401      	moveq	r4, #1
   d5e1e:	4620      	mov	r0, r4
   d5e20:	f7fe fc9c 	bl	d475c <malloc>
   d5e24:	b920      	cbnz	r0, d5e30 <_ZnwjRKSt9nothrow_t+0x1c>
   d5e26:	f7ff ffeb 	bl	d5e00 <_ZSt15get_new_handlerv>
   d5e2a:	b108      	cbz	r0, d5e30 <_ZnwjRKSt9nothrow_t+0x1c>
   d5e2c:	4780      	blx	r0
   d5e2e:	e7f6      	b.n	d5e1e <_ZnwjRKSt9nothrow_t+0xa>
   d5e30:	bd10      	pop	{r4, pc}

000d5e32 <_ZSt25__throw_bad_function_callv>:
   d5e32:	b508      	push	{r3, lr}
   d5e34:	f7fe fcaa 	bl	d478c <abort>

000d5e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e38:	4b18      	ldr	r3, [pc, #96]	; (d5e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e3a:	681a      	ldr	r2, [r3, #0]
   d5e3c:	07d1      	lsls	r1, r2, #31
   d5e3e:	bf5c      	itt	pl
   d5e40:	2201      	movpl	r2, #1
   d5e42:	601a      	strpl	r2, [r3, #0]
   d5e44:	4b16      	ldr	r3, [pc, #88]	; (d5ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e46:	681a      	ldr	r2, [r3, #0]
   d5e48:	07d2      	lsls	r2, r2, #31
   d5e4a:	bf5c      	itt	pl
   d5e4c:	2201      	movpl	r2, #1
   d5e4e:	601a      	strpl	r2, [r3, #0]
   d5e50:	4b14      	ldr	r3, [pc, #80]	; (d5ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e52:	681a      	ldr	r2, [r3, #0]
   d5e54:	07d0      	lsls	r0, r2, #31
   d5e56:	bf5c      	itt	pl
   d5e58:	2201      	movpl	r2, #1
   d5e5a:	601a      	strpl	r2, [r3, #0]
   d5e5c:	4b12      	ldr	r3, [pc, #72]	; (d5ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e5e:	681a      	ldr	r2, [r3, #0]
   d5e60:	07d1      	lsls	r1, r2, #31
   d5e62:	bf5c      	itt	pl
   d5e64:	2201      	movpl	r2, #1
   d5e66:	601a      	strpl	r2, [r3, #0]
   d5e68:	4b10      	ldr	r3, [pc, #64]	; (d5eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e6a:	681a      	ldr	r2, [r3, #0]
   d5e6c:	07d2      	lsls	r2, r2, #31
   d5e6e:	bf5c      	itt	pl
   d5e70:	2201      	movpl	r2, #1
   d5e72:	601a      	strpl	r2, [r3, #0]
   d5e74:	4b0e      	ldr	r3, [pc, #56]	; (d5eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5e76:	681a      	ldr	r2, [r3, #0]
   d5e78:	07d0      	lsls	r0, r2, #31
   d5e7a:	bf5c      	itt	pl
   d5e7c:	2201      	movpl	r2, #1
   d5e7e:	601a      	strpl	r2, [r3, #0]
   d5e80:	4b0c      	ldr	r3, [pc, #48]	; (d5eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5e82:	681a      	ldr	r2, [r3, #0]
   d5e84:	07d1      	lsls	r1, r2, #31
   d5e86:	bf5c      	itt	pl
   d5e88:	2201      	movpl	r2, #1
   d5e8a:	601a      	strpl	r2, [r3, #0]
   d5e8c:	4b0a      	ldr	r3, [pc, #40]	; (d5eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5e8e:	681a      	ldr	r2, [r3, #0]
   d5e90:	07d2      	lsls	r2, r2, #31
   d5e92:	bf5c      	itt	pl
   d5e94:	2201      	movpl	r2, #1
   d5e96:	601a      	strpl	r2, [r3, #0]
   d5e98:	4770      	bx	lr
   d5e9a:	bf00      	nop
   d5e9c:	2003e76c 	.word	0x2003e76c
   d5ea0:	2003e768 	.word	0x2003e768
   d5ea4:	2003e764 	.word	0x2003e764
   d5ea8:	2003e760 	.word	0x2003e760
   d5eac:	2003e75c 	.word	0x2003e75c
   d5eb0:	2003e758 	.word	0x2003e758
   d5eb4:	2003e754 	.word	0x2003e754
   d5eb8:	2003e750 	.word	0x2003e750

000d5ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ebc:	4b24      	ldr	r3, [pc, #144]	; (d5f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5ebe:	681a      	ldr	r2, [r3, #0]
   d5ec0:	07d0      	lsls	r0, r2, #31
   d5ec2:	bf5c      	itt	pl
   d5ec4:	2201      	movpl	r2, #1
   d5ec6:	601a      	strpl	r2, [r3, #0]
   d5ec8:	4b22      	ldr	r3, [pc, #136]	; (d5f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5eca:	681a      	ldr	r2, [r3, #0]
   d5ecc:	07d1      	lsls	r1, r2, #31
   d5ece:	bf5c      	itt	pl
   d5ed0:	2201      	movpl	r2, #1
   d5ed2:	601a      	strpl	r2, [r3, #0]
   d5ed4:	4b20      	ldr	r3, [pc, #128]	; (d5f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5ed6:	681a      	ldr	r2, [r3, #0]
   d5ed8:	07d2      	lsls	r2, r2, #31
   d5eda:	bf5c      	itt	pl
   d5edc:	2201      	movpl	r2, #1
   d5ede:	601a      	strpl	r2, [r3, #0]
   d5ee0:	4b1e      	ldr	r3, [pc, #120]	; (d5f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5ee2:	681a      	ldr	r2, [r3, #0]
   d5ee4:	07d0      	lsls	r0, r2, #31
   d5ee6:	bf5c      	itt	pl
   d5ee8:	2201      	movpl	r2, #1
   d5eea:	601a      	strpl	r2, [r3, #0]
   d5eec:	4b1c      	ldr	r3, [pc, #112]	; (d5f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5eee:	681a      	ldr	r2, [r3, #0]
   d5ef0:	07d1      	lsls	r1, r2, #31
   d5ef2:	bf5c      	itt	pl
   d5ef4:	2201      	movpl	r2, #1
   d5ef6:	601a      	strpl	r2, [r3, #0]
   d5ef8:	4b1a      	ldr	r3, [pc, #104]	; (d5f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5efa:	681a      	ldr	r2, [r3, #0]
   d5efc:	07d2      	lsls	r2, r2, #31
   d5efe:	bf5c      	itt	pl
   d5f00:	2201      	movpl	r2, #1
   d5f02:	601a      	strpl	r2, [r3, #0]
   d5f04:	4b18      	ldr	r3, [pc, #96]	; (d5f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5f06:	681a      	ldr	r2, [r3, #0]
   d5f08:	07d0      	lsls	r0, r2, #31
   d5f0a:	bf5c      	itt	pl
   d5f0c:	2201      	movpl	r2, #1
   d5f0e:	601a      	strpl	r2, [r3, #0]
   d5f10:	4b16      	ldr	r3, [pc, #88]	; (d5f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5f12:	681a      	ldr	r2, [r3, #0]
   d5f14:	07d1      	lsls	r1, r2, #31
   d5f16:	bf5c      	itt	pl
   d5f18:	2201      	movpl	r2, #1
   d5f1a:	601a      	strpl	r2, [r3, #0]
   d5f1c:	4b14      	ldr	r3, [pc, #80]	; (d5f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5f1e:	681a      	ldr	r2, [r3, #0]
   d5f20:	07d2      	lsls	r2, r2, #31
   d5f22:	bf5c      	itt	pl
   d5f24:	2201      	movpl	r2, #1
   d5f26:	601a      	strpl	r2, [r3, #0]
   d5f28:	4b12      	ldr	r3, [pc, #72]	; (d5f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5f2a:	681a      	ldr	r2, [r3, #0]
   d5f2c:	07d0      	lsls	r0, r2, #31
   d5f2e:	bf5c      	itt	pl
   d5f30:	2201      	movpl	r2, #1
   d5f32:	601a      	strpl	r2, [r3, #0]
   d5f34:	4b10      	ldr	r3, [pc, #64]	; (d5f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5f36:	681a      	ldr	r2, [r3, #0]
   d5f38:	07d1      	lsls	r1, r2, #31
   d5f3a:	bf5c      	itt	pl
   d5f3c:	2201      	movpl	r2, #1
   d5f3e:	601a      	strpl	r2, [r3, #0]
   d5f40:	4b0e      	ldr	r3, [pc, #56]	; (d5f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5f42:	681a      	ldr	r2, [r3, #0]
   d5f44:	07d2      	lsls	r2, r2, #31
   d5f46:	bf5c      	itt	pl
   d5f48:	2201      	movpl	r2, #1
   d5f4a:	601a      	strpl	r2, [r3, #0]
   d5f4c:	4770      	bx	lr
   d5f4e:	bf00      	nop
   d5f50:	2003e79c 	.word	0x2003e79c
   d5f54:	2003e798 	.word	0x2003e798
   d5f58:	2003e794 	.word	0x2003e794
   d5f5c:	2003e790 	.word	0x2003e790
   d5f60:	2003e78c 	.word	0x2003e78c
   d5f64:	2003e788 	.word	0x2003e788
   d5f68:	2003e784 	.word	0x2003e784
   d5f6c:	2003e780 	.word	0x2003e780
   d5f70:	2003e77c 	.word	0x2003e77c
   d5f74:	2003e778 	.word	0x2003e778
   d5f78:	2003e774 	.word	0x2003e774
   d5f7c:	2003e770 	.word	0x2003e770

000d5f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5f80:	4b24      	ldr	r3, [pc, #144]	; (d6014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d0      	lsls	r0, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4b22      	ldr	r3, [pc, #136]	; (d6018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5f8e:	681a      	ldr	r2, [r3, #0]
   d5f90:	07d1      	lsls	r1, r2, #31
   d5f92:	bf5c      	itt	pl
   d5f94:	2201      	movpl	r2, #1
   d5f96:	601a      	strpl	r2, [r3, #0]
   d5f98:	4b20      	ldr	r3, [pc, #128]	; (d601c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5f9a:	681a      	ldr	r2, [r3, #0]
   d5f9c:	07d2      	lsls	r2, r2, #31
   d5f9e:	bf5c      	itt	pl
   d5fa0:	2201      	movpl	r2, #1
   d5fa2:	601a      	strpl	r2, [r3, #0]
   d5fa4:	4b1e      	ldr	r3, [pc, #120]	; (d6020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d0      	lsls	r0, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b1c      	ldr	r3, [pc, #112]	; (d6024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d1      	lsls	r1, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b1a      	ldr	r3, [pc, #104]	; (d6028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d2      	lsls	r2, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b18      	ldr	r3, [pc, #96]	; (d602c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d0      	lsls	r0, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4b16      	ldr	r3, [pc, #88]	; (d6030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5fd6:	681a      	ldr	r2, [r3, #0]
   d5fd8:	07d1      	lsls	r1, r2, #31
   d5fda:	bf5c      	itt	pl
   d5fdc:	2201      	movpl	r2, #1
   d5fde:	601a      	strpl	r2, [r3, #0]
   d5fe0:	4b14      	ldr	r3, [pc, #80]	; (d6034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5fe2:	681a      	ldr	r2, [r3, #0]
   d5fe4:	07d2      	lsls	r2, r2, #31
   d5fe6:	bf5c      	itt	pl
   d5fe8:	2201      	movpl	r2, #1
   d5fea:	601a      	strpl	r2, [r3, #0]
   d5fec:	4b12      	ldr	r3, [pc, #72]	; (d6038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	07d0      	lsls	r0, r2, #31
   d5ff2:	bf5c      	itt	pl
   d5ff4:	2201      	movpl	r2, #1
   d5ff6:	601a      	strpl	r2, [r3, #0]
   d5ff8:	4b10      	ldr	r3, [pc, #64]	; (d603c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d1      	lsls	r1, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b0e      	ldr	r3, [pc, #56]	; (d6040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d2      	lsls	r2, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4770      	bx	lr
   d6012:	bf00      	nop
   d6014:	2003e7cc 	.word	0x2003e7cc
   d6018:	2003e7c8 	.word	0x2003e7c8
   d601c:	2003e7c4 	.word	0x2003e7c4
   d6020:	2003e7c0 	.word	0x2003e7c0
   d6024:	2003e7bc 	.word	0x2003e7bc
   d6028:	2003e7b8 	.word	0x2003e7b8
   d602c:	2003e7b4 	.word	0x2003e7b4
   d6030:	2003e7b0 	.word	0x2003e7b0
   d6034:	2003e7ac 	.word	0x2003e7ac
   d6038:	2003e7a8 	.word	0x2003e7a8
   d603c:	2003e7a4 	.word	0x2003e7a4
   d6040:	2003e7a0 	.word	0x2003e7a0

000d6044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6044:	4b18      	ldr	r3, [pc, #96]	; (d60a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6046:	681a      	ldr	r2, [r3, #0]
   d6048:	07d1      	lsls	r1, r2, #31
   d604a:	bf5c      	itt	pl
   d604c:	2201      	movpl	r2, #1
   d604e:	601a      	strpl	r2, [r3, #0]
   d6050:	4b16      	ldr	r3, [pc, #88]	; (d60ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6052:	681a      	ldr	r2, [r3, #0]
   d6054:	07d2      	lsls	r2, r2, #31
   d6056:	bf5c      	itt	pl
   d6058:	2201      	movpl	r2, #1
   d605a:	601a      	strpl	r2, [r3, #0]
   d605c:	4b14      	ldr	r3, [pc, #80]	; (d60b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d605e:	681a      	ldr	r2, [r3, #0]
   d6060:	07d0      	lsls	r0, r2, #31
   d6062:	bf5c      	itt	pl
   d6064:	2201      	movpl	r2, #1
   d6066:	601a      	strpl	r2, [r3, #0]
   d6068:	4b12      	ldr	r3, [pc, #72]	; (d60b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d606a:	681a      	ldr	r2, [r3, #0]
   d606c:	07d1      	lsls	r1, r2, #31
   d606e:	bf5c      	itt	pl
   d6070:	2201      	movpl	r2, #1
   d6072:	601a      	strpl	r2, [r3, #0]
   d6074:	4b10      	ldr	r3, [pc, #64]	; (d60b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6076:	681a      	ldr	r2, [r3, #0]
   d6078:	07d2      	lsls	r2, r2, #31
   d607a:	bf5c      	itt	pl
   d607c:	2201      	movpl	r2, #1
   d607e:	601a      	strpl	r2, [r3, #0]
   d6080:	4b0e      	ldr	r3, [pc, #56]	; (d60bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6082:	681a      	ldr	r2, [r3, #0]
   d6084:	07d0      	lsls	r0, r2, #31
   d6086:	bf5c      	itt	pl
   d6088:	2201      	movpl	r2, #1
   d608a:	601a      	strpl	r2, [r3, #0]
   d608c:	4b0c      	ldr	r3, [pc, #48]	; (d60c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d608e:	681a      	ldr	r2, [r3, #0]
   d6090:	07d1      	lsls	r1, r2, #31
   d6092:	bf5c      	itt	pl
   d6094:	2201      	movpl	r2, #1
   d6096:	601a      	strpl	r2, [r3, #0]
   d6098:	4b0a      	ldr	r3, [pc, #40]	; (d60c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d609a:	681a      	ldr	r2, [r3, #0]
   d609c:	07d2      	lsls	r2, r2, #31
   d609e:	bf5c      	itt	pl
   d60a0:	2201      	movpl	r2, #1
   d60a2:	601a      	strpl	r2, [r3, #0]
   d60a4:	4770      	bx	lr
   d60a6:	bf00      	nop
   d60a8:	2003e7ec 	.word	0x2003e7ec
   d60ac:	2003e7e8 	.word	0x2003e7e8
   d60b0:	2003e7e4 	.word	0x2003e7e4
   d60b4:	2003e7e0 	.word	0x2003e7e0
   d60b8:	2003e7dc 	.word	0x2003e7dc
   d60bc:	2003e7d8 	.word	0x2003e7d8
   d60c0:	2003e7d4 	.word	0x2003e7d4
   d60c4:	2003e7d0 	.word	0x2003e7d0

000d60c8 <__cxa_atexit>:
   d60c8:	b510      	push	{r4, lr}
   d60ca:	4c05      	ldr	r4, [pc, #20]	; (d60e0 <__cxa_atexit+0x18>)
   d60cc:	4613      	mov	r3, r2
   d60ce:	b12c      	cbz	r4, d60dc <__cxa_atexit+0x14>
   d60d0:	460a      	mov	r2, r1
   d60d2:	4601      	mov	r1, r0
   d60d4:	2002      	movs	r0, #2
   d60d6:	f3af 8000 	nop.w
   d60da:	bd10      	pop	{r4, pc}
   d60dc:	4620      	mov	r0, r4
   d60de:	bd10      	pop	{r4, pc}
   d60e0:	00000000 	.word	0x00000000

000d60e4 <memcmp>:
   d60e4:	b510      	push	{r4, lr}
   d60e6:	3901      	subs	r1, #1
   d60e8:	4402      	add	r2, r0
   d60ea:	4290      	cmp	r0, r2
   d60ec:	d007      	beq.n	d60fe <memcmp+0x1a>
   d60ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   d60f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d60f6:	42a3      	cmp	r3, r4
   d60f8:	d0f7      	beq.n	d60ea <memcmp+0x6>
   d60fa:	1b18      	subs	r0, r3, r4
   d60fc:	bd10      	pop	{r4, pc}
   d60fe:	2000      	movs	r0, #0
   d6100:	bd10      	pop	{r4, pc}

000d6102 <memcpy>:
   d6102:	b510      	push	{r4, lr}
   d6104:	1e43      	subs	r3, r0, #1
   d6106:	440a      	add	r2, r1
   d6108:	4291      	cmp	r1, r2
   d610a:	d004      	beq.n	d6116 <memcpy+0x14>
   d610c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6110:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6114:	e7f8      	b.n	d6108 <memcpy+0x6>
   d6116:	bd10      	pop	{r4, pc}

000d6118 <memset>:
   d6118:	4402      	add	r2, r0
   d611a:	4603      	mov	r3, r0
   d611c:	4293      	cmp	r3, r2
   d611e:	d002      	beq.n	d6126 <memset+0xe>
   d6120:	f803 1b01 	strb.w	r1, [r3], #1
   d6124:	e7fa      	b.n	d611c <memset+0x4>
   d6126:	4770      	bx	lr

000d6128 <srand>:
   d6128:	b538      	push	{r3, r4, r5, lr}
   d612a:	4b12      	ldr	r3, [pc, #72]	; (d6174 <srand+0x4c>)
   d612c:	681c      	ldr	r4, [r3, #0]
   d612e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6130:	4605      	mov	r5, r0
   d6132:	b9d3      	cbnz	r3, d616a <srand+0x42>
   d6134:	2018      	movs	r0, #24
   d6136:	f7fe fb11 	bl	d475c <malloc>
   d613a:	f243 330e 	movw	r3, #13070	; 0x330e
   d613e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6140:	8003      	strh	r3, [r0, #0]
   d6142:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6146:	8043      	strh	r3, [r0, #2]
   d6148:	f241 2334 	movw	r3, #4660	; 0x1234
   d614c:	8083      	strh	r3, [r0, #4]
   d614e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6152:	80c3      	strh	r3, [r0, #6]
   d6154:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6158:	8103      	strh	r3, [r0, #8]
   d615a:	2305      	movs	r3, #5
   d615c:	8143      	strh	r3, [r0, #10]
   d615e:	230b      	movs	r3, #11
   d6160:	8183      	strh	r3, [r0, #12]
   d6162:	2201      	movs	r2, #1
   d6164:	2300      	movs	r3, #0
   d6166:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d616a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d616c:	2200      	movs	r2, #0
   d616e:	611d      	str	r5, [r3, #16]
   d6170:	615a      	str	r2, [r3, #20]
   d6172:	bd38      	pop	{r3, r4, r5, pc}
   d6174:	2003e360 	.word	0x2003e360

000d6178 <strlen>:
   d6178:	4603      	mov	r3, r0
   d617a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d617e:	2a00      	cmp	r2, #0
   d6180:	d1fb      	bne.n	d617a <strlen+0x2>
   d6182:	1a18      	subs	r0, r3, r0
   d6184:	3801      	subs	r0, #1
   d6186:	4770      	bx	lr

000d6188 <strncmp>:
   d6188:	b530      	push	{r4, r5, lr}
   d618a:	b182      	cbz	r2, d61ae <strncmp+0x26>
   d618c:	1e45      	subs	r5, r0, #1
   d618e:	3901      	subs	r1, #1
   d6190:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6194:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6198:	42a3      	cmp	r3, r4
   d619a:	d106      	bne.n	d61aa <strncmp+0x22>
   d619c:	43ec      	mvns	r4, r5
   d619e:	4414      	add	r4, r2
   d61a0:	42e0      	cmn	r0, r4
   d61a2:	d001      	beq.n	d61a8 <strncmp+0x20>
   d61a4:	2b00      	cmp	r3, #0
   d61a6:	d1f3      	bne.n	d6190 <strncmp+0x8>
   d61a8:	461c      	mov	r4, r3
   d61aa:	1b18      	subs	r0, r3, r4
   d61ac:	bd30      	pop	{r4, r5, pc}
   d61ae:	4610      	mov	r0, r2
   d61b0:	bd30      	pop	{r4, r5, pc}

000d61b2 <strnlen>:
   d61b2:	b510      	push	{r4, lr}
   d61b4:	4603      	mov	r3, r0
   d61b6:	4401      	add	r1, r0
   d61b8:	428b      	cmp	r3, r1
   d61ba:	d004      	beq.n	d61c6 <strnlen+0x14>
   d61bc:	781a      	ldrb	r2, [r3, #0]
   d61be:	1c5c      	adds	r4, r3, #1
   d61c0:	b10a      	cbz	r2, d61c6 <strnlen+0x14>
   d61c2:	4623      	mov	r3, r4
   d61c4:	e7f8      	b.n	d61b8 <strnlen+0x6>
   d61c6:	1a18      	subs	r0, r3, r0
   d61c8:	bd10      	pop	{r4, pc}

000d61ca <link_code_end>:
	...

000d61cc <dynalib_user>:
   d61cc:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d61dc:	0000 0000 554e 4c4c 6500 6576 746e 253d     ....NULL.event=%
   d61ec:	2073 6164 6174 253d 0073 6556 7372 6f69     s data=%s.Versio
   d61fc:	3a6e 2520 0073 6159 6472 4d20 6e6f 7469     n: %s.Yard Monit
   d620c:	726f 6920 696e 6974 6c61 7a69 6465 2e2e     or initialized..
   d621c:	2e2e 5200 6365 6569 6576 5f64 6f4e 6564     ...Recieved_Node
   d622c:	0073 4147 4554 4157 3a59 5320 6e65 6964     s.GATEWAY: Sendi
   d623c:	676e 3c20 3c3c 4547 2054 4f4e 4544 3e3e     ng <<<GET NODE>>
   d624c:	203e 6572 7571 7365 0074 4547 5f54 6f4e     > request.GET_No
   d625c:	6564 0073                                   des.

000d6260 <_ZL7version>:
   d6260:	454d 4853 595f 5241 5f44 4f4d 494e 4f54     MESH_YARD_MONITO
   d6270:	5f52 3076 302e 312e 0000 0000               R_v0.0.1....

000d627c <_ZTVN5spark13EthernetClassE>:
	...
   d6284:	47fb 000d 47f1 000d 47e7 000d 47dd 000d     .G...G...G...G..
   d6294:	47d1 000d 47c5 000d 47b9 000d 47b1 000d     .G...G...G...G..
   d62a4:	47a7 000d 479d 000d 5c3d 000d               .G...G..=\..

000d62b0 <_ZTV8SPIClass>:
	...
   d62b8:	4819 000d 481b 000d                         .H...H..

000d62c0 <_ZTV3UDP>:
	...
   d62c8:	4ead 000d 4ed1 000d 4891 000d 49bb 000d     .N...N...H...I..
   d62d8:	4889 000d 48a7 000d 48c5 000d 48df 000d     .H...H...H...H..
   d62e8:	4903 000d 499f 000d 4ca1 000d 4a41 000d     .I...I...L..AJ..
   d62f8:	4bc1 000d 4871 000d 4e47 000d 4b45 000d     .K..qH..GN..EK..
   d6308:	4a79 000d 4e75 000d 49e5 000d 487f 000d     yJ..uN...I...H..
   d6318:	4a21 000d 4885 000d 48e1 000d fff0 ffff     !J...H...H......
   d6328:	0000 0000 48fb 000d 0066 6e6c 6600 006e     .....H..f.ln.fn.
   d6338:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d6348:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d6358:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d6368:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
   d6378:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d6388:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d6398:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d63a8:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d63b8:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d63c8:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d63d8:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d63e8:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d63f8:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d6408:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
   d6418:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d6428:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d6438 <_ZTV9IPAddress>:
	...
   d6440:	518f 000d 5181 000d 5183 000d               .Q...Q...Q..

000d644c <_ZTV9USBSerial>:
	...
   d6454:	5295 000d 52d9 000d 52b3 000d 4efb 000d     .R...R...R...N..
   d6464:	52ad 000d 5297 000d 529f 000d 52d3 000d     .R...R...R...R..
   d6474:	52a7 000d 5291 000d                         .R...R..

000d647c <_ZTVN5spark13CellularClassE>:
	...
   d6484:	53d7 000d 53cd 000d 53c3 000d 5379 000d     .S...S...S..yS..
   d6494:	53b7 000d 53ab 000d 539f 000d 5397 000d     .S...S...S...S..
   d64a4:	538d 000d 5383 000d 5c3d 000d               .S...S..=\..

000d64b0 <_ZTV11USARTSerial>:
	...
   d64b8:	5421 000d 5445 000d 5451 000d 4efb 000d     !T..ET..QT...N..
   d64c8:	542d 000d 5439 000d 5433 000d 543f 000d     -T..9T..3T..?T..
   d64d8:	5423 000d 5427 000d                         #T..'T..

000d64e0 <_ZTV7TwoWire>:
	...
   d64e8:	54f5 000d 553f 000d 5517 000d 54f7 000d     .T..?U...U...T..
   d64f8:	551f 000d 5527 000d 552f 000d 5537 000d     .U..'U../U..7U..

000d6508 <_ZTVN5spark9MeshClassE>:
	...
   d6510:	5601 000d 55f7 000d 55ed 000d 55e3 000d     .V...U...U...U..
   d6520:	55d7 000d 55cb 000d 55bf 000d 55b7 000d     .U...U...U...U..
   d6530:	55ad 000d 55a3 000d 5c3d 000d 6666 3330     .U...U..=\..ff03
   d6540:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d6550:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d6560:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d656c <_ZTVN5spark12NetworkClassE>:
	...
   d6574:	5bd5 000d 5bdf 000d 5be9 000d 5bf3 000d     .[...[...[...[..
   d6584:	5bfd 000d 5c09 000d 5c15 000d 5c21 000d     .[...\...\..!\..
   d6594:	5c29 000d 5c33 000d 5c3d 000d               )\..3\..=\..

000d65a0 <_ZSt7nothrow>:
   d65a0:	0000 0000                                   ....

000d65a4 <__sf_fake_stdin>:
	...

000d65c4 <__sf_fake_stdout>:
	...

000d65e4 <__sf_fake_stderr>:
	...
   d6604:	0043                                        C.

000d6606 <link_const_variable_data_end>:
	...

000d6608 <link_constructors_location>:
   d6608:	000d4249 	.word	0x000d4249
   d660c:	000d4805 	.word	0x000d4805
   d6610:	000d4859 	.word	0x000d4859
   d6614:	000d504d 	.word	0x000d504d
   d6618:	000d505d 	.word	0x000d505d
   d661c:	000d5091 	.word	0x000d5091
   d6620:	000d53e1 	.word	0x000d53e1
   d6624:	000d5b89 	.word	0x000d5b89
   d6628:	000d5cc1 	.word	0x000d5cc1
   d662c:	000d5d71 	.word	0x000d5d71
   d6630:	000d5e39 	.word	0x000d5e39
   d6634:	000d5ebd 	.word	0x000d5ebd
   d6638:	000d5f81 	.word	0x000d5f81
   d663c:	000d6045 	.word	0x000d6045
